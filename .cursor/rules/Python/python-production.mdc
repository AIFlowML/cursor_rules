---
alwaysApply: true
---

> You are an expert in Python 3.11+, the UV package manager, and modern backend engineering. Write secure, typed, maintainable, and observable code, favouring built-ins and the standard library. Use UV for every dependency-related example.

# Python Production Best Practices ‑ UV Edition

## 1 Overview

This rule enforces battle-hardened conventions for Python services. It covers:
• Project structure • UV-based package management • Typing & error handling • Config & env management • Logging & observability • Security • Performance & deployment.

## 2 Project Structure

```text
project/
├── .env                 # Secrets only; never commit
├── README.md            # Docs
├── pyproject.toml       # Metadata managed by UV
├── uv.lock              # Exact versions (commit it)
├── src/                 # App code (import via `python -m`)
│   └── app/
│       ├── __init__.py
│       ├── main.py      # Entry point
│       ├── api/
│       ├── agents/
│       ├── db/
│       └── utils/
├── config/              # YAML/TOML files
├── scripts/             # One-off scripts (use `uv run` shebang)
└── logs/                # Git-ignored runtime logs
```

## 3 Package Management with UV

### 3.1 Initialise

```bash
# New project
uv init myproject --python 3.12
cd myproject
uv sync           # Install deps (none yet)
```

### 3.2 Add / Remove Dependencies

```bash
uv add "fastapi>=0.110,<1" pydantic uvicorn[standard]
uv remove pydantic
```

### 3.3 Environment Handling

- Do **not** activate `.venv`; prefer `uv run` which auto-injects the env.
- Pin runtime Python: `uv python pin 3.12` to write `.python-version`.

### 3.4 Scripts

```python
#!/usr/bin/env -S uv run --frozen
# /// script
# dependencies = ["rich>=13", "httpx>=0.27"]
# ///
...
```

Run with `./script.py` or `uv run script.py`.

### 3.5 Lock & Export

```bash
uv lock            # Refresh uv.lock
uv export --format requirements-txt > requirements.txt  # For tooling that needs it
```

## 4 Code Quality Standards

### 4.1 Static Typing

Use `typing` **everywhere**. Treat `Any` as a bug.

```python
from typing import TypedDict, Sequence

class User(TypedDict):
    id: str
    email: str

def emails(users: Sequence[User]) -> list[str]:
    return [u["email"] for u in users]
```

### 4.2 Error Handling

```python
class AppError(Exception):
    """Base class for all domain errors."""

class NotFound(AppError):
    ...

def get_user(uid: str) -> User:
    user = repo.fetch(uid)
    if not user:
        raise NotFound(uid)
    return user
```

### 4.3 Configuration Files

Prefer YAML/TOML over JSON for human-edited config.

```python
import tomllib, pathlib

CONFIG_PATH = pathlib.Path("config/app.toml")
settings: dict = tomllib.loads(CONFIG_PATH.read_text())
```

### 4.4 Environment Variables

```python
from os import getenv
API_KEY = getenv("API_KEY") or (_ for _ in ()).throw(RuntimeError("API_KEY missing"))
```

### 4.5 Logging & Observability

Use `structlog` for structured logs plus OpenTelemetry for tracing.

```python
import structlog, logging
logging.basicConfig(level="INFO", format="%(message)s")
structlog.configure(processors=[
    structlog.processors.TimeStamper(fmt="iso"),
    structlog.processors.add_log_level,
    structlog.processors.JSONRenderer(),
])
log = structlog.get_logger()
log.info("service_started", version="1.0.0")
```

## 5 Code Style & Linting

```bash
# Formatter & linter
uv tool install black ruff mypy
uv run ruff check src
uv run black --quiet src
uv run mypy src
```

Adopt _pre-commit_ hooks:

```yaml
repos:
  - repo: local
    hooks:
      - id: ruff
        entry: uv run ruff check --fix
      - id: black
        entry: uv run black
```

### 5.1 Loops & Comprehensions

- Prefer comprehension, `enumerate`, `zip`.
- Avoid `range(len(seq))`.

## 6 Documentation

- Every public symbol needs a [PEP 257] docstring.
- Generate docs via `mkdocs` (add to optional group `docs`).

## 7 Code Organisation

### 7.1 Separation of Concerns

Split per bounded context. Keep functions < 30 lines & 3 nested blocks.

### 7.2 Interfaces

```python
from abc import ABC, abstractmethod
class Notifier(ABC):
    @abstractmethod
    def send(self, to: str, msg: str) -> None: ...
```

## 8 Database Best Practices

### 8.1 Pooling

```python
from contextlib import contextmanager
from psycopg2.pool import SimpleConnectionPool
pool = SimpleConnectionPool(1, 10, dsn=dsn)

@contextmanager
def cursor():
    conn = pool.getconn()
    try:
        cur = conn.cursor()
        yield cur
        conn.commit()
    finally:
        cur.close(); pool.putconn(conn)
```

### 8.2 SQL Injection

Always use param placeholders, never f-strings with user input.

## 9 Security Checklist

1 Never hardcode secrets; use env var injection.
2 Validate & sanitise all inbound data.
3 Apply principle of least privilege (DB roles, IAM scopes).
4 Hash passwords with `argon2-cffi` or `bcrypt`.
5 Expose HTTPS only; set HSTS, CSP, and `X-Content-Type-Options`.

## 10 Performance & Memory

- Profile first (`cProfile`, `py-spy`).
- Prefer generators for large streams.
- Use caching (`functools.lru_cache` or Redis) for hot paths.
- Free heavy objects (`del big; gc.collect()`) when crossing memory thresholds.

## 11 Deployment

### 11.1 Docker (multi-stage)

```dockerfile
FROM python:3.12-slim AS builder
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/
WORKDIR /app
COPY pyproject.toml uv.lock ./
RUN uv sync --frozen --no-dev
COPY src/ ./src/

FROM python:3.12-slim
WORKDIR /app
COPY --from=builder /app /app
ENV PATH="/app/.venv/bin:$PATH"
CMD ["python", "-m", "app.main"]
```

### 11.2 Runtime Flags

Set `PYTHONUNBUFFERED=1`, `PYTHONHASHSEED=random`, `UV_COMPILE_BYTECODE=1` for faster startup.

### 11.3 Observability

Ship traces & metrics via OTLP; expose `/health` & `/metrics` endpoints.

## 12 References

- [UV Docs](https://docs.astral.sh/uv)
- [PEP 8](https://peps.python.org/pep-0008)
- [PEP 484](https://peps.python.org/pep-0484)
- [OWASP Top 10](https://owasp.org/www-project-top-ten)
