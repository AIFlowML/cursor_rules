{"version":3,"sources":["../src/providers/wallet.ts","../src/templates/index.ts","../src/constants.ts","../src/actions/swap.ts","../src/actions/transfer.ts","../src/actions/getBalance.ts","../src/types/index.ts","../src/actions/bridge.ts","../src/actions/stake.ts","../src/actions/faucet.ts","../src/utils/contracts.ts","../src/actions/deploy.ts","../src/abi/CrossChainAbi.ts","../src/abi/TokenHubAbi.ts","../src/providers/gnfd.ts","../src/actions/gnfd.ts","../src/actions/getBucket.ts","../src/environment.ts","../src/index.ts"],"names":["process","e","logger","publicClient","parseEther","value","erc20Abi","formatUnits","amount","toAddress","ModelType","match","tokenValue","getToken","formatEther","parseUnits","txHash","stakeAction","require","solc","safeReceipt","createRequire","Client","address","transactionHash","resourceUrl","textResponse","filePath"],"mappings":"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","file":"index.js","sourcesContent":["import type {\n     IAgentRuntime,\n     Provider,\n     Memory,\n     State,\n} from \"@elizaos/core\";\nimport { EVM, createConfig, getToken } from \"@lifi/sdk\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n    Hex,\n} from \"viem\";\nimport {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n    erc20Abi,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport * as viemChains from \"viem/chains\";\nimport { createWeb3Name } from \"@web3-name-sdk/core\";\nimport { elizaLogger } from \"@elizaos/core\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private currentChain: SupportedChain = \"bsc\";\n    chains: Record<string, Chain> = { bsc: viemChains.bsc };\n    account: PrivateKeyAccount;\n    private privateKey: `0x${string}`;\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\n        this.privateKey = privateKey;\n        this.setAccount(privateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n    }\n \n    getAccount(): PrivateKeyAccount {\n        return this.account;\n    }\n    getPk(): `0x${string}` {\n        return this.privateKey;\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    configureLiFiSdk(chainName: SupportedChain) {\n        const chains = Object.values(this.chains);\n        const walletClient = this.getWalletClient(chainName);\n\n        createConfig({\n            integrator: \"eliza\",\n            providers: [\n                EVM({\n                    getWalletClient: async () => walletClient,\n                    switchChain: async (chainId) =>\n                        createWalletClient({\n                            account: this.account,\n                            chain: chains.find(\n                                (chain) => chain.id === chainId\n                            ) as Chain,\n                            transport: http(),\n                        }),\n                }),\n            ],\n        });\n    }\n\n    async formatAddress(address: string | null | undefined): Promise<Address> {\n        // If address is null or undefined, use the wallet's own address\n        if (address === null || address === undefined) {\n            elizaLogger.debug(\"Address is null or undefined, using wallet's own address\");\n            return this.getAddress();\n        }\n\n        // If address is empty string, use wallet's own address\n        if (typeof address === 'string' && address.trim().length === 0) {\n            elizaLogger.debug(\"Address is empty string, using wallet's own address\");\n            return this.getAddress();\n        }\n\n        // Convert to string in case we get an object or other type\n        const addressStr = String(address).trim();\n        \n        // If it's already a valid hex address, return it directly\n        if (addressStr.startsWith(\"0x\") && addressStr.length === 42) {\n            elizaLogger.debug(`Using valid hex address: ${addressStr}`);\n            return addressStr as Address;\n        }\n        \n        // Skip web3 name resolution for common tokens that might be mistakenly\n        // passed as addresses\n        const commonTokens = ['USDT', 'USDC', 'BNB', 'ETC', 'WETC', 'BUSD', 'WBNB', 'TRON', 'LINK', 'OM', 'UNI', 'PEPE', 'AAVE', 'ATOM'];\n        if (commonTokens.includes(addressStr.toUpperCase())) {\n            elizaLogger.debug(`Value appears to be a token symbol, not an address: ${addressStr}. Using wallet's own address.`);\n            return this.getAddress();\n        }\n\n        // Try to resolve as web3 name\n        try {\n            elizaLogger.debug(`Attempting to resolve as Web3Name: ${addressStr}`);\n            const resolvedAddress = await this.resolveWeb3Name(addressStr);\n            if (resolvedAddress) {\n                elizaLogger.debug(`Resolved Web3Name to address: ${resolvedAddress}`);\n                return resolvedAddress as Address;\n            }\n        } catch (error) {\n            elizaLogger.debug(`Failed to resolve Web3Name '${addressStr}': ${error.message}. Will try other methods.`);\n            // Continue to other methods rather than throwing\n        }\n        \n        // If we can't resolve the name but it looks like a potential address\n        if (addressStr.startsWith(\"0x\")) {\n            elizaLogger.debug(`Address \"${addressStr}\" doesn't look like a standard Ethereum address but will be used as is`);\n            return addressStr as Address;\n        }\n        \n        // If all else fails, use the wallet's own address\n        elizaLogger.debug(`Could not resolve address '${addressStr}'. Using wallet's own address.`);\n        return this.getAddress();\n    }\n\n    async resolveWeb3Name(name: string | null | undefined): Promise<string | null> {\n        // Handle null/undefined/empty cases\n        if (name === null || name === undefined || name === 'null') {\n            elizaLogger.debug(`Web3Name resolution skipped for null/undefined value`);\n            return null;\n        }\n        \n        // Convert to string and trim\n        const nameStr = String(name).trim();\n        if (nameStr.length === 0) {\n            elizaLogger.debug(`Web3Name resolution skipped for empty string`);\n            return null;\n        }\n        \n        // If it's already a valid address, return it directly\n        if (nameStr.startsWith('0x') && nameStr.length === 42) {\n            elizaLogger.debug(`Value is already a valid address: ${nameStr}`);\n            return nameStr;\n        }\n        \n        // Skip resolution for common token symbols and keywords\n        const commonTokens = ['USDT', 'USDC', 'BNB', 'ETH', 'BTC', 'BUSD', 'DAI', 'WETC', 'WBNB', 'TRON', 'LINK', 'OM', 'UNI', 'PEPE', 'AAVE', 'ATOM'];\n        if (commonTokens.includes(nameStr.toUpperCase())) {\n            elizaLogger.debug(`Skipping Web3Name resolution for common token: ${nameStr}`);\n            return null;\n        }\n        \n        try {\n            // Get the current chain's RPC URL to use for name resolution\n            const chain = this.getCurrentChain();\n            const rpcUrl = chain.rpcUrls.custom?.http[0] || chain.rpcUrls.default.http[0];\n            \n            elizaLogger.debug(`Resolving Web3Name: ${nameStr} using chain ${chain.name} and RPC: ${rpcUrl}`);\n            \n            // Create nameService with explicit RPC URL\n            const nameService = createWeb3Name({\n                rpcUrl\n            });\n            \n            // Attempt resolution with timeout\n            const result = await Promise.race([\n                nameService.getAddress(nameStr),\n                new Promise<null>((resolve) => \n                    setTimeout(() => {\n                        elizaLogger.debug(`Web3Name resolution timeout for ${nameStr}`);\n                        resolve(null);\n                    }, 5000) // 5 second timeout\n                )\n            ]);\n            \n            if (result) {\n                elizaLogger.debug(`Web3Name resolved: ${nameStr} → ${result}`);\n                return result;\n            } else {\n                elizaLogger.debug(`Web3Name not resolved: ${nameStr}`);\n                return null;\n            }\n        } catch (error) {\n            // Log error but don't propagate it - maintain smooth user experience\n            elizaLogger.debug(`Error resolving Web3Name ${nameStr}: ${error.message}`);\n            return null;\n        }\n    }\n\n    async checkERC20Allowance(\n        chain: SupportedChain,\n        token: Address,\n        owner: Address,\n        spender: Address,\n    ): Promise<bigint> {\n        const publicClient = this.getPublicClient(chain);\n        return await publicClient.readContract({\n            address: token,\n            abi: erc20Abi,\n            functionName: \"allowance\",\n            args: [owner, spender],\n        });\n    }\n\n    async approveERC20(\n        chain: SupportedChain,\n        token: Address,\n        spender: Address,\n        amount: bigint\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: token,\n            abi: erc20Abi,\n            functionName: \"approve\",\n            args: [spender, amount],\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async transfer(\n        chain: SupportedChain,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n            data?: Hex;\n        }\n    ): Promise<Hex> {\n        const walletClient = this.getWalletClient(chain);\n        return await walletClient.sendTransaction({\n            account: this.account,\n            to: toAddress,\n            value: amount,\n            chain: this.getChainConfigs(chain),\n            ...options,\n        });\n    }\n\n    async transferERC20(\n        chain: SupportedChain,\n        tokenAddress: Address,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n        }\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: tokenAddress as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"transfer\",\n            args: [toAddress as `0x${string}`, amount],\n            ...options,\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async getBalance(): Promise<string> {\n        const client = this.getPublicClient(this.currentChain);\n        const balance = await client.getBalance({\n            address: this.account.address,\n        });\n        return formatUnits(balance, 18);\n    }\n\n    async getTokenAddress(\n        chainName: SupportedChain,\n        tokenSymbol: string\n    ): Promise<string> {\n        const token = await getToken(\n            this.getChainConfigs(chainName).id,\n            tokenSymbol\n        );\n        return token.address;\n    }\n\n    /**\n     * Gets testnet token address from predefined mapping\n     * This is a custom method for testnet tokens since the regular token lookup\n     * doesn't work on testnets.\n     */\n    getTestnetTokenAddress(tokenSymbol: string): string | null {\n        // Testnet token mapping - keep in sync with the mapping in getBalanceTestnet.ts\n        const TESTNET_TOKEN_ADDRESSES: Record<string, string> = {\n            \"BNB\": \"0x64544969ed7EBf5f083679233325356EbE738930\",\n            \"BUSD\": \"0x48D87A2d14De41E2308A764905B93E05c9377cE1\",\n            \"DAI\": \"0x46B48c1Ef4B5F15B7DdC415290CEC2f774cD1021\",\n            \"ETH\": \"0x635780E5D02Ab29d7aE14d266936A38d3D5B0CC5\",\n            \"USDC\": \"0x053Fc65249dF91a02Ddb294A081f774615aB45F4\",\n        };\n\n        // Normalize input to uppercase\n        const normalizedSymbol = tokenSymbol.toUpperCase();\n        \n        // Check if token exists in mapping\n        if (TESTNET_TOKEN_ADDRESSES[normalizedSymbol]) {\n            elizaLogger.debug(`Found testnet token address for ${normalizedSymbol}: ${TESTNET_TOKEN_ADDRESSES[normalizedSymbol]}`);\n            return TESTNET_TOKEN_ADDRESSES[normalizedSymbol];\n        }\n        \n        elizaLogger.debug(`No testnet address found for token ${normalizedSymbol}`);\n        return null;\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private setAccount = (pk: `0x${string}`) => {\n        this.account = privateKeyToAccount(pk);\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        for (const chain of Object.keys(chains)) {\n            this.chains[chain] = chains[chain];\n        }\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames = [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"];\n    const chains = {};\n\n    for (const chainName of chainNames) {\n        const chain = WalletProvider.genChainFromName(chainName);\n        chains[chainName] = chain;\n    }\n\n    const mainnet_rpcurl = runtime.getSetting(\"BSC_PROVIDER_URL\");\n    if (mainnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"bsc\", mainnet_rpcurl);\n        chains[\"bsc\"] = chain;\n    }\n    \n    const testnet_rpcurl = runtime.getSetting(\"BSC_TESTNET_PROVIDER_URL\");\n    if (testnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"bscTestnet\", testnet_rpcurl);\n        chains[\"bscTestnet\"] = chain;\n    }\n\n    const opbnb_rpcurl = runtime.getSetting(\"OPBNB_PROVIDER_URL\");\n    if (opbnb_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"opBNB\", opbnb_rpcurl);\n        chains[\"opBNB\"] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"BNB_PRIVATE_KEY is missing\");\n    }\n\n    const chains = genChainsFromRuntime(runtime);\n\n    return new WalletProvider(privateKey as `0x${string}`, chains);\n};\n\nexport const bnbWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getBalance();\n            const chain = walletProvider.getCurrentChain();\n            return `BNB chain Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in BNB chain wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","/**\n * BNB Plugin Action Templates\n * \n * This file contains template strings used to extract structured data from user messages\n * for various BNB chain actions. Each template defines how to parse natural language requests\n * into formatted parameters that can be used by action handlers.\n * \n * The templates use {{recentMessages}} and {{walletInfo}} placeholders that get replaced\n * with actual conversation context and wallet data at runtime.\n */\n\n/**\n * Template for checking token balances\n * \n * Extracts information about which chain, address, and token to check balances for.\n * Supports BSC, BSC Testnet, opBNB, and opBNB Testnet chains.\n * Can check balances for any address, defaulting to the user's wallet address.\n * \n * @example\n * \"What's my BNB balance?\"\n * \"Check BUSD balance for 0x123...\"\n */\nexport const getBalanceTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested check balance:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Address to check balance for. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\n- Token symbol or address. Could be a token symbol or address. If the address is provided, it must be a valid Ethereum address starting with \"0x\". Default is \"BNB\".\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"address\": string | null,\n    \"token\": string\n}\n\\`\\`\\`\n`;\n\n/**\n * Template for transferring tokens\n * \n * Extracts information about token transfers, including chain, token, amount,\n * recipient address, and optional transaction data.\n * Supports transferring native BNB or any ERC20 token on BSC or opBNB networks.\n * \n * @example\n * \"Send 0.1 BNB to 0x123...\"\n * \"Transfer 50 BUSD to vitalik.eth on BSC\"\n */\nexport const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Token symbol or address(string starting with \"0x\"). Optional.\n- Amount to transfer. Optional. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Recipient address. Must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n- Data. Optional, data to be included in the transaction.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"token\": string | null,\n    \"amount\": string | null,\n    \"toAddress\": string,\n    \"data\": string | null\n}\n\\`\\`\\`\n`;\n\n/**\n * Template for swapping tokens\n * \n * Extracts information about token swaps, including chain, input token,\n * output token, amount, and slippage tolerance.\n * Supports swapping between any tokens available on decentralized exchanges\n * on BSC or opBNB networks.\n * \n * @example\n * \"Swap 0.5 BNB for CAKE\"\n * \"Exchange 10 BUSD for ETH with 1% slippage on opBNB\"\n */\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Input token symbol or address(string starting with \"0x\").\n- Output token symbol or address(string starting with \"0x\").\n- Amount to swap. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Slippage. Optional, expressed as decimal proportion, 0.03 represents 3%.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"inputToken\": string | null,\n    \"outputToken\": string | null,\n    \"amount\": string | null,\n    \"slippage\": number | null\n}\n\\`\\`\\`\n`;\n\n/**\n * Template for bridging tokens between chains\n * \n * Extracts information about token bridging operations between BSC and opBNB,\n * including source chain, destination chain, token addresses, amount, and recipient.\n * Enables cross-chain token transfers using the BNB Chain bridge infrastructure.\n * \n * @example\n * \"Bridge 1 BNB from BSC to opBNB\"\n * \"Send 25 BUSD from opBNB to BSC to my address\"\n */\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token bridge:\n- From chain. Must be one of [\"bsc\", \"opBNB\"].\n- To chain. Must be one of [\"bsc\", \"opBNB\"].\n- From token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- To token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- Amount to bridge. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- To address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"fromChain\": \"bsc\" | \"opBNB\",\n    \"toChain\": \"bsc\" | \"opBNB\",\n    \"fromToken\": string | null,\n    \"toToken\": string | null,\n    \"amount\": string,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\n/**\n * Template for staking operations\n * \n * Extracts information about staking actions, including chain, action type\n * (deposit, withdraw, claim), and amount.\n * Supports staking BNB tokens in various staking protocols on BSC or opBNB.\n * \n * @example\n * \"Stake 2 BNB on BSC\"\n * \"Withdraw 0.5 BNB from staking on opBNB\"\n * \"Claim my staking rewards\"\n */\nexport const stakeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested stake action:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- Action to execute. Must be one of [\"deposit\", \"withdraw\", \"claim\"].\n- Amount to execute. Optional, must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\"). If the action is \"deposit\" or \"withdraw\", amount is required.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"action\": \"deposit\" | \"withdraw\" | \"claim\",\n    \"amount\": string | null,\n}\n\\`\\`\\`\n`;\n\n/**\n * Template for faucet requests\n * \n * Extracts information about testnet faucet requests, including\n * token type and recipient address.\n * Allows users to request test tokens on BSC Testnet or opBNB Testnet.\n * \n * @example\n * \"Get testnet BNB from faucet\"\n * \"Request BUSD from faucet to 0x123...\"\n */\nexport const faucetTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested faucet request:\n- Token. Token to request. Could be one of [\"BNB\", \"BTC\", \"BUSD\", \"DAI\", \"ETH\", \"USDC\"]. Optional.\n- Recipient address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the BNB chain Wallet Address.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"token\": string | null,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\n/**\n * Template for token contract deployment\n * \n * Extracts information about token contract deployments, including chain,\n * contract type (ERC20, ERC721, ERC1155), and contract parameters.\n * Enables users to deploy custom tokens and NFT collections on BSC or opBNB.\n * \n * @example\n * \"Deploy an ERC20 token named 'My Token' with symbol MTK\"\n * \"Create an NFT collection with name 'Cool NFTs' and symbol CNFT\"\n */\nexport const ercContractTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nWhen user wants to deploy any type of token contract (ERC20/721/1155), this will trigger the DEPLOY_TOKEN action.\n\nExtract the following details for deploying a token contract:\n- Chain to execute on. Must be one of [\"bsc\", \"bscTestnet\", \"opBNB\", \"opBNBTestnet\"]. Default is \"bsc\".\n- contractType: The type of token contract to deploy\n  - For ERC20: Extract name, symbol, decimals, totalSupply\n  - For ERC721: Extract name, symbol, baseURI\n  - For ERC1155: Extract name, baseURI\n- name: The name of the token.\n- symbol: The token symbol (only for ERC20/721).\n- decimals: Token decimals (only for ERC20). Default is 18.\n- totalSupply: Total supply with decimals (only for ERC20). Default is \"1000000000000000000\".\n- baseURI: Base URI for token metadata (only for ERC721/1155).\nIf any field is not provided, use the default value. If no default value is provided, use empty string.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"contractType\": \"ERC20\" | \"ERC721\" | \"ERC1155\",\n    \"name\": string,\n    \"symbol\": string | null,\n    \"decimals\": number | null,\n    \"totalSupply\": string | null,\n    \"baseURI\": string | null\n}\n\\`\\`\\`\n`;\n\n/**\n * Template for Greenfield operations\n * \n * Extracts information about BNB Greenfield decentralized storage operations,\n * including operation type, bucket details, object details, and cross-chain transfers.\n * Enables interactions with the BNB Greenfield decentralized storage network.\n * \n * @example\n * \"Create a private bucket called 'my-data' on Greenfield\"\n * \"Upload a file to my Greenfield bucket\"\n * \"Transfer 0.5 BNB to Greenfield\"\n */\nexport const greenfieldTemplate = `Given the recent messages and wallet information below(only including 'Greenfield' keyword):\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following details for Greenfield operations:\n- The type of operation to perform (e.g., \"createBucket\", \"uploadObject\", \"deleteObject\", \"crossChainTransfer\")\n- The name of the bucket to operate\n- The name of the object for upload operations\n- Bucket visibility setting (\"private\" or \"public\")\n- BNB transfer to greenfield token amount.\n\nRequired Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"actionType\": \"createBucket\" | \"uploadObject\" | \"deleteObject\" | \"crossChainTransfer\",\n    \"bucketName\": string,\n    \"objectName\": string,\n    \"visibility\": \"private\" | \"public\",\n    \"amount\": number\n}\n\\`\\`\\`\n`;\n/**\n * Template for listing Greenfield buckets\n * \n * Extracts information about Greenfield bucket listing requests,\n * including the address to check and whether to include details.\n * Enables users to view their Greenfield buckets.\n * \n * @example\n * \"List all my buckets on Greenfield\"\n * \"Show me my Greenfield buckets\"\n */\nexport const getBucketTemplate = {\n    name: \"getBucket\",\n    description: \"Get a list of all Greenfield buckets owned by an address\",\n    inputVariables: [\"chain\"],\n    outputFormat: {\n      address: \"string\",\n      includeDetails: \"boolean\"\n    },\n    examples: [\n      {\n        input: \"List all my buckets on Greenfield\",\n        output: {\n          address: null,\n          includeDetails: true\n        }\n      },\n      {\n        input: \"Show me my Greenfield buckets\",\n        output: {\n          address: null,\n          includeDetails: true\n        }\n      },\n      {\n        input: \"What buckets do I have on the Greenfield network?\",\n        output: {\n          address: null,\n          includeDetails: true\n        }\n      },\n      {\n        input: \"List all buckets for address 0x1234567890abcdef1234567890abcdef12345678\",\n        output: {\n          address: \"0x1234567890abcdef1234567890abcdef12345678\",\n          includeDetails: true\n        }\n      }\n    ]\n  }; ","/**\n * Constants and configuration values for BNB Plugin\n */\n\n/**\n * Default RPC URLs as fallbacks\n */\nexport const API_CONFIG = {\n  DEFAULT_BSC_PROVIDER_URL: \"https://bsc-mainnet.nodereal.io/v1/64a9df0874fb4a93b9d0a3849de012d3\",\n  DEFAULT_BSC_TESTNET_PROVIDER_URL: \"https://data-seed-prebsc-2-s3.bnbchain.org:8545\",\n  DEFAULT_OPBNB_PROVIDER_URL: \"https://opbnb-mainnet-rpc.bnbchain.org\",\n  \n  // Required environment variables\n  REQUIRED_ENV_VARS: [\n    \"BNB_PRIVATE_KEY\", \n    \"BNB_PUBLIC_KEY\"\n  ],\n};\n\n/**\n * Chain IDs for supported networks\n */\nexport const CHAIN_IDS = {\n  BSC: 56,\n  BSC_TESTNET: 97,\n  OPBNB: 204,\n};\n\n/**\n * Blockchain explorer URLs\n */\nexport const EXPLORERS = {\n  BSC: {\n    name: \"BscScan\",\n    url: \"https://bscscan.com\",\n    apiUrl: \"https://api.bscscan.com/api\",\n  },\n  BSC_TESTNET: {\n    name: \"BscScan Testnet\",\n    url: \"https://testnet.bscscan.com\",\n    apiUrl: \"https://api-testnet.bscscan.com/api\",\n  },\n  OPBNB: {\n    name: \"opBNB Explorer\",\n    url: \"https://opbnb.bscscan.com\",\n    apiUrl: \"https://api-opbnb.bscscan.com/api\",\n  },\n};\n\n/**\n * Native tokens for supported chains\n */\nexport const NATIVE_TOKENS = {\n  BSC: \"BNB\",\n  BSC_TESTNET: \"tBNB\",\n  OPBNB: \"BNB\",\n};\n\n/**\n * Gas price configuration\n */\nexport const GAS_CONFIG = {\n  DEFAULT_GAS_PRICE_GWEI: 3, // 3 Gwei\n  DEFAULT_GAS_LIMIT_TRANSFER: 21000,\n  DEFAULT_GAS_LIMIT_ERC20_TRANSFER: 65000,\n  DEFAULT_GAS_LIMIT_SWAP: 350000,\n};\n\n/**\n * Standard token addresses\n */\nexport const TOKEN_ADDRESSES = {\n  BSC: {\n    BUSD: \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\",\n    USDT: \"0x55d398326f99059fF775485246999027B3197955\",\n    USDC: \"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\",\n    CAKE: \"0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\",\n  },\n  BSC_TESTNET: {\n    BUSD: \"0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee\",\n    USDT: \"0x337610d27c682E347C9cD60BD4b3b107C9d34dDd\",\n  },\n  OPBNB: {\n    USDT: \"0x9e5AAC1Ba1a2e6aEd6b32689DFcF62A509Ca96f3\",\n  },\n};\n\n/**\n * Error messages\n */\nexport const ERROR_MESSAGES = {\n  MISSING_PRIVATE_KEY: \"BNB private key is required but not provided\",\n  MISSING_WALLET: \"No wallet configured. Please provide BNB_PRIVATE_KEY or BNB_PUBLIC_KEY\",\n  INVALID_CHAIN: \"Invalid chain specified. Supported chains are: bsc, bscTestnet, opbnb\",\n  NETWORK_ERROR: \"Network error occurred while connecting to the blockchain\",\n};\n\nexport default {\n  API_CONFIG,\n  CHAIN_IDS,\n  EXPLORERS,\n  NATIVE_TOKENS,\n  GAS_CONFIG,\n  TOKEN_ADDRESSES,\n  ERROR_MESSAGES\n}; ","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport { executeRoute, getRoutes } from \"@lifi/sdk\";\nimport { parseEther } from \"viem\";\n\nimport {\n  bnbWalletProvider,\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, SwapResponse, SupportedChain } from \"../types\";\nimport { EXPLORERS } from \"../constants\";\n\nexport { swapTemplate };\n\n/**\n * SwapAction class - Handles token swaps on BNB Smart Chain\n * \n * This class implements the core functionality for swapping tokens\n * on BNB Smart Chain, leveraging the LI.FI SDK for finding the best routes.\n */\nexport class SwapAction {\n  /**\n   * Creates a new SwapAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   */\n  constructor(private walletProvider: WalletProvider) {}\n\n  /**\n   * Execute a token swap with the provided parameters\n   * \n   * @param params - Swap parameters including chain, from/to tokens, and amount\n   * @returns Swap response with transaction details\n   * @throws Error if swap fails\n   */\n  async swap(params: SwapParams): Promise<SwapResponse> {\n    logger.debug(\"Starting swap with params:\", JSON.stringify(params, null, 2));\n    \n    // Validate chain\n    this.validateAndNormalizeParams(params);\n    logger.debug(\"After validation, params:\", JSON.stringify(params, null, 2));\n\n    const fromAddress = this.walletProvider.getAddress();\n    logger.debug(`From address: ${fromAddress}`);\n    \n    const chainId = this.walletProvider.getChainConfigs(params.chain).id;\n    logger.debug(`Chain ID: ${chainId}`);\n\n    // Configure LI.FI SDK\n    logger.debug(`Configuring LI.FI SDK for chain: ${params.chain}`);\n    this.walletProvider.configureLiFiSdk(params.chain);\n\n    // Resolve token addresses if they're symbols\n    let fromTokenAddress = params.fromToken;\n    let toTokenAddress = params.toToken;\n    \n    // Handle fromToken\n    if (!params.fromToken.startsWith('0x')) {\n      try {\n        logger.debug(`Resolving from token symbol: ${params.fromToken}`);\n        fromTokenAddress = await this.walletProvider.getTokenAddress(\n          params.chain,\n          params.fromToken\n        );\n        logger.debug(`Resolved from token address: ${fromTokenAddress}`);\n        \n        // Special handling for native token\n        if (params.fromToken.toUpperCase() === 'BNB') {\n          logger.debug('Using special native token address for BNB');\n          fromTokenAddress = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\n        }\n      } catch (error) {\n        logger.error(`Error resolving from token address for ${params.fromToken}:`, error);\n        throw new Error(`Could not find token ${params.fromToken} on chain ${params.chain}. Please check the token symbol.`);\n      }\n    } else {\n      logger.debug(`Using direct from token address: ${fromTokenAddress}`);\n    }\n    \n    // Handle toToken\n    if (!params.toToken.startsWith('0x')) {\n      try {\n        logger.debug(`Resolving to token symbol: ${params.toToken}`);\n        toTokenAddress = await this.walletProvider.getTokenAddress(\n          params.chain,\n          params.toToken\n        );\n        logger.debug(`Resolved to token address: ${toTokenAddress}`);\n        \n        // Special handling for native token\n        if (params.toToken.toUpperCase() === 'BNB') {\n          logger.debug('Using special native token address for BNB');\n          toTokenAddress = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\n        }\n      } catch (error) {\n        logger.error(`Error resolving to token address for ${params.toToken}:`, error);\n        throw new Error(`Could not find token ${params.toToken} on chain ${params.chain}. Please check the token symbol.`);\n      }\n    } else {\n      logger.debug(`Using direct to token address: ${toTokenAddress}`);\n    }\n\n    const resp: SwapResponse = {\n      chain: params.chain,\n      txHash: \"0x\",\n      fromToken: params.fromToken,\n      toToken: params.toToken,\n      amount: params.amount,\n    };\n\n    logger.debug(`Getting routes from ${fromTokenAddress} to ${toTokenAddress}`);\n    \n    // Set a reasonable default slippage if not provided\n    const slippage = params.slippage || 0.05; // Default 5%\n    logger.debug(`Using slippage: ${slippage}`);\n    \n    try {\n      const routes = await getRoutes({\n        fromChainId: chainId,\n        toChainId: chainId,\n        fromTokenAddress: fromTokenAddress,\n        toTokenAddress: toTokenAddress,\n        fromAmount: parseEther(params.amount).toString(),\n        fromAddress: fromAddress,\n        options: {\n          slippage: slippage,\n          order: \"RECOMMENDED\",\n        },\n      });\n\n      logger.debug(`Found ${routes.routes.length} routes`);\n      \n      if (!routes.routes.length) {\n        throw new Error(`No routes found from ${params.fromToken} to ${params.toToken} with amount ${params.amount}`);\n      }\n\n      // Make sure routes[0] is defined before trying to execute it\n      if (!routes.routes[0]) {\n        throw new Error(\"No valid route found for swap\");\n      }\n\n      logger.debug(`Executing route: ${JSON.stringify(routes.routes[0].steps, null, 2)}`);\n      const execution = await executeRoute(routes.routes[0]);\n      \n      logger.debug(`Execution: ${JSON.stringify(execution.steps, null, 2)}`);\n      \n      const process =\n        execution.steps[0]?.execution?.process[\n          execution.steps[0]?.execution?.process.length - 1\n        ];\n\n      if (!process?.status || process.status === \"FAILED\") {\n        throw new Error(`Transaction failed: ${process?.status || 'unknown error'}`);\n      }\n\n      resp.txHash = process.txHash as `0x${string}`;\n      logger.debug(`Swap successful with tx hash: ${resp.txHash}`);\n      \n      return resp;\n    } catch (error: unknown) {\n      logger.error(\"Error during swap execution:\", error);\n      \n      // Try to provide more specific error messages\n      const errorObj = error as Error;\n      const errorMessage = errorObj.message || String(error);\n      \n      if (errorMessage.includes(\"insufficient funds\")) {\n        logger.debug(\"Insufficient funds for swap\");\n        throw new Error(`Insufficient funds for swapping ${params.amount} ${params.fromToken}. Please check your balance.`);\n      }\n      \n      if (errorMessage.includes(\"Cannot read properties\")) {\n        logger.error(\"SDK response parsing error\");\n        throw new Error(\"Error processing swap response. This might be due to rate limits or invalid token parameters.\");\n      }\n      \n      // Re-throw the error\n      throw error;\n    }\n  }\n\n  /**\n   * Validates and normalizes swap parameters\n   * \n   * @param params - The parameters to validate and normalize\n   * @throws Error if parameters are invalid\n   */\n  validateAndNormalizeParams(params: SwapParams): void {\n    logger.debug(`Validating swap params: chain=${params.chain}, from=${params.fromToken}, to=${params.toToken}, amount=${params.amount}`);\n    \n    // Validate chain\n    if (!params.chain) {\n      logger.debug(\"No chain specified, defaulting to bsc\");\n      params.chain = \"bsc\";\n    } else if (params.chain !== \"bsc\") {\n      logger.error(`Unsupported chain: ${params.chain}`);\n      throw new Error(\"Only BSC mainnet is supported for swaps\");\n    }\n    \n    // Validate token inputs\n    if (!params.fromToken) {\n      logger.error(\"From token not specified\");\n      throw new Error(\"From token is required for swap\");\n    }\n    \n    if (!params.toToken) {\n      logger.error(\"To token not specified\");\n      throw new Error(\"To token is required for swap\");\n    }\n    \n    // Prevent swapping to the same token\n    if (params.fromToken === params.toToken) {\n      logger.error(`Cannot swap from and to the same token: ${params.fromToken}`);\n      throw new Error(`Cannot swap from and to the same token: ${params.fromToken}`);\n    }\n    \n    // Validate amount\n    if (!params.amount) {\n      logger.error(\"Amount not specified\");\n      throw new Error(\"Amount is required for swap\");\n    }\n    \n    try {\n      const amountBigInt = parseEther(params.amount);\n      if (amountBigInt <= 0n) {\n        logger.error(`Invalid amount: ${params.amount} (must be greater than 0)`);\n        throw new Error(\"Swap amount must be greater than 0\");\n      }\n      logger.debug(`Amount parsed: ${amountBigInt.toString()} wei`);\n    } catch (error) {\n      logger.error(`Failed to parse amount: ${params.amount}`, error);\n      throw new Error(`Invalid swap amount: ${params.amount}. Please provide a valid number.`);\n    }\n    \n    // Validate slippage\n    if (params.slippage !== undefined) {\n      if (typeof params.slippage !== 'number') {\n        logger.error(`Invalid slippage type: ${typeof params.slippage}`);\n        throw new Error(\"Slippage must be a number\");\n      }\n      \n      if (params.slippage <= 0 || params.slippage > 1) {\n        logger.error(`Invalid slippage value: ${params.slippage} (must be between 0 and 1)`);\n        throw new Error(\"Slippage must be between 0 and 1 (e.g., 0.05 for 5%)\");\n      }\n    } else {\n      // Set default slippage\n      params.slippage = 0.05;\n      logger.debug(`Using default slippage: ${params.slippage}`);\n    }\n  }\n}\n\n/**\n * Action for swapping tokens on BNB Smart Chain networks\n * \n * This action handles swapping tokens on BSC, finding the best route using the LI.FI SDK\n * and executing the swap transaction.\n */\nexport const swapAction: Action = {\n  name: \"SWAP_BNB\",\n  similes: [\"TOKEN_SWAP_BNB\", \"EXCHANGE_TOKENS_BNB\", \"TRADE_TOKENS_BNB\"],\n  description: \"Swap tokens on BNB Smart Chain (BSC) using the best available routes\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing SWAP_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n    // Extract prompt text for token detection\n    const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n    logger.debug(`Raw prompt text: \"${promptText}\"`);\n    \n    // Analyze prompt to detect tokens directly\n    const promptLower = promptText.toLowerCase();\n    \n    // Look for swap patterns in the prompt\n    const basicSwapRegex = /swap\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)\\s+(?:for|to)\\s+([a-zA-Z0-9]+)/i;\n    const advancedSwapRegex = /(?:swap|exchange|trade|convert)\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)\\s+(?:for|to|into)\\s+([a-zA-Z0-9]+)/i;\n    \n    let directFromToken: string | null = null;\n    let directToToken: string | null = null;\n    let directAmount: string | null = null;\n    \n    // Try to match the swap pattern\n    const match = promptText.match(basicSwapRegex) || promptText.match(advancedSwapRegex);\n    if (match && match.length >= 4) {\n      // Using non-null assertion (!) as we've already checked match exists and has sufficient length\n      directAmount = match[1] || null;\n      directFromToken = match[2] ? match[2].toUpperCase() : null;\n      directToToken = match[3] ? match[3].toUpperCase() : null;\n      logger.debug(`Directly extracted from prompt - Amount: ${directAmount}, From: ${directFromToken}, To: ${directToToken}`);\n    }\n    \n    // Check for common token mentions\n    const tokenMentions: Record<string, boolean> = {};\n    const commonTokens = ['USDT', 'USDC', 'BNB', 'ETH', 'BTC', 'BUSD', 'DAI', 'WETC', 'WBNB', 'TRON', 'LINK', 'OM', 'UNI', 'PEPE', 'AAVE', 'ATOM'];\n    \n    for (const token of commonTokens) {\n      // Check for case-insensitive mention, but as whole word\n      const regex = new RegExp(`\\\\b${token}\\\\b`, 'i');\n      if (regex.test(promptText)) {\n        tokenMentions[token] = true;\n        logger.debug(`Detected token in prompt: ${token}`);\n      }\n    }\n    \n    // Store prompt analysis results\n    const promptAnalysis = {\n      directFromToken,\n      directToToken,\n      directAmount,\n      tokenMentions\n    };\n    \n    logger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n    \n    try {\n      // Only create walletInfo if state exists\n      if (state) {\n        state.walletInfo = await bnbWalletProvider.get(\n          runtime,\n          message,\n          currentState\n        );\n        logger.debug(\"Wallet info:\", state.walletInfo);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Error getting wallet info:\", errorMessage);\n    }\n\n    // Use runtime model to get swap parameters\n    const swapPrompt = {\n      template: swapTemplate,\n      state: currentState\n    };\n\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(swapPrompt),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Parse the JSON output\n    let content: Record<string, unknown> = {};\n    try {\n      content = typeof mlOutput === 'string' ? JSON.parse(mlOutput) : mlOutput as Record<string, unknown>;\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", mlOutput);\n    }\n    \n    logger.debug(\"Generated swap content:\", JSON.stringify(content, null, 2));\n    \n    // Validate and normalize chain\n    const chainValue = content.chain;\n    const chain = typeof chainValue === 'string' ? chainValue.toLowerCase() : \"bsc\";\n    logger.debug(`Chain parameter: ${chain}`);\n\n    // PRIORITY ORDER FOR TOKEN DETERMINATION:\n    // 1. Direct match from prompt text (most reliable)\n    // 2. Tokens specified in model-generated content\n    // 3. Fallback based on token mentions\n    \n    // Determine input token (from token)\n    let fromToken: string;\n    if (directFromToken) {\n      fromToken = directFromToken;\n      logger.debug(`Using from token directly extracted from prompt: ${fromToken}`);\n    } else if (content.inputToken && typeof content.inputToken === 'string') {\n      fromToken = content.inputToken;\n      logger.debug(`Using from token from generated content: ${fromToken}`);\n    } else if (tokenMentions?.BNB) {\n      fromToken = 'BNB';\n      logger.debug(\"Defaulting to BNB as from token based on mention\");\n    } else {\n      fromToken = 'BNB'; // Default\n      logger.debug(\"No from token detected, defaulting to BNB\");\n    }\n    \n    // Determine output token (to token)\n    let toToken = 'USDC'; // Default initialization\n    if (directToToken) {\n      toToken = directToToken;\n      logger.debug(`Using to token directly extracted from prompt: ${toToken}`);\n    } else if (content.outputToken && typeof content.outputToken === 'string') {\n      toToken = content.outputToken;\n      logger.debug(`Using to token from generated content: ${toToken}`);\n    } else {\n      // Select a token different from fromToken\n      let tokenFound = false;\n      for (const token of ['USDC', 'USDT', 'BUSD']) {\n        if (token !== fromToken && tokenMentions?.[token]) {\n          toToken = token;\n          logger.debug(`Using ${token} as to token based on mention`);\n          tokenFound = true;\n          break;\n        }\n      }\n      \n      if (!tokenFound) {\n        toToken = fromToken === 'BNB' ? 'USDC' : 'BNB';\n        logger.debug(`No to token detected, defaulting to ${toToken}`);\n      }\n    }\n    \n    // Determine amount\n    let amount: string;\n    if (directAmount) {\n      amount = directAmount;\n      logger.debug(`Using amount directly extracted from prompt: ${amount}`);\n    } else if (content.amount && \n      (typeof content.amount === 'string' || typeof content.amount === 'number')) {\n      amount = String(content.amount);\n      logger.debug(`Using amount from generated content: ${amount}`);\n    } else {\n      amount = \"0.001\"; // Default small amount\n      logger.debug(`No amount detected, defaulting to ${amount}`);\n    }\n    \n    // Validate slippage\n    let slippage = content.slippage as number | undefined;\n    if (typeof slippage !== 'number' || slippage <= 0 || slippage > 1) {\n      slippage = 0.05; // Default 5%\n      logger.debug(`Invalid or missing slippage, using default: ${slippage}`);\n    } else {\n      logger.debug(`Using slippage from content: ${slippage}`);\n    }\n\n    const walletProvider = initWalletProvider(runtime);\n    const action = new SwapAction(walletProvider);\n    const swapOptions: SwapParams = {\n      chain: chain as SupportedChain,\n      fromToken: fromToken,\n      toToken: toToken,\n      amount: amount,\n      slippage: slippage,\n    };\n    \n    logger.debug(\"Final swap options:\", JSON.stringify(swapOptions, null, 2));\n    \n    try {\n      logger.debug(\"Calling swap with params:\", JSON.stringify(swapOptions, null, 2));\n      const swapResp = await action.swap(swapOptions);\n      \n      // Get block explorer URLs\n      const explorerInfo = swapOptions.chain === 'bsctestnet' as SupportedChain ? EXPLORERS.BSC_TESTNET : \n                          swapOptions.chain === 'opbnb' as SupportedChain ? EXPLORERS.OPBNB : EXPLORERS.BSC;\n      \n      const txExplorerUrl = `${explorerInfo.url}/tx/${swapResp.txHash}`;\n      const walletAddress = walletProvider.getAddress();\n      const walletExplorerUrl = `${explorerInfo.url}/address/${walletAddress}`;\n      \n      logger.debug(`Transaction explorer URL: ${txExplorerUrl}`);\n      logger.debug(`Wallet explorer URL: ${walletExplorerUrl}`);\n      \n      // Get gas information if available from the executed route\n      let gasPrice = \"Unknown\";\n      let gasLimit = \"Unknown\";\n      let gasCostBNB = \"Unknown\";\n      let gasCostUSD = \"Unknown\";\n      \n      try {\n        // This information might not always be available depending on the execution response\n        const gasCosts = swapResp.executionDetails?.gasCosts;\n        if (gasCosts && gasCosts.length > 0) {\n          const gasDetails = gasCosts[0];\n          if (gasDetails) {\n            gasPrice = gasDetails.price ? `${Number(gasDetails.price) / 1e9} Gwei` : \"Unknown\";\n            gasLimit = gasDetails.limit || \"Unknown\";\n            gasCostBNB = gasDetails.amount ? `${Number(gasDetails.amount) / 1e18} BNB` : \"Unknown\";\n            gasCostUSD = gasDetails.amountUSD || \"Unknown\";\n            \n            logger.debug(`Gas details found - Price: ${gasPrice}, Limit: ${gasLimit}, Cost: ${gasCostBNB} BNB (${gasCostUSD} USD)`);\n          } else {\n            logger.debug(\"Gas details array exists but first entry is undefined\");\n          }\n        } else {\n          logger.debug(\"No detailed gas information available in swap response\");\n        }\n      } catch (error) {\n        logger.debug(\"Error extracting gas details:\", error instanceof Error ? error.message : String(error));\n      }\n      \n      callback?.({\n        text: `Successfully swapped ${swapResp.amount} ${swapResp.fromToken} to ${swapResp.toToken}\nTransaction Hash: ${swapResp.txHash}\nView transaction: ${txExplorerUrl}\nView wallet: ${walletExplorerUrl}\n${gasPrice !== \"Unknown\" ? `\\nGas used: ${gasPrice} (limit: ${gasLimit})` : \"\"}\n${gasCostBNB !== \"Unknown\" ? `Gas cost: ${gasCostBNB} (${gasCostUSD} USD)` : \"\"}`,\n        content: { \n          ...swapResp,\n          txExplorerUrl,\n          walletExplorerUrl,\n          gasDetails: {\n            gasPrice,\n            gasLimit,\n            gasCostBNB,\n            gasCostUSD\n          }\n        },\n      });\n      return true;\n    } catch (error: unknown) {\n      const errorObj = error as Error;\n      logger.error(\"Error during swap:\", errorObj.message || String(error));\n      \n      // Log the entire error object for diagnosis\n      try {\n        logger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n      } catch (e) {\n        logger.error(\"Error object not serializable, logging properties individually:\");\n        if (errorObj && typeof errorObj === 'object') {\n          // Convert to unknown first, then to a safer type for indexing\n          const errorAsRecord = Object.entries(errorObj as unknown as Record<string, unknown>)\n            .reduce((acc, [key, value]) => {\n              acc[key] = value;\n              return acc;\n            }, {} as Record<string, unknown>);\n            \n          for (const [key, value] of Object.entries(errorAsRecord)) {\n            try {\n              logger.error(`${key}:`, value);\n            } catch (e) {\n              logger.error(`${key}: [Error serializing property]`);\n            }\n          }\n        }\n      }\n      \n      // Provide more user-friendly error messages\n      let errorMessage = errorObj.message || String(error);\n      \n      if (typeof errorMessage === 'string') {\n        if (errorMessage.includes(\"No routes found\")) {\n          errorMessage = `No swap route found from ${swapOptions.fromToken} to ${swapOptions.toToken}. Please check that both tokens exist and have liquidity.`;\n        } else if (errorMessage.includes(\"insufficient funds\")) {\n          errorMessage = \"Insufficient funds for the swap. Please check your balance and try with a smaller amount.\";\n        } else if (errorMessage.includes(\"high slippage\")) {\n          errorMessage = \"Swap failed due to high price impact. Try reducing the amount or using a different token pair.\";\n        }\n      }\n      \n      callback?.({\n        text: `Swap failed: ${errorMessage}`,\n        content: { \n          error: errorMessage,\n          fromToken: swapOptions.fromToken,\n          toToken: swapOptions.toToken\n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Swap 0.001 BNB for USDC on BSC\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you swap 0.001 BNB for USDC on BSC\",\n          actions: [\"SWAP_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Buy some token of 0x1234 using 0.001 USDC on BSC. The slippage should be no more than 5%\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you swap 0.001 USDC for token 0x1234 on BSC\",\n          actions: [\"SWAP_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}; ","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport {\n  formatEther,\n  formatUnits,\n  parseEther,\n  parseUnits,\n  erc20Abi,\n  type Hex,\n} from \"viem\";\n\nimport {\n  bnbWalletProvider,\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { transferTemplate } from \"../templates\";\nimport type { TransferParams, TransferResponse, SupportedChain } from \"../types\";\nimport { EXPLORERS } from \"../constants\";\n\nexport { transferTemplate };\n\n/**\n * TransferAction class - Handles token transfers on BNB Smart Chain\n * \n * This class implements the core functionality for transferring tokens\n * on BNB Smart Chain networks, handling both native BNB and ERC20 token transfers.\n */\nexport class TransferAction {\n  private readonly TRANSFER_GAS = 21000n;\n  private readonly DEFAULT_GAS_PRICE = 3000000000n; // 3 Gwei\n\n  /**\n   * Creates a new TransferAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   */\n  constructor(private walletProvider: WalletProvider) {}\n\n  /**\n   * Execute a token transfer with the provided parameters\n   * \n   * @param params - Transfer parameters including chain, token, amount, and recipient\n   * @returns Transfer response with transaction details\n   * @throws Error if transfer fails\n   */\n  async transfer(params: TransferParams): Promise<TransferResponse> {\n    logger.debug(\"Starting transfer with params:\", JSON.stringify(params, null, 2));\n    \n    // Debug the chain validation\n    logger.debug(`Chain before validation: ${params.chain}`);\n    logger.debug(\"Available chains:\", Object.keys(this.walletProvider.chains));\n    \n    // Check if the chain is supported\n    if (!this.walletProvider.chains[params.chain]) {\n      logger.error(`Chain '${params.chain}' is not supported. Available chains: ${Object.keys(this.walletProvider.chains).join(', ')}`);\n      throw new Error(`Chain '${params.chain}' is not supported. Please use one of: ${Object.keys(this.walletProvider.chains).join(', ')}`);\n    }\n    \n    // Handle data parameter - make sure it's not a string \"null\"\n    // This must happen before validation to avoid type errors\n    let dataParam: Hex | undefined = undefined;\n    if (params.data && typeof params.data === 'string' && params.data.startsWith('0x')) {\n      dataParam = params.data as Hex;\n      logger.debug(`Using data parameter: ${dataParam}`);\n    } else if (params.data) {\n      logger.debug(`Ignoring invalid data parameter: ${params.data}`);\n    }\n    \n    logger.debug(\"About to validate and normalize params\");\n    await this.validateAndNormalizeParams(params);\n    logger.debug(\"After address validation, params:\", JSON.stringify(params, null, 2));\n\n    const fromAddress = this.walletProvider.getAddress();\n    logger.debug(`From address: ${fromAddress}`);\n\n    logger.debug(`Switching to chain: ${params.chain}`);\n    this.walletProvider.switchChain(params.chain);\n\n    const nativeToken = this.walletProvider.chains[params.chain]?.nativeCurrency?.symbol || \"BNB\";\n    logger.debug(`Native token for chain ${params.chain}: ${nativeToken}`);\n\n    // CRITICAL: Ensure token is never null before proceeding\n    if (!params.token) {\n      params.token = nativeToken;\n      logger.debug(`Setting null token to native token: ${nativeToken}`);\n    } else if (params.token.toLowerCase() === nativeToken.toLowerCase()) {\n      // Standardize the token case if it matches the native token\n      params.token = nativeToken;\n      logger.debug(`Standardized token case to match native token: ${nativeToken}`);\n    }\n    \n    logger.debug(`Final transfer token: ${params.token}`);\n\n    const resp: TransferResponse = {\n      chain: params.chain,\n      txHash: \"0x\",\n      recipient: params.toAddress,\n      amount: \"\",\n      token: params.token,\n    };\n\n    // Log current wallet balance before attempting transfer\n    try {\n      const publicClient = this.walletProvider.getPublicClient(params.chain);\n      const balance = await publicClient.getBalance({\n        address: fromAddress,\n      });\n      logger.debug(`Current wallet balance: ${formatEther(balance)} ${nativeToken}`);\n    } catch (error) {\n      logger.error(\"Failed to get wallet balance:\", error instanceof Error ? error.message : String(error));\n    }\n\n    if (!params.token || params.token === \"null\" || params.token === nativeToken) {\n      logger.debug(\"Entering native token transfer branch:\", nativeToken);\n      // Native token transfer\n      const options: { gas?: bigint; gasPrice?: bigint; data?: Hex } = {\n        data: dataParam,\n      };\n      let value: bigint;\n      if (!params.amount) {\n        // Transfer all balance minus gas\n        logger.debug(\"No amount specified, transferring all balance minus gas\");\n        const publicClient = this.walletProvider.getPublicClient(\n          params.chain\n        );\n        const balance = await publicClient.getBalance({\n          address: fromAddress,\n        });\n        logger.debug(`Wallet balance for transfer: ${formatEther(balance)} ${nativeToken}`);\n\n        value = balance - this.DEFAULT_GAS_PRICE * 21000n;\n        logger.debug(`Calculated transfer amount: ${formatEther(value)} ${nativeToken} (balance minus gas)`);\n        options.gas = this.TRANSFER_GAS;\n        options.gasPrice = this.DEFAULT_GAS_PRICE;\n        logger.debug(`Set gas options - gas: ${options.gas}, gasPrice: ${options.gasPrice}`);\n      } else {\n        logger.debug(`Using specified amount: ${params.amount} ${nativeToken}`);\n        try {\n          value = parseEther(params.amount);\n          logger.debug(`Parsed amount to wei: ${value}`);\n        } catch (error) {\n          logger.error(`Error parsing amount \"${params.amount}\":`, error instanceof Error ? error.message : String(error));\n          throw new Error(`Invalid amount format: ${params.amount}. Please provide a valid number.`);\n        }\n      }\n\n      resp.amount = formatEther(value);\n      logger.debug(`About to execute native token transfer: ${resp.amount} ${nativeToken} to ${params.toAddress}`);\n      \n      try {\n        resp.txHash = await this.walletProvider.transfer(\n          params.chain,\n          params.toAddress,\n          value,\n          options\n        );\n        logger.debug(`Native token transfer successful, txHash: ${resp.txHash}`);\n      } catch (error) {\n        logger.error(\"Native token transfer failed:\", error instanceof Error ? error.message : String(error));\n        throw error;\n      }\n    } else {\n      // ERC20 token transfer\n      logger.debug(\"Entering ERC20 token transfer branch for token:\", params.token);\n      let tokenAddress = params.token;\n      logger.debug(`Token before address resolution: ${params.token}`);\n      \n      // Special case: If token is BNB (the native token), handle it separately\n      // This avoids the LI.FI lookup which fails with null token\n      if (params.token === \"BNB\" || params.token === \"bnb\") {\n        logger.debug(\"Detected native token (BNB) passed to ERC20 handling branch - switching to native token handling\");\n        \n        // Update response token to make sure it's consistent\n        resp.token = nativeToken;\n        \n        // Switch to native token transfer\n        const options: { gas?: bigint; gasPrice?: bigint; data?: Hex } = {\n          data: dataParam,\n        };\n        let value: bigint;\n        if (!params.amount) {\n          // Transfer all balance minus gas\n          logger.debug(\"No amount specified for BNB, transferring all balance minus gas\");\n          const publicClient = this.walletProvider.getPublicClient(\n            params.chain\n          );\n          const balance = await publicClient.getBalance({\n            address: fromAddress,\n          });\n          logger.debug(`Wallet balance for BNB transfer: ${formatEther(balance)} ${nativeToken}`);\n\n          value = balance - this.DEFAULT_GAS_PRICE * 21000n;\n          logger.debug(`Calculated BNB transfer amount: ${formatEther(value)} (balance minus gas)`);\n          options.gas = this.TRANSFER_GAS;\n          options.gasPrice = this.DEFAULT_GAS_PRICE;\n        } else {\n          logger.debug(`Using specified amount for BNB transfer: ${params.amount}`);\n          try {\n            value = parseEther(params.amount);\n            logger.debug(`Parsed BNB amount to wei: ${value}`);\n          } catch (error) {\n            logger.error(`Error parsing BNB amount \"${params.amount}\":`, error instanceof Error ? error.message : String(error));\n            throw new Error(`Invalid amount format: ${params.amount}. Please provide a valid number.`);\n          }\n        }\n\n        resp.amount = formatEther(value);\n        logger.debug(`About to execute BNB transfer: ${resp.amount} BNB to ${params.toAddress}`);\n        \n        try {\n          resp.txHash = await this.walletProvider.transfer(\n            params.chain,\n            params.toAddress,\n            value,\n            options\n          );\n          logger.debug(`BNB transfer successful, txHash: ${resp.txHash}`);\n        } catch (error) {\n          logger.error(\"BNB transfer failed:\", error instanceof Error ? error.message : String(error));\n          throw error;\n        }\n        \n        // Skip remaining ERC20 handling\n        logger.debug(\"Native BNB transfer completed via transfer branch\");\n        return resp; // Return early to skip the rest of the ERC20 handling\n      }\n      \n      if (!params.token.startsWith(\"0x\")) {\n        try {\n          logger.debug(`Attempting to resolve token symbol: ${params.token} on chain ${params.chain}`);\n          // Configure the LI.FI SDK for token lookup\n          logger.debug(\"Configuring LI.FI SDK for token lookup\");\n          this.walletProvider.configureLiFiSdk(params.chain);\n          \n          logger.debug(`Calling getTokenAddress for token symbol: ${params.token}`);\n          tokenAddress = await this.walletProvider.getTokenAddress(\n            params.chain,\n            params.token\n          );\n          \n          logger.debug(`Resolved token address: ${tokenAddress} for ${params.token}`);\n          \n          // If token address doesn't start with 0x after resolution, it might have failed\n          if (!tokenAddress || !tokenAddress.startsWith(\"0x\")) {\n            logger.error(`Failed to resolve token to proper address: ${tokenAddress}`);\n            throw new Error(`Could not resolve token symbol ${params.token} to a valid address`);\n          }\n        } catch (error: unknown) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          logger.error(`Error resolving token address for ${params.token}:`, error);\n          throw new Error(`Could not find token ${params.token} on chain ${params.chain}. Please check the token symbol or use the contract address.`);\n        }\n      } else {\n        logger.debug(`Using token address directly: ${tokenAddress}`);\n      }\n      \n      logger.debug(`Final token address for ERC20 transfer: ${tokenAddress}`);\n\n      const publicClient = this.walletProvider.getPublicClient(\n        params.chain\n      );\n      \n      logger.debug(`Getting token decimals for ${tokenAddress}`);\n      let decimals: number;\n      try {\n        decimals = await publicClient.readContract({\n          address: tokenAddress as `0x${string}`,\n          abi: erc20Abi,\n          functionName: \"decimals\",\n        });\n        logger.debug(`Token decimals: ${decimals}`);\n      } catch (error) {\n        logger.error(\"Failed to get token decimals:\", error instanceof Error ? error.message : String(error));\n        throw new Error(`Failed to get decimals for token at address ${tokenAddress}. The contract might not be an ERC20 token.`);\n      }\n\n      let value: bigint;\n      if (!params.amount) {\n        logger.debug(\"No amount specified, checking token balance\");\n        try {\n          value = await publicClient.readContract({\n            address: tokenAddress as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"balanceOf\",\n            args: [fromAddress],\n          });\n          logger.debug(`Token balance: ${formatUnits(value, decimals)} ${params.token}`);\n        } catch (error) {\n          logger.error(\"Failed to get token balance:\", error instanceof Error ? error.message : String(error));\n          throw new Error(`Failed to get balance for token at address ${tokenAddress}. The contract might not be an ERC20 token.`);\n        }\n      } else {\n        logger.debug(`Using specified amount for token transfer: ${params.amount}`);\n        try {\n          value = parseUnits(params.amount, decimals);\n          logger.debug(`Parsed token amount: ${value} (${formatUnits(value, decimals)} in decimals)`);\n        } catch (error) {\n          logger.error(`Error parsing token amount \"${params.amount}\":`, error instanceof Error ? error.message : String(error));\n          throw new Error(`Invalid amount format: ${params.amount}. Please provide a valid number.`);\n        }\n      }\n\n      resp.amount = formatUnits(value, decimals);\n      logger.debug(`About to execute ERC20 transfer: ${resp.amount} ${params.token} to ${params.toAddress}`);\n      \n      try {\n        resp.txHash = await this.walletProvider.transferERC20(\n          params.chain,\n          tokenAddress as `0x${string}`,\n          params.toAddress,\n          value\n        );\n        logger.debug(`ERC20 transfer successful, txHash: ${resp.txHash}`);\n      } catch (error) {\n        logger.error(\"ERC20 transfer failed:\", error instanceof Error ? error.message : String(error));\n        throw error;\n      }\n    }\n\n    if (!resp.txHash || resp.txHash === \"0x\") {\n      logger.error(\"Transaction hash is empty or null\");\n      throw new Error(\"Get transaction hash failed\");\n    }\n\n    // wait for the transaction to be confirmed\n    logger.debug(`Waiting for transaction confirmation: ${resp.txHash}`);\n    const publicClient = this.walletProvider.getPublicClient(params.chain);\n    try {\n      const receipt = await publicClient.waitForTransactionReceipt({\n        hash: resp.txHash,\n      });\n      logger.debug(`Transaction confirmed, status: ${receipt.status}, block: ${receipt.blockNumber}`);\n    } catch (error) {\n      logger.error(\"Error waiting for transaction confirmation:\", error instanceof Error ? error.message : String(error));\n      // Still return response even if we couldn't wait for confirmation\n      logger.debug(\"Returning transfer response despite confirmation error\");\n    }\n\n    return resp;\n  }\n\n  /**\n   * Validates and normalizes transfer parameters\n   * \n   * @param params - The parameters to validate and normalize\n   * @throws Error if parameters are invalid\n   */\n  async validateAndNormalizeParams(params: TransferParams): Promise<void> {\n    logger.debug(\"Starting parameter validation and normalization\");\n    \n    if (!params.toAddress) {\n      logger.error(\"No toAddress provided in params\");\n      throw new Error(\"To address is required\");\n    }\n    \n    logger.debug(`Formatting address: ${params.toAddress}`);\n    try {\n      params.toAddress = await this.walletProvider.formatAddress(\n        params.toAddress\n      );\n      logger.debug(`Address formatted successfully: ${params.toAddress}`);\n    } catch (error) {\n      logger.error(\"Error formatting address:\", error instanceof Error ? error.message : String(error));\n      throw new Error(`Invalid address format: ${params.toAddress}`);\n    }\n\n    // Proper type handling for data field\n    if (params.data !== undefined) {\n      // Store the original value to check for \"null\" string\n      const dataValue = params.data as unknown as string;\n      logger.debug(`Processing data field, original value: ${dataValue}`);\n      \n      // Check if it's the \"null\" string\n      if (dataValue === \"null\") {\n        logger.debug('Data field is \"null\" string, converting to \"0x\"');\n        params.data = \"0x\" as `0x${string}`;\n      } else if (dataValue !== \"0x\" && !dataValue.startsWith(\"0x\")) {\n        // If it's not already \"0x\" prefix, add it\n        logger.debug(`Adding \"0x\" prefix to data: ${dataValue}`);\n        try {\n          params.data = `0x${dataValue}` as `0x${string}`;\n        } catch (error) {\n          logger.error(`Error formatting data field: ${error instanceof Error ? error.message : String(error)}`);\n          // Default to \"0x\" if we can't format it\n          params.data = \"0x\" as `0x${string}`;\n        }\n      } else {\n        logger.debug(`Using data as-is: ${dataValue}`);\n      }\n    } else {\n      logger.debug(\"No data field provided in params\");\n      // Ensure data field is at least defined with a default value\n      params.data = \"0x\" as `0x${string}`;\n    }\n    \n    logger.debug(\"Final data field:\", params.data);\n    logger.debug(\"Parameter validation and normalization completed successfully\");\n  }\n}\n\n/**\n * Action for transferring tokens on BNB Smart Chain networks\n * \n * This action handles transfers of BNB and ERC20 tokens on BSC and opBNB networks.\n */\nexport const transferAction: Action = {\n  name: \"TRANSFER_BNB\",\n  similes: [\"SEND_TOKENS_BNB\", \"TOKEN_TRANSFER_BNB\", \"MOVE_TOKENS_BNB\", \"PAY_BNB\"],\n  description: \"Transfers native BNB or ERC20 tokens on BNB Smart Chain (BSC) or opBNB networks\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing TRANSFER_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n    logger.debug(\"Message source:\", message.content.source);\n\n    // Extract prompt text if available to help with token detection\n    const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n    logger.debug(`Raw prompt text: \"${promptText}\"`);\n    \n    // Pre-analyze the prompt for token indicators - more aggressive token detection\n    const promptLower = promptText.toLowerCase();\n    \n    // Direct BNB token detection - look for explicit mentions of BNB\n    const containsBnb = promptLower.includes('bnb') || \n                        promptLower.includes('binance coin') || \n                        promptLower.includes('binance smart chain');\n    \n    // Direct token detection from prompt format like \"Transfer 0.0001 BNB to 0x123...\"\n    let directTokenMatch: string | null = null;\n    const transferRegex = /transfer\\s+([0-9.]+)\\s+([a-zA-Z0-9]+)\\s+to\\s+(0x[a-fA-F0-9]{40})/i;\n    const match = promptText.match(transferRegex);\n    \n    if (match && match.length >= 3 && match[2]) {\n      const amount = match[1];\n      const tokenSymbol = match[2];\n      const toAddress = match[3];\n      directTokenMatch = tokenSymbol.toUpperCase();\n      logger.debug(`Directly extracted from prompt - Amount: ${amount}, Token: ${directTokenMatch}, To: ${toAddress}`);\n    }\n    \n    if (containsBnb) {\n      logger.debug(`BNB transfer detected in prompt text: \"${promptText}\"`);\n    }\n    \n    // Store this information for later use\n    const promptAnalysis = {\n      containsBnb,\n      directTokenMatch\n    };\n    \n    logger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n    // Validate transfer - IMPORTANT: Check for both \"direct\" and \"client_chat:user\" as valid sources\n    logger.debug(\"Validating message source:\", message.content.source);\n    if (!(message.content.source === \"direct\" || message.content.source === \"client_chat:user\")) {\n      logger.warn(\"Transfer rejected: invalid source:\", message.content.source);\n      callback?.({\n        text: \"I can't do that for you.\",\n        content: { error: \"Transfer not allowed\" },\n      });\n      return false;\n    }\n    logger.debug(\"Source validation passed\");\n\n    // Initialize or update state\n    logger.debug(\"Initializing state\");\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n    \n    try {\n      // Only create walletInfo if state exists\n      if (state) {\n        logger.debug(\"Getting wallet info from provider\");\n        state.walletInfo = await bnbWalletProvider.get(\n          runtime,\n          message,\n          currentState\n        );\n        logger.debug(\"Wallet info retrieved:\", state.walletInfo);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Error getting wallet info:\", errorMessage);\n    }\n\n    // Log available settings\n    logger.debug(\"Available runtime settings:\");\n    const bscProviderUrl = runtime.getSetting(\"BSC_PROVIDER_URL\");\n    const bscTestnetProviderUrl = runtime.getSetting(\"BSC_TESTNET_PROVIDER_URL\");\n    const bnbPrivateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    logger.debug(`BSC_PROVIDER_URL: ${bscProviderUrl ? \"set\" : \"not set\"}`);\n    logger.debug(`BSC_TESTNET_PROVIDER_URL: ${bscTestnetProviderUrl ? \"set\" : \"not set\"}`);\n    logger.debug(`BNB_PRIVATE_KEY: ${bnbPrivateKey ? `set (starts with ${bnbPrivateKey.substring(0, 6)}...)` : \"not set\"}`);\n\n    // Generate transfer content - manually extract from runtime model output\n    logger.debug(\"Creating transfer prompt\");\n    const transferPrompt = {\n      template: transferTemplate,\n      state: currentState\n    };\n\n    // Log what we're sending to the model\n    logger.debug(\"Template data sent to model:\", JSON.stringify(transferPrompt, null, 2));\n\n    // Use runtime model to get transfer parameters\n    logger.debug(\"Calling useModel to generate transfer parameters\");\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(transferPrompt),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Log the raw model output for debugging\n    logger.debug(\"Raw model output:\", mlOutput);\n    \n    // Parse the JSON output\n    let content: Record<string, unknown> = {};\n    try {\n      // Extract JSON if the model returned markdown-formatted JSON\n      let jsonStr = mlOutput;\n      if (typeof mlOutput === 'string') {\n        // Check if the output is wrapped in markdown code blocks\n        const jsonRegex = /```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/;\n        const match = mlOutput.match(jsonRegex);\n        \n        if (match?.[1]) {\n          // Extract the JSON string from markdown code block\n          jsonStr = match[1];\n          logger.debug(\"Extracted JSON from markdown:\", jsonStr);\n        }\n        \n        // Now parse the JSON\n        content = JSON.parse(jsonStr);\n      } else {\n        // If it's already an object, use it directly\n        content = mlOutput as Record<string, unknown>;\n      }\n      logger.debug(\"Successfully parsed model output\");\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", error instanceof Error ? error.message : String(error));\n      logger.error(\"Raw output that failed parsing:\", mlOutput);\n      \n      // Use direct extraction from the prompt as a fallback\n      logger.debug(\"Using direct extraction from prompt as fallback\");\n      content = {};\n      \n      // Set content values directly from prompt analysis if available\n      if (match) {\n        content.amount = match[1] || \"\"; // Amount\n        content.token = match[2] || \"BNB\"; // Token\n        content.toAddress = match[3] || \"\"; // Address\n        logger.debug(\"Set content from regex extraction:\", content);\n      }\n    }\n    \n    logger.debug(\"Generated transfer content:\", JSON.stringify(content, null, 2));\n    \n    // Normalize chain from content\n    const chainValue = content.chain;\n    const chain = typeof chainValue === 'string' ? chainValue.toLowerCase() : \"bsc\";\n    logger.debug(`Chain parameter: ${chain}`);\n    \n    // Check if content has a token field\n    const tokenValue = content.token;\n    let token: string;\n    \n    // 1. First priority: Use directly extracted token from prompt if available\n    if (directTokenMatch) {\n      token = directTokenMatch;\n      logger.debug(`Using token directly extracted from prompt: ${token}`);\n    }\n    // 2. Second priority: Use token from content if available\n    else if (tokenValue && typeof tokenValue === 'string') {\n      token = tokenValue;\n      logger.debug(`Using token from generated content: ${token}`);\n    }\n    // 3. Third priority: Detected BNB in prompt\n    else if (containsBnb) {\n      token = \"BNB\";\n      logger.debug(\"Using BNB as detected in prompt\");\n    }\n    // 4. Default fallback\n    else {\n      token = \"BNB\"; // Default to native token\n      logger.debug(\"No token detected, defaulting to native token BNB\");\n    }\n    \n    // Final validation - never allow null/undefined as token value\n    if (!token) {\n      token = \"BNB\";\n      logger.debug(\"Final safeguard: ensuring token is not null/undefined\");\n    }\n    \n    logger.debug(`Final token parameter: ${token}`);\n\n    logger.debug(\"Initializing wallet provider\");\n    const walletProvider = initWalletProvider(runtime);\n    logger.debug(\"Wallet address:\", walletProvider.getAddress());\n    \n    const action = new TransferAction(walletProvider);\n    logger.debug(\"TransferAction instance created\");\n    \n    // Process data field to avoid passing \"null\" string\n    let dataParam: Hex | undefined = undefined;\n    const dataValue = content.data;\n    if (dataValue && typeof dataValue === 'string') {\n      if (dataValue.startsWith('0x') && dataValue !== '0x') {\n        // Ensure it's a proper Hex type by creating a new string with the 0x prefix\n        dataParam = dataValue as `0x${string}`;\n        logger.debug(`Using valid hex data: ${dataParam}`);\n      } else {\n        logger.debug(`Invalid data format or value: ${dataValue}, ignoring`);\n      }\n    }\n\n    // Ensure toAddress is properly formatted\n    let toAddress = \"\";\n    if (typeof content.toAddress === 'string') {\n      toAddress = content.toAddress;\n    } else if (match?.[3]) {\n      // Use address extracted from prompt if available\n      toAddress = match[3];\n      logger.debug(`Using address extracted from prompt: ${toAddress}`);\n    }\n    \n    // Ensure amount is properly formatted\n    let amount = \"\";\n    if (content.amount && (typeof content.amount === 'string' || typeof content.amount === 'number')) {\n      amount = String(content.amount);\n    } else if (match?.[1]) {\n      // Use amount extracted from prompt if available\n      amount = match[1];\n      logger.debug(`Using amount extracted from prompt: ${amount}`);\n    }\n    \n    const paramOptions: TransferParams = {\n      chain: chain as SupportedChain,\n      token: token,\n      amount: amount,\n      toAddress: toAddress as `0x${string}`,\n      data: dataParam,\n    };\n    \n    logger.debug(\"Transfer params before action:\", JSON.stringify(paramOptions, null, 2));\n\n    try {\n      logger.debug(\"Calling transfer with params:\", JSON.stringify(paramOptions, null, 2));\n      \n      // Log the wallet initialization process\n      logger.debug(\"Wallet provider initialized, address:\", walletProvider.getAddress());\n      \n      // About to call the transfer method\n      logger.debug(\"About to call TransferAction.transfer() method...\");\n      const transferResp = await action.transfer(paramOptions);\n      logger.debug(\"Transfer method completed successfully, response:\", JSON.stringify(transferResp, null, 2));\n      \n      // Get the block explorer URL for the transaction based on the chain\n      const explorerInfo = chain === 'bsctestnet' ? EXPLORERS.BSC_TESTNET : \n                           chain === 'opbnb' ? EXPLORERS.OPBNB : EXPLORERS.BSC;\n      \n      const blockExplorerUrl = `${explorerInfo.url}/tx/${transferResp.txHash}`;\n      const walletExplorerUrl = `${explorerInfo.url}/address/${transferResp.recipient}`;\n      logger.debug(`Block explorer URL: ${blockExplorerUrl}`);\n      logger.debug(`Wallet explorer URL: ${walletExplorerUrl}`);\n      \n      callback?.({\n        text: `Successfully transferred ${transferResp.amount} ${transferResp.token} to ${transferResp.recipient}\nTransaction Hash: ${transferResp.txHash}\nCheck on block explorer: ${blockExplorerUrl}\nCheck the wallet: ${walletExplorerUrl}`,\n        content: { \n          ...transferResp,\n          blockExplorerUrl: blockExplorerUrl,\n          walletExplorerUrl: walletExplorerUrl\n        },\n      });\n\n      return true;\n    } catch (error: unknown) {\n      const errorObj = error as Error;\n      logger.error(\"Error during transfer:\", errorObj.message || String(error));\n      \n      // Log the entire error object for diagnosis\n      try {\n        logger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n      } catch (e) {\n        logger.error(\"Error object not serializable, logging properties individually:\");\n        if (errorObj && typeof errorObj === 'object') {\n          // Convert to unknown first, then to a safer type for indexing\n          const errorAsRecord = Object.entries(errorObj as unknown as Record<string, unknown>)\n            .reduce((acc, [key, value]) => {\n              acc[key] = value;\n              return acc;\n            }, {} as Record<string, unknown>);\n            \n          for (const [key, value] of Object.entries(errorAsRecord)) {\n            try {\n              logger.error(`${key}:`, value);\n            } catch (e) {\n              logger.error(`${key}: [Error serializing property]`);\n            }\n          }\n        }\n      }\n      \n      // Enhanced error diagnosis\n      let errorMessage = errorObj.message || String(error);\n      \n      // Check for LI.FI SDK errors\n      if (typeof errorMessage === 'string' && errorMessage.includes(\"LI.FI SDK\")) {\n        logger.error(\"LI.FI SDK error detected\");\n        \n        if (errorMessage.includes(\"Request failed with status code 404\") && \n          errorMessage.includes(\"Could not find token\")) {\n          // Extract the token that couldn't be found from the error message\n          const tokenMatch = errorMessage.match(/Could not find token (.*?) on chain/);\n          const tokenValue = tokenMatch ? tokenMatch[1] : paramOptions.token;\n          \n          errorMessage = `Could not find the token '${tokenValue}' on ${paramOptions.chain}. \n          Please check the token symbol or address and try again.`;\n          \n          logger.error(\"Token not found:\", tokenValue);\n          logger.debug(\"Original token from params:\", paramOptions.token);\n          \n          // Suggest a solution\n          if (tokenValue === \"null\" || tokenValue === \"undefined\" || !tokenValue) {\n            errorMessage += \" For BNB transfers, please explicitly specify 'BNB' as the token.\";\n          }\n        } else if (errorMessage.includes(\"400 Bad Request\") && errorMessage.includes(\"chain must be\")) {\n          errorMessage = `Chain validation error: '${paramOptions.chain}' is not a valid chain for the LI.FI SDK. \n          Please use 'bsc' for BSC mainnet.`;\n        }\n      }\n      \n      // Check for other common errors\n      if (typeof errorMessage === 'string') {\n        if (errorMessage.includes(\"insufficient funds\")) {\n          errorMessage = \"Insufficient funds for the transaction. Please check your balance and try again with a smaller amount.\";\n        } else if (errorMessage.includes(\"transaction underpriced\")) {\n          errorMessage = \"Transaction underpriced. Please try again with a higher gas price.\";\n        }\n      }\n      \n      // Add block explorer link to view wallet address\n      const explorerInfo = chain === 'bsctestnet' ? EXPLORERS.BSC_TESTNET : \n                         chain === 'opbnb' ? EXPLORERS.OPBNB : EXPLORERS.BSC;\n      const walletExplorerUrl = `${explorerInfo.url}/address/${walletProvider.getAddress()}`;\n      \n      callback?.({\n        text: `Transfer failed: ${errorMessage}\nYou can check your wallet balance at: ${walletExplorerUrl}`,\n        content: { \n          error: errorMessage,\n          walletExplorerUrl: walletExplorerUrl\n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Transfer 0.001 BNB to 0xC9904881242cF8A1e105E800A9CF6fF4Ec0289f0\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you transfer 0.001 BNB to 0x2CE4EaF47CACFbC6590686f8f7521e0385822334 on BSC\",\n          actions: [\"TRANSFER_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Transfer 1 USDT to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you transfer 1 USDT to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC\",\n          actions: [\"TRANSFER_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport { getToken } from \"@lifi/sdk\";\nimport { type Address, erc20Abi, formatEther, formatUnits } from \"viem\";\n\nimport {\n  bnbWalletProvider,\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { getBalanceTemplate } from \"../templates\";\nimport type {\n  GetBalanceParams,\n  GetBalanceResponse,\n  SupportedChain,\n} from \"../types\";\nimport { EXPLORERS } from \"../constants\";\n\nexport { getBalanceTemplate };\n\n/**\n * GetBalanceAction class - Handles token balance queries on BNB Smart Chain networks\n * \n * This class implements the core functionality to retrieve balances of native\n * and ERC20 tokens from BNB Smart Chain and opBNB networks.\n */\nexport class GetBalanceAction {\n  /**\n   * Creates a new GetBalanceAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   */\n  constructor(private walletProvider: WalletProvider) {}\n\n  /**\n   * Get token balance for the specified address and chain\n   * \n   * @param params - Parameters including chain, address, and token\n   * @returns Balance response with token and amount\n   * @throws Error if balance retrieval fails\n   */\n  async getBalance(params: GetBalanceParams): Promise<GetBalanceResponse> {\n    logger.debug(\"Get balance params:\", JSON.stringify(params, null, 2));\n    await this.validateAndNormalizeParams(params);\n    logger.debug(\"Normalized get balance params:\", JSON.stringify(params, null, 2));\n\n    const { chain, address, token } = params;\n    if (!address) {\n      throw new Error(\"Address is required for getting balance\");\n    }\n\n    this.walletProvider.switchChain(chain);\n    const nativeSymbol = this.walletProvider.getChainConfigs(chain).nativeCurrency.symbol;\n    const chainId = this.walletProvider.getChainConfigs(chain).id;\n\n    let queryNativeToken = false;\n    if (\n      !token ||\n      token === \"\" ||\n      token.toLowerCase() === \"bnb\" ||\n      token.toLowerCase() === \"tbnb\"\n    ) {\n      queryNativeToken = true;\n    }\n\n    const resp: GetBalanceResponse = {\n      chain,\n      address,\n    };\n\n    // If ERC20 token is requested\n    if (!queryNativeToken) {\n      let amount: string;\n      if (token.startsWith(\"0x\")) {\n        amount = await this.getERC20TokenBalance(\n          chain,\n          address,\n          token as `0x${string}`\n        );\n      } else {\n        if (chainId !== 56) {\n          throw new Error(\n            \"Only BSC mainnet is supported for querying balance by token symbol\"\n          );\n        }\n\n        this.walletProvider.configureLiFiSdk(chain);\n        const tokenInfo = await getToken(chainId, token);\n        amount = await this.getERC20TokenBalance(\n          chain,\n          address,\n          tokenInfo.address as `0x${string}`\n        );\n      }\n\n      resp.balance = { token, amount };\n    } else {\n      // If native token is requested\n      const nativeBalanceWei = await this.walletProvider\n        .getPublicClient(chain)\n        .getBalance({ address });\n      resp.balance = {\n        token: nativeSymbol,\n        amount: formatEther(nativeBalanceWei),\n      };\n    }\n\n    return resp;\n  }\n\n  /**\n   * Get balance of a specific ERC20 token\n   * \n   * @param chain - The blockchain network to query\n   * @param address - The address to check balance for\n   * @param tokenAddress - The ERC20 token contract address\n   * @returns Formatted token balance with proper decimals\n   */\n  async getERC20TokenBalance(\n    chain: SupportedChain,\n    address: Address,\n    tokenAddress: Address\n  ): Promise<string> {\n    const publicClient = this.walletProvider.getPublicClient(chain);\n\n    const balance = await publicClient.readContract({\n      address: tokenAddress,\n      abi: erc20Abi,\n      functionName: \"balanceOf\",\n      args: [address],\n    });\n\n    const decimals = await publicClient.readContract({\n      address: tokenAddress,\n      abi: erc20Abi,\n      functionName: \"decimals\",\n    });\n\n    return formatUnits(balance, decimals);\n  }\n\n  /**\n   * Validates and normalizes the balance query parameters\n   * \n   * @param params - Parameters to validate and normalize\n   * @throws Error if validation fails\n   */\n  async validateAndNormalizeParams(params: GetBalanceParams): Promise<void> {\n    try {\n      // If no chain specified, default to BSC\n      if (!params.chain) {\n        params.chain = \"bsc\";\n        logger.debug(\"No chain specified, defaulting to BSC mainnet\");\n      }\n      \n      // If no address provided, use the wallet's own address\n      if (!params.address) {\n        params.address = this.walletProvider.getAddress();\n        logger.debug(`No address provided, using wallet address: ${params.address}`);\n        return;\n      }\n      \n      // Convert address to string for string comparisons\n      const addressStr = String(params.address);\n      \n      // If address is null or invalid strings, use wallet address\n      if (addressStr === 'null' || addressStr === 'undefined') {\n        params.address = this.walletProvider.getAddress();\n        logger.debug(`Invalid address string provided, using wallet address: ${params.address}`);\n        return;\n      }\n      \n      // If address already looks like a valid hex address, use it directly\n      if (addressStr.startsWith(\"0x\") && addressStr.length === 42) {\n        logger.debug(`Using valid hex address: ${params.address}`);\n        return;\n      }\n      \n      // Skip web3 name resolution for common token names that might have been\n      // mistakenly parsed as addresses\n      const commonTokens = ['USDT', 'USDC', 'BNB', 'ETH', 'BUSD', 'WBNB', 'CAKE'];\n      if (commonTokens.includes(addressStr.toUpperCase())) {\n        logger.debug(`Address looks like a token symbol: ${params.address}, using wallet address instead`);\n        params.address = this.walletProvider.getAddress();\n        return;\n      }\n      \n      // Try to resolve as web3 name\n      logger.debug(`Attempting to resolve address as Web3Name: ${params.address}`);\n      const resolvedAddress = await this.walletProvider.resolveWeb3Name(params.address);\n      if (resolvedAddress) {\n        logger.debug(`Resolved Web3Name to address: ${resolvedAddress}`);\n        params.address = resolvedAddress as Address;\n        return;\n      }\n      \n      // If we can't resolve, but it looks like a potential wallet address, try to use it\n      if (addressStr.startsWith(\"0x\")) {\n        logger.warn(`Address \"${params.address}\" doesn't look like a standard Ethereum address but will be used as is`);\n        return;\n      }\n      \n      // If we get here, we couldn't parse the address at all\n      // Fall back to the wallet's address\n      logger.warn(`Could not resolve address: ${params.address}, falling back to wallet address`);\n      params.address = this.walletProvider.getAddress();\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(`Error validating address: ${errorMessage}`);\n      // Fall back to wallet's own address if there's an error\n      params.address = this.walletProvider.getAddress();\n    }\n  }\n}\n\n/**\n * Action for querying token balances on BNB Smart Chain networks\n * \n * This action handles retrieving native BNB and ERC20 token balances\n * on BSC and opBNB networks for the specified address.\n */\nexport const getBalanceAction: Action = {\n  name: \"GET_BALANCE_BNB\",\n  similes: [\"CHECK_BALANCE_BNB\", \"TOKEN_BALANCE_BNB\", \"VIEW_BALANCE_BNB\"],\n  description: \"Get balance of a token or native BNB for a given address on BNB Smart Chain or opBNB networks\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing GET_BALANCE_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n    logger.debug(\"Message source:\", message.content.source);\n\n    // Validate message source - Allow both \"direct\" and \"client_chat:user\" sources\n    if (!(message.content.source === \"direct\" || message.content.source === \"client_chat:user\")) {\n      logger.warn(\"Balance query rejected: invalid source:\", message.content.source);\n      callback?.({\n        text: \"I can't do that for you.\",\n        content: { error: \"Balance query not allowed\" },\n      });\n      return false;\n    }\n    logger.debug(\"Source validation passed\");\n\n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n\n    try {\n      // Only create walletInfo if state exists\n      if (state) {\n        state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\n        logger.debug(\"Wallet info:\", JSON.stringify(state.walletInfo, null, 2));\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Error getting wallet info:\", errorMessage);\n      callback?.({\n        text: `Unable to access wallet: ${errorMessage}`,\n        content: { error: errorMessage },\n      });\n      return false;\n    }\n\n    // Extract balance query parameters using the model\n    const templateData = {\n      template: getBalanceTemplate,\n      state: currentState\n    };\n\n    logger.debug(\"Sending template data to model:\", JSON.stringify(templateData, null, 2));\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(templateData),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    logger.debug(\"Raw model output:\", mlOutput);\n    \n    // Parse the JSON output\n    let content: Record<string, unknown> = {};\n    try {\n      // Handle JSON wrapped in markdown code blocks\n      let jsonStr = mlOutput;\n      if (typeof mlOutput === 'string') {\n        // Check if the output is wrapped in markdown code blocks\n        const jsonRegex = /```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/;\n        const match = mlOutput.match(jsonRegex);\n        \n        if (match?.[1]) {\n          // Extract the JSON string from markdown code block\n          jsonStr = match[1];\n          logger.debug(\"Extracted JSON from markdown:\", jsonStr);\n        }\n        \n        // Now parse the JSON\n        content = JSON.parse(jsonStr);\n      } else {\n        // If it's already an object, use it directly\n        content = mlOutput as Record<string, unknown>;\n      }\n      logger.debug(\"Successfully parsed model output:\", JSON.stringify(content, null, 2));\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", error instanceof Error ? error.message : String(error));\n      logger.error(\"Raw output that failed parsing:\", mlOutput);\n      \n      // Create a fallback content object\n      content = {\n        chain: \"bsc\", // Default to bsc chain\n        token: \"BNB\"  // Default to BNB token\n      };\n      logger.debug(\"Using fallback content:\", JSON.stringify(content, null, 2));\n    }\n\n    // Initialize wallet provider and action handler\n    const walletProvider = initWalletProvider(runtime);\n    const action = new GetBalanceAction(walletProvider);\n    \n    // Prepare balance query parameters\n    const getBalanceParams: GetBalanceParams = {\n      chain: content.chain as SupportedChain || \"bsc\",\n      address: content.address as Address || undefined, // Let validateAndNormalizeParams handle null/undefined\n      token: content.token as string || \"BNB\",\n    };\n\n    logger.debug(\"Balance query parameters:\", JSON.stringify(getBalanceParams, null, 2));\n\n    try {\n      // Execute balance query\n      logger.debug(`Querying balance on ${getBalanceParams.chain} for token ${getBalanceParams.token || \"native BNB\"}`);\n      const balanceResponse = await action.getBalance(getBalanceParams);\n      logger.debug(\"Balance response:\", JSON.stringify(balanceResponse, null, 2));\n      \n      // Format success response\n      if (callback) {\n        let responseText = `No balance found for ${balanceResponse.address} on ${balanceResponse.chain}`;\n        \n        if (balanceResponse.balance) {\n          // Get block explorer URL for the address\n          const explorerInfo = balanceResponse.chain === 'bsctestnet' as SupportedChain ? EXPLORERS.BSC_TESTNET : \n                              balanceResponse.chain === 'opbnb' as SupportedChain ? EXPLORERS.OPBNB : EXPLORERS.BSC;\n          \n          const walletExplorerUrl = `${explorerInfo.url}/address/${balanceResponse.address}`;\n          logger.debug(`Wallet explorer URL: ${walletExplorerUrl}`);\n          \n          responseText = `Balance of ${balanceResponse.address} on ${balanceResponse.chain}:\n${balanceResponse.balance.token}: ${balanceResponse.balance.amount}\n\nCheck the wallet on block explorer: ${walletExplorerUrl}`;\n        \n          callback({\n            text: responseText,\n            content: { \n              success: true,\n              ...balanceResponse,\n              walletExplorerUrl: walletExplorerUrl\n            },\n          });\n        } else {\n          callback({\n            text: responseText,\n            content: { \n              success: true,\n              ...balanceResponse\n            },\n          });\n        }\n      }\n      \n      return true;\n    } catch (error: unknown) {\n      // Handle errors gracefully\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      logger.error(\"Error during balance query:\", errorObj.message);\n      \n      // Provide more user-friendly error messages\n      let errorMessage = errorObj.message;\n      \n      if (errorMessage.includes(\"getTldInfo\")) {\n        errorMessage = `Could not find token \"${getBalanceParams.token}\" on ${getBalanceParams.chain}. Please check the token symbol or address.`;\n      } else if (errorMessage.includes(\"No URL was provided\")) {\n        errorMessage = \"Network connection issue. Please try again later.\";\n      } else if (errorMessage.includes(\"Only BSC mainnet is supported\")) {\n        errorMessage = \"Only BSC mainnet supports looking up tokens by symbol. Please try using a token address instead.\";\n      } else if (errorMessage.includes(\"Invalid address\")) {\n        errorMessage = \"The address provided is invalid. Please provide a valid wallet address.\";\n      } else if (errorMessage.includes(\"Cannot read properties\")) {\n        errorMessage = \"There was an issue processing your request. Please check your inputs and try again.\";\n      }\n      \n      // Get wallet address for explorer link\n      const walletAddress = walletProvider.getAddress();\n      const explorerInfo = getBalanceParams.chain === 'bsctestnet' as SupportedChain ? EXPLORERS.BSC_TESTNET : \n                          getBalanceParams.chain === 'opbnb' as SupportedChain ? EXPLORERS.OPBNB : EXPLORERS.BSC;\n      const walletExplorerUrl = `${explorerInfo.url}/address/${walletAddress}`;\n      \n      callback?.({\n        text: `Failed to get balance: ${errorMessage}\n        \nYou can check your wallet at: ${walletExplorerUrl}`,\n        content: { \n          success: false,\n          error: errorMessage,\n          chain: getBalanceParams.chain,\n          token: getBalanceParams.token,\n          walletExplorerUrl: walletExplorerUrl\n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Check my BNB balance\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll check your BNB balance on BSC\",\n          actions: [\"GET_BALANCE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"What's my USDC balance?\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll check your USDC balance on BSC\",\n          actions: [\"GET_BALANCE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Show me how much 0x8731d54E9D02c286767d56ac03e8037C07e01e98 has in their wallet\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll check the BNB balance for that address on BSC\",\n          actions: [\"GET_BALANCE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Check CAKE token balance of this address: 0x1234567890AbCdEf1234567890AbCdEf12345678\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll look up the CAKE token balance for that address on BSC\",\n          actions: [\"GET_BALANCE_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}; ","import type { Address, Hash } from \"viem\";\n\nexport type SupportedChain = \"bsc\" | \"bscTestnet\" | \"opBNB\" | \"opBNBTestnet\";\nexport type StakeAction = \"deposit\" | \"withdraw\" | \"claim\";\n\n// Action parameters\nexport interface GetBalanceParams {\n    chain: SupportedChain;\n    address?: Address;\n    token: string;\n}\n\nexport interface TransferParams {\n    chain: SupportedChain;\n    token?: string;\n    amount?: string;\n    toAddress: Address;\n    data?: `0x${string}`;\n}\n\nexport interface SwapParams {\n    chain: SupportedChain;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n    slippage?: number;\n}\n\nexport interface BridgeParams {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    fromToken?: Address;\n    toToken?: Address;\n    amount: string;\n    toAddress?: Address;\n}\n\nexport interface StakeParams {\n    chain: SupportedChain;\n    action: StakeAction;\n    amount?: string;\n}\n\nexport interface FaucetParams {\n    token?: string;\n    toAddress?: Address;\n}\n\n// Action return types\nexport interface GetBalanceResponse {\n    chain: SupportedChain;\n    address: Address;\n    balance?: { token: string; amount: string };\n}\n\nexport interface TransferResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    amount: string;\n    token: string;\n    data?: `0x${string}`;\n}\n\nexport interface SwapResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n    executionDetails?: {\n        gasCosts?: Array<{\n            price?: string;\n            limit?: string;\n            amount?: string;\n            amountUSD?: string;\n        }>;\n    };\n}\n\nexport interface BridgeResponse {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n}\n\nexport interface StakeResponse {\n    response: string;\n    txHash?: `0x${string}`;\n    action?: StakeAction;\n    amount?: string;\n}\n\nexport interface FaucetResponse {\n    token: string;\n    recipient: Address;\n    txHash: Hash;\n}\n\nexport interface IDeployERC20Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    decimals: number;\n    totalSupply: string;\n}\n\nexport interface IDeployERC721Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    baseURI: string;\n}\n\nexport interface IDeployERC1155Params {\n    chain: SupportedChain;\n    name: string;\n    baseURI: string;\n}\n\n// Contract ABIs\nexport const L1StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"receive\",\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"MESSENGER\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"OTHER_BRIDGE\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20To\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20To\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"deposits\",\n        inputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeETH\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeERC20Withdrawal\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeETHWithdrawal\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"initialize\",\n        inputs: [\n            {\n                name: \"_messenger\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n            {\n                name: \"_superchainConfig\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n            {\n                name: \"_systemConfig\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"l2TokenBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"messenger\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"otherBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"paused\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n                internalType: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"superchainConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"systemConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"version\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n                internalType: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeFinalized\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeInitiated\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20DepositInitiated\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20WithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHDepositInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHWithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"Initialized\",\n        inputs: [\n            {\n                name: \"version\",\n                type: \"uint8\",\n                indexed: false,\n                internalType: \"uint8\",\n            },\n        ],\n        anonymous: false,\n    },\n] as const;\n\nexport const L2StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n                internalType: \"address payable\",\n            },\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"AddressEmptyCode\",\n        type: \"error\",\n        inputs: [{ name: \"target\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"AddressInsufficientBalance\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    { name: \"FailedInnerCall\", type: \"error\", inputs: [] },\n    {\n        name: \"OwnableInvalidOwner\",\n        type: \"error\",\n        inputs: [{ name: \"owner\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnableUnauthorizedAccount\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"SafeERC20FailedOperation\",\n        type: \"error\",\n        inputs: [{ name: \"token\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnershipTransferred\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"previousOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"newOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\",\n    },\n    {\n        name: \"SetDelegationFee\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x0322f3257c2afe5fe8da7ab561f0d3384148487412fe2751678f2188731c0815\",\n    },\n    {\n        name: \"WithdrawTo\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"minGasLimit\",\n                type: \"uint32\",\n                indexed: false,\n                internalType: \"uint32\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x56f66275d9ebc94b7d6895aa0d96a3783550d0183ba106408d387d19f2e877f1\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"contract IL2StandardBridge\",\n            },\n        ],\n        constant: true,\n        signature: \"0x21d12763\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE_ADDRESS\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x2cb7cb06\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"delegationFee\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                value: \"2000000000000000\",\n                internalType: \"uint256\",\n            },\n        ],\n        constant: true,\n        signature: \"0xc5f0a58f\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"owner\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0xCe4750fDc02A07Eb0d99cA798CD5c170D8F8410A\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x8da5cb5b\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"renounceOwnership\",\n        type: \"function\",\n        inputs: [],\n        outputs: [],\n        signature: \"0x715018a6\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"setDelegationFee\",\n        type: \"function\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        outputs: [],\n        signature: \"0x55bfc81c\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"transferOwnership\",\n        type: \"function\",\n        inputs: [\n            { name: \"newOwner\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0xf2fde38b\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdraw\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0x32b7006d\",\n        stateMutability: \"payable\",\n    },\n    {\n        name: \"withdrawFee\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0x1ac3ddeb\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawFeeToL1\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        signature: \"0x244cafe0\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawTo\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_to\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0xa3a79548\",\n        stateMutability: \"payable\",\n    },\n] as const;\n\nexport const ListaDaoAbi = [\n    { inputs: [], stateMutability: \"nonpayable\", type: \"constructor\" },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimAllWithdrawals\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_uuid\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimUndelegated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_uuid\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimUndelegatedFrom\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_idx\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimWithdrawal\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Delegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"_delegateVotePower\",\n                type: \"bool\",\n            },\n        ],\n        name: \"DelegateTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_delegateTo\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_votesChange\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DelegateVoteTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_src\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Deposit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"DisableValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"Paused\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"ProposeManager\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_src\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_dest\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ReDelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_rewardsId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Redelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"RemoveValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RequestWithdraw\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RewardsCompounded\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"previousAdminRole\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"newAdminRole\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"RoleAdminChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"RoleGranted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"role\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"sender\",\n                type: \"address\",\n            },\n        ],\n        name: \"RoleRevoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_annualRate\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetAnnualRate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetBSCValidator\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetManager\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_minBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetMinBnb\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetRedirectAddress\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetReserveAmount\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetRevenuePool\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_synFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetSynFee\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_credit\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"toRemove\",\n                type: \"bool\",\n            },\n        ],\n        name: \"SyncCreditContract\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_nextUndelegatedRequestIndex\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bnbAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_shares\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Undelegate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_bnbAmount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_shares\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UndelegateFrom\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UndelegateReserve\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"Unpaused\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"WhitelistValidator\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"BOT\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"DEFAULT_ADMIN_ROLE\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GUARDIAN\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TEN_DECIMALS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"acceptNewManager\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"amountToDelegate\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"annualRate\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\n        ],\n        name: \"binarySearchCoveredMaxIndex\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"claimUndelegated\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_idx\", type: \"uint256\" }],\n        name: \"claimWithdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\n        ],\n        name: \"claimWithdrawFor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"compoundRewards\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_bnbAmount\", type: \"uint256\" },\n        ],\n        name: \"convertBnbToShares\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"convertBnbToSnBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_shares\", type: \"uint256\" },\n        ],\n        name: \"convertSharesToBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"convertSnBnbToBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        name: \"creditContracts\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        name: \"creditStates\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"delegateTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"delegateVotePower\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_delegateTo\", type: \"address\" },\n        ],\n        name: \"delegateVoteTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"deposit\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"depositReserve\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"disableValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAmountToUndelegate\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountToUndelegate\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" }],\n        name: \"getBotUndelegateRequest\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"endTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amount\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amountInSnBnb\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IStakeManager.BotUndelegateRequest\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"getClaimableAmount\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getContracts\",\n        outputs: [\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\n            { internalType: \"address\", name: \"_bscValidator\", type: \"address\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"getDelegated\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"getRedelegateFee\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"bytes32\", name: \"role\", type: \"bytes32\" }],\n        name: \"getRoleAdmin\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSlisBnbWithdrawLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_slisBnbWithdrawLimit\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBnbInValidators\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalPooledBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_user\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_idx\", type: \"uint256\" },\n        ],\n        name: \"getUserRequestStatus\",\n        outputs: [\n            { internalType: \"bool\", name: \"_isClaimable\", type: \"bool\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"getUserWithdrawalRequests\",\n        outputs: [\n            {\n                components: [\n                    { internalType: \"uint256\", name: \"uuid\", type: \"uint256\" },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amountInSnBnb\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IStakeManager.WithdrawalRequest[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"grantRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"hasRole\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_slisBnb\", type: \"address\" },\n            { internalType: \"address\", name: \"_admin\", type: \"address\" },\n            { internalType: \"address\", name: \"_manager\", type: \"address\" },\n            { internalType: \"address\", name: \"_bot\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" },\n            { internalType: \"address\", name: \"_revenuePool\", type: \"address\" },\n            { internalType: \"address\", name: \"_validator\", type: \"address\" },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"nextConfirmedRequestUUID\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"pause\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"paused\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"placeholder\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"proposeNewManager\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"srcValidator\", type: \"address\" },\n            { internalType: \"address\", name: \"dstValidator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"redelegate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"redirectAddress\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"removeValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"renounceRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        name: \"requestIndexMap\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"requestUUID\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_amountInSlisBnb\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"requestWithdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"reserveAmount\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"revenuePool\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"revokeBotRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes32\", name: \"role\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"account\", type: \"address\" },\n        ],\n        name: \"revokeRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"_annualRate\", type: \"uint256\" },\n        ],\n        name: \"setAnnualRate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setBSCValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setBotRole\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\n        name: \"setMinBnb\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setRedirectAddress\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n        name: \"setReserveAmount\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"setRevenuePool\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"_synFee\", type: \"uint256\" }],\n        name: \"setSynFee\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"bytes4\", name: \"interfaceId\", type: \"bytes4\" },\n        ],\n        name: \"supportsInterface\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"synFee\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"togglePause\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"toggleVote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalDelegated\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalReserveAmount\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"unbondingBnb\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"undelegate\",\n        outputs: [\n            { internalType: \"uint256\", name: \"_uuid\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_operator\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n        ],\n        name: \"undelegateFrom\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_actualBnbAmount\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"undelegatedQuota\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        name: \"validators\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_address\", type: \"address\" },\n        ],\n        name: \"whitelistValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"amount\", type: \"uint256\" }],\n        name: \"withdrawReserve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    { stateMutability: \"payable\", type: \"receive\" },\n] as const;\n","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport { \n  parseEther, \n  getContract, \n  parseUnits, \n  erc20Abi,\n  type Address,\n  type PublicClient,\n  type WalletClient,\n  type Chain,\n} from \"viem\";\n\nimport {\n  bnbWalletProvider,\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { bridgeTemplate } from \"../templates\";\nimport {\n  L1StandardBridgeAbi,\n  L2StandardBridgeAbi,\n  type BridgeParams,\n  type BridgeResponse,\n  type SupportedChain,\n} from \"../types\";\nimport { EXPLORERS } from \"../constants\";\n\nexport { bridgeTemplate };\n\n/**\n * Utility function to convert null or empty string to undefined\n * \n * @param value - Value to check and convert\n * @returns The original value or undefined if it's null or empty string\n */\nfunction convertNullStringToUndefined<T>(value: T | string | undefined | null): T | undefined {\n  if (value === null || value === \"\") return undefined;\n  return value as T | undefined;\n}\n\n/**\n * BridgeAction class - Handles token bridging between BNB Smart Chain and opBNB\n * \n * This class implements the core functionality for bridging tokens\n * between BNB Smart Chain and opBNB using the standard bridge contracts.\n */\nexport class BridgeAction {\n  private readonly L1_BRIDGE_ADDRESS =\n    \"0xF05F0e4362859c3331Cb9395CBC201E3Fa6757Ea\" as const;\n  private readonly L2_BRIDGE_ADDRESS =\n    \"0x4000698e3De52120DE28181BaACda82B21568416\" as const;\n  private readonly LEGACY_ERC20_ETH =\n    \"0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\" as const;\n\n  /**\n   * Creates a new BridgeAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   */\n  constructor(private walletProvider: WalletProvider) {}\n\n  /**\n   * Execute a token bridge with the provided parameters\n   * \n   * @param params - Bridge parameters including fromChain, toChain, token, and amount\n   * @returns Bridge response with transaction details\n   * @throws Error if bridge operation fails\n   */\n  async bridge(params: BridgeParams): Promise<BridgeResponse> {\n    logger.debug(\"Starting bridge with params:\", JSON.stringify(params, null, 2));\n    \n    // Validate and normalize parameters\n    await this.validateAndNormalizeParams(params);\n    logger.debug(\"After validation, bridge params:\", JSON.stringify(params, null, 2));\n\n    // Check if this is a native token bridge\n    const nativeTokenBridge = \n      (params.fromToken === undefined) || \n      (typeof params.fromToken === 'string' && params.fromToken.toUpperCase() === \"BNB\");\n    \n    // Check if this is a self-bridge (no separate recipient)\n    const selfBridge = params.toAddress === undefined;\n    \n    // Get account and address\n    const account = this.walletProvider.getAccount();\n    const fromAddress = this.walletProvider.getAddress();\n    logger.debug(`From address: ${fromAddress}`);\n    \n    // Prepare response object\n    const resp: BridgeResponse = {\n      fromChain: params.fromChain,\n      toChain: params.toChain,\n      fromToken: nativeTokenBridge ? \"BNB\" : (params.fromToken as string) || \"\",\n      toToken: nativeTokenBridge ? \"BNB\" : (params.toToken as string) || \"\",\n      amount: params.amount,\n      txHash: \"0x\",\n      recipient: params.toAddress || fromAddress,\n    };\n    \n    logger.debug(\"Bridge response initialized:\", JSON.stringify(resp, null, 2));\n    \n    try {\n      // Switch to source chain\n      logger.debug(`Switching to source chain: ${params.fromChain}`);\n      this.walletProvider.switchChain(params.fromChain);\n      \n      const publicClient = this.walletProvider.getPublicClient(params.fromChain);\n      const walletClient = this.walletProvider.getWalletClient(params.fromChain);\n      const chain = this.walletProvider.getChainConfigs(params.fromChain);\n      \n      // Calculate amount based on decimals\n      let amount: bigint;\n      \n      // For native token, use parseEther\n      if (nativeTokenBridge) {\n        amount = parseEther(params.amount);\n        logger.debug(`Native token bridge, amount: ${amount}`);\n      } else {\n        // For ERC20, get decimals first\n        logger.debug(`Reading decimals for token: ${params.fromToken}`);\n        const decimals = await publicClient.readContract({\n          address: params.fromToken as `0x${string}`,\n          abi: erc20Abi,\n          functionName: \"decimals\",\n        });\n        \n        amount = parseUnits(params.amount, decimals);\n        logger.debug(`ERC20 token bridge, amount: ${amount} with ${decimals} decimals`);\n      }\n\n      // Handle BSC to opBNB bridging\n      if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") {\n        logger.debug(\"Bridging from L1 (BSC) to L2 (opBNB)\");\n        logger.debug(`Using L1 bridge contract: ${this.L1_BRIDGE_ADDRESS}`);\n        \n        // Create contract instances\n        const l1BridgeContractConfig = {\n          address: this.L1_BRIDGE_ADDRESS as `0x${string}`,\n          abi: L1StandardBridgeAbi,\n        };\n        \n        // Use getContract for contract interactions\n        const l1Contract = getContract({\n          ...l1BridgeContractConfig,\n          client: { public: publicClient, wallet: walletClient },\n        });\n\n        // Check ERC20 allowance if not native token\n        if (!nativeTokenBridge) {\n          logger.debug(\"Checking ERC20 allowance for L1 bridge\");\n          const allowance = await this.walletProvider.checkERC20Allowance(\n            params.fromChain,\n            params.fromToken as `0x${string}`,\n            fromAddress,\n            this.L1_BRIDGE_ADDRESS\n          );\n          \n          logger.debug(`Current allowance: ${allowance}`);\n          \n          if (allowance < amount) {\n            const neededAllowance = amount - allowance;\n            logger.debug(`Increasing allowance by ${neededAllowance}`);\n            \n            const txHash = await this.walletProvider.approveERC20(\n              params.fromChain,\n              params.fromToken as `0x${string}`,\n              this.L1_BRIDGE_ADDRESS,\n              amount\n            );\n            logger.debug(`Approval transaction submitted with hash: ${txHash}`);\n            \n            await publicClient.waitForTransactionReceipt({\n              hash: txHash,\n            });\n            logger.debug(\"Approval transaction confirmed\");\n          } else {\n            logger.debug(\"Sufficient allowance already granted\");\n          }\n        }\n\n        // Execute the appropriate bridge function based on parameters\n        if (selfBridge && nativeTokenBridge) {\n          logger.debug(\"Self bridge with native token - using depositETH\");\n          const args = [1, \"0x\"] as const;\n          \n          logger.debug(`Simulating depositETH with value: ${amount}`);\n          await publicClient.simulateContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositETH\",\n            args,\n            account,\n            value: amount,\n          });\n          \n          logger.debug(\"Executing depositETH transaction\");\n          resp.txHash = await walletClient.writeContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositETH\",\n            args,\n            value: amount,\n            chain,\n            account,\n          });\n        } else if (selfBridge && !nativeTokenBridge) {\n          logger.debug(\"Self bridge with ERC20 token - using depositERC20\");\n          logger.debug(`From token: ${params.fromToken}, To token: ${params.toToken}`);\n          \n          const args = [\n            params.fromToken as `0x${string}`,\n            params.toToken as `0x${string}`,\n            amount,\n            1,\n            \"0x\",\n          ] as const;\n          \n          logger.debug(\"Simulating depositERC20\");\n          await publicClient.simulateContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositERC20\",\n            args,\n            account,\n          });\n          \n          logger.debug(\"Executing depositERC20 transaction\");\n          resp.txHash = await walletClient.writeContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositERC20\",\n            args,\n            chain,\n            account,\n          });\n        } else if (!selfBridge && nativeTokenBridge) {\n          logger.debug(\"Bridge to another address with native token - using depositETHTo\");\n          logger.debug(`Recipient address: ${params.toAddress}`);\n          \n          const args = [params.toAddress as `0x${string}`, 1, \"0x\"] as const;\n          \n          logger.debug(`Simulating depositETHTo with value: ${amount}`);\n          await publicClient.simulateContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositETHTo\",\n            args,\n            account,\n            value: amount,\n          });\n          \n          logger.debug(\"Executing depositETHTo transaction\");\n          resp.txHash = await walletClient.writeContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositETHTo\",\n            args,\n            value: amount,\n            chain,\n            account,\n          });\n        } else {\n          logger.debug(\"Bridge to another address with ERC20 token - using depositERC20To\");\n          logger.debug(`From token: ${params.fromToken}, To token: ${params.toToken}`);\n          logger.debug(`Recipient address: ${params.toAddress}`);\n          \n          const args = [\n            params.fromToken as `0x${string}`,\n            params.toToken as `0x${string}`,\n            params.toAddress as `0x${string}`,\n            amount,\n            1,\n            \"0x\",\n          ] as const;\n          \n          logger.debug(\"Simulating depositERC20To\");\n          await publicClient.simulateContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositERC20To\",\n            args,\n            account,\n          });\n          \n          logger.debug(\"Executing depositERC20To transaction\");\n          resp.txHash = await walletClient.writeContract({\n            address: l1Contract.address,\n            abi: l1Contract.abi,\n            functionName: \"depositERC20To\",\n            args,\n              chain,\n            account,\n          });\n        }\n      }\n      // Handle opBNB to BSC bridging\n      else if (params.fromChain === \"opBNB\" && params.toChain === \"bsc\") {\n        logger.debug(\"Bridging from L2 (opBNB) to L1 (BSC)\");\n        logger.debug(`Using L2 bridge contract: ${this.L2_BRIDGE_ADDRESS}`);\n        \n        // Create contract instances\n        const l2BridgeContractConfig = {\n          address: this.L2_BRIDGE_ADDRESS as `0x${string}`,\n          abi: L2StandardBridgeAbi,\n        };\n        \n        // Use getContract for contract interactions\n        const l2Contract = getContract({\n          ...l2BridgeContractConfig,\n          client: { public: publicClient, wallet: walletClient },\n        });\n\n        // Get delegation fee\n        logger.debug(\"Reading delegation fee from bridge contract\");\n        const delegationFee = await publicClient.readContract({\n          address: this.L2_BRIDGE_ADDRESS as `0x${string}`,\n          abi: L2StandardBridgeAbi,\n          functionName: \"delegationFee\",\n        }) as bigint;\n        logger.debug(`Delegation fee: ${delegationFee}`);\n\n        // Check ERC20 allowance if not native token\n        if (!nativeTokenBridge) {\n          logger.debug(\"Checking ERC20 allowance for L2 bridge\");\n          const allowance = await this.walletProvider.checkERC20Allowance(\n            params.fromChain,\n            params.fromToken as `0x${string}`,\n            fromAddress,\n            this.L2_BRIDGE_ADDRESS\n          );\n          \n          logger.debug(`Current allowance: ${allowance}`);\n          \n          if (allowance < amount) {\n            const neededAllowance = amount - allowance;\n            logger.debug(`Increasing allowance by ${neededAllowance}`);\n            \n            const txHash = await this.walletProvider.approveERC20(\n              params.fromChain,\n              params.fromToken as `0x${string}`,\n              this.L2_BRIDGE_ADDRESS,\n              amount\n            );\n            logger.debug(`Approval transaction submitted with hash: ${txHash}`);\n            \n            await publicClient.waitForTransactionReceipt({\n              hash: txHash,\n            });\n            logger.debug(\"Approval transaction confirmed\");\n          } else {\n            logger.debug(\"Sufficient allowance already granted\");\n          }\n        }\n\n        // Execute the appropriate bridge function based on parameters\n        if (nativeTokenBridge) {\n          logger.debug(\"Using withdraw for native token\");\n          const args = [this.LEGACY_ERC20_ETH, amount, 1, \"0x\"] as const;\n          const value = amount + delegationFee;\n          \n          logger.debug(`Simulating withdraw with value: ${value}`);\n          await publicClient.simulateContract({\n            address: l2Contract.address,\n            abi: l2Contract.abi,\n            functionName: \"withdraw\",\n            args,\n            account,\n            value,\n          });\n          \n          logger.debug(\"Executing withdraw transaction\");\n          resp.txHash = await walletClient.writeContract({\n            address: l2Contract.address,\n            abi: l2Contract.abi,\n            functionName: \"withdraw\",\n            args,\n            value,\n            chain,\n            account,\n          });\n        } else {\n          logger.debug(\"Using withdraw for non-native token\");\n          const args = [\n            params.fromToken as `0x${string}`,\n            amount,\n            1,\n            \"0x\",\n          ] as const;\n          const value = delegationFee;\n          \n          logger.debug(`Simulating withdraw with delegationFee: ${value}`);\n          await publicClient.simulateContract({\n            address: l2Contract.address,\n            abi: l2Contract.abi,\n            functionName: \"withdraw\",\n            args,\n            account,\n            value,\n          });\n          \n          logger.debug(\"Executing withdraw transaction\");\n          resp.txHash = await walletClient.writeContract({\n            address: l2Contract.address,\n            abi: l2Contract.abi,\n            functionName: \"withdraw\",\n            args,\n            value,\n            chain,\n            account,\n          });\n        }\n      }\n      \n      logger.debug(`Bridge operation successful, txHash: ${resp.txHash}`);\n      return resp;\n    } catch (error: unknown) {\n      logger.error(\"Error executing bridge operation:\", error);\n      \n      // Enhance error message based on common bridge errors\n      const errorObj = error as Error;\n      const errorMessage = errorObj.message || String(error);\n      \n      if (errorMessage.includes(\"insufficient funds\")) {\n        throw new Error(`Insufficient funds to bridge ${params.amount} ${resp.fromToken}. Please check your balance.`);\n      }\n      \n      if (errorMessage.includes(\"user rejected\")) {\n        throw new Error(\"Transaction rejected by user.\");\n      }\n      \n      if (errorMessage.includes(\"execution reverted\")) {\n        throw new Error(\"Bridge transaction reverted. This could be due to contract restrictions or incorrect parameters.\");\n      }\n      \n      // Re-throw the original error\n      throw error;\n    }\n  }\n\n  /**\n   * Validates and normalizes bridge parameters\n   * \n   * @param params - The parameters to validate and normalize\n   * @throws Error if parameters are invalid\n   */\n  async validateAndNormalizeParams(params: BridgeParams) {\n    logger.debug(\"Validating bridge params:\", JSON.stringify(params, null, 2));\n    \n    // Validate chains\n    if (!params.fromChain) {\n      logger.debug(\"No source chain specified, defaulting to bsc\");\n      params.fromChain = \"bsc\";\n    }\n\n    if (!params.toChain) {\n      logger.debug(\"No destination chain specified\");\n      throw new Error(\"Destination chain is required for bridging\");\n    }\n\n    // Only support BSC ⇔ opBNB bridges\n    const isSupported = \n      (params.fromChain === \"bsc\" && params.toChain === \"opBNB\") || \n      (params.fromChain === \"opBNB\" && params.toChain === \"bsc\");\n      \n    if (!isSupported) {\n      logger.error(`Unsupported bridge direction: ${params.fromChain} to ${params.toChain}`);\n      throw new Error(\"Unsupported bridge direction. Currently only supporting: BSC ↔ opBNB\");\n    }\n    \n    // Validate amount\n    if (!params.amount) {\n      logger.error(\"No amount specified for bridging\");\n      throw new Error(\"Amount is required for bridging\");\n    }\n    \n    try {\n      const amountValue = Number.parseFloat(params.amount);\n      if (Number.isNaN(amountValue) || amountValue <= 0) {\n        logger.error(`Invalid amount: ${params.amount}`);\n        throw new Error(`Invalid amount: ${params.amount}. Please provide a positive number.`);\n      }\n      logger.debug(`Amount validation passed: ${params.amount}`);\n    } catch (error) {\n      logger.error(`Failed to parse amount: ${params.amount}`, error);\n      throw new Error(`Invalid amount format: ${params.amount}. Please provide a valid number.`);\n    }\n    \n    // From BSC to opBNB with ERC20 tokens requires destination token address\n    if (params.fromChain === \"bsc\" && params.toChain === \"opBNB\" && params.fromToken) {\n      // Native token doesn't need a destination token\n      const isBnbToken = typeof params.fromToken === 'string' && params.fromToken.toUpperCase() === \"BNB\";\n      \n      if (!isBnbToken) {\n        if (!params.toToken) {\n          logger.error(\"Missing destination token address for ERC20 bridge\");\n          throw new Error(\"When bridging ERC20 tokens from BSC to opBNB, the token address on opBNB is required\");\n        }\n        \n        // Ensure toToken is a valid address if specified\n        if (typeof params.toToken === \"string\" && !params.toToken.startsWith(\"0x\")) {\n          logger.error(`Invalid token address format: ${params.toToken}`);\n          throw new Error(`Invalid token address: ${params.toToken}. Please provide a 0x-prefixed address.`);\n        }\n      }\n    }\n    \n    // Handle BNB symbol to undefined for native token transfer\n    if (typeof params.fromToken === 'string' && params.fromToken.toUpperCase() === \"BNB\") {\n      logger.debug(\"Native token BNB specified, setting fromToken to undefined\");\n      params.fromToken = undefined;\n    }\n    \n    // If toAddress specified, validate it's a valid address\n    if (params.toAddress) {\n      if (!params.toAddress.startsWith(\"0x\") || params.toAddress.length !== 42) {\n        logger.error(`Invalid address format: ${params.toAddress}`);\n        throw new Error(`Invalid destination address: ${params.toAddress}. Please provide a valid 0x-prefixed address.`);\n      }\n    }\n    \n    logger.debug(\"Validation passed for bridge params\");\n  }\n}\n\n/**\n * Action for bridging tokens between BNB Smart Chain and opBNB\n * \n * This action handles bridging of BNB and ERC20 tokens between\n * BNB Smart Chain (BSC) and opBNB networks using the standard bridges.\n */\nexport const bridgeAction: Action = {\n  name: \"BRIDGE_BNB\",\n  similes: [\n    \"CROSS_CHAIN_BNB\", \n    \"TRANSFER_CROSS_CHAIN_BNB\", \n    \"MOVE_CROSS_CHAIN_BNB\",\n    \"L1_L2_TRANSFER_BNB\"\n  ],\n  description: \"Bridge tokens between BNB Smart Chain (BSC) and opBNB networks\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing BRIDGE_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n    // Extract prompt text for bridge action analysis\n    const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n    logger.debug(`Raw prompt text: \"${promptText}\"`);\n    \n    // Analyze prompt to detect bridge parameters directly\n    const promptLower = promptText.toLowerCase();\n    \n    // Look for bridge patterns in the prompt\n    const bridgeRegex = /(?:bridge|send|transfer|move)\\s+([0-9.]+)\\s+(?:bnb|token|([a-zA-Z0-9]+))\\s+(?:from)?\\s+(?:bsc|binance|opbnb|l1|l2)\\s+(?:to)\\s+(?:bsc|binance|opbnb|l1|l2)(?:\\s+(?:to|address)\\s+(0x[a-fA-F0-9]{40}))?/i;\n    \n    // Variables to store extracted information\n    let directAmount: string | null = null;\n    let directFromToken: string | null = null;\n    const directToToken: string | null = null;\n    let directFromChain: string | null = null;\n    let directToChain: string | null = null;\n    let directToAddress: string | null = null;\n    \n    // Try to match bridge pattern\n    const match = promptText.match(bridgeRegex);\n    if (match) {\n      directAmount = match[1] || null;\n      directFromToken = match[2] || null;\n      directToAddress = match[3] || null;\n      logger.debug(`Directly extracted amount: ${directAmount}, token: ${directFromToken}, to address: ${directToAddress}`);\n    }\n    \n    // Detect chains based on keywords\n    if (promptLower.includes(\"bsc to opbnb\") || \n       promptLower.includes(\"binance to opbnb\") || \n       promptLower.includes(\"l1 to l2\")) {\n      directFromChain = \"bsc\";\n      directToChain = \"opBNB\";\n      logger.debug(\"Detected BSC to opBNB direction from keywords\");\n    } else if (promptLower.includes(\"opbnb to bsc\") || \n              promptLower.includes(\"opbnb to binance\") || \n              promptLower.includes(\"l2 to l1\")) {\n      directFromChain = \"opBNB\";\n      directToChain = \"bsc\";\n      logger.debug(\"Detected opBNB to BSC direction from keywords\");\n    }\n    \n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n    \n    try {\n      // Only create walletInfo if state exists\n      if (state) {\n        state.walletInfo = await bnbWalletProvider.get(\n          runtime,\n          message,\n          currentState\n        );\n        logger.debug(\"Wallet info:\", state.walletInfo);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Error getting wallet info:\", errorMessage);\n      callback?.({\n        text: `Unable to access wallet: ${errorMessage}`,\n        content: { error: errorMessage },\n      });\n      return false;\n    }\n\n    // Use runtime model to get bridge parameters\n    const bridgePrompt = {\n      template: bridgeTemplate,\n      state: currentState\n    };\n\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(bridgePrompt),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Parse the JSON output\n    let content: Record<string, unknown> = {};\n    try {\n      content = typeof mlOutput === 'string' ? JSON.parse(mlOutput) : mlOutput as Record<string, unknown>;\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", mlOutput);\n    }\n    \n    logger.debug(\"Generated bridge content:\", JSON.stringify(content, null, 2));\n    \n    // PRIORITY ORDER FOR PARAMETER DETERMINATION:\n    // 1. Direct match from prompt text (most reliable)\n    // 2. Parameters specified in model-generated content\n    \n    let fromChain: SupportedChain;\n    let toChain: SupportedChain;\n    let fromToken: string | undefined;\n    let toToken: string | undefined;\n    let amount: string;\n    let toAddress: `0x${string}` | undefined;\n    \n    // Determine fromChain\n    if (directFromChain) {\n      fromChain = directFromChain as SupportedChain;\n      logger.debug(`Using from chain directly extracted from prompt: ${fromChain}`);\n    } else if (content.fromChain && typeof content.fromChain === 'string') {\n      fromChain = content.fromChain as SupportedChain;\n      logger.debug(`Using from chain from generated content: ${fromChain}`);\n    } else {\n      fromChain = \"bsc\"; // Default\n      logger.debug(`No from chain detected, defaulting to ${fromChain}`);\n    }\n    \n    // Determine toChain\n    if (directToChain) {\n      toChain = directToChain as SupportedChain;\n      logger.debug(`Using to chain directly extracted from prompt: ${toChain}`);\n    } else if (content.toChain && typeof content.toChain === 'string') {\n      toChain = content.toChain as SupportedChain;\n      logger.debug(`Using to chain from generated content: ${toChain}`);\n    } else {\n      toChain = fromChain === \"bsc\" ? \"opBNB\" : \"bsc\"; // Default to opposite chain\n      logger.debug(`No to chain detected, defaulting to ${toChain}`);\n    }\n    \n    // Determine fromToken (can be undefined for native BNB)\n    if (directFromToken) {\n      fromToken = directFromToken.toUpperCase();\n      logger.debug(`Using from token directly extracted from prompt: ${fromToken}`);\n    } else if (content.fromToken) {\n      fromToken = convertNullStringToUndefined(content.fromToken as string);\n      if (fromToken) {\n        logger.debug(`Using from token from generated content: ${fromToken}`);\n      } else {\n        logger.debug(\"Content contained null/invalid fromToken, using undefined (native BNB)\");\n      }\n    }\n    \n    // Determine toToken (only needed for ERC20 tokens from BSC to opBNB)\n    if (content.toToken) {\n      toToken = convertNullStringToUndefined(content.toToken as string);\n      if (toToken) {\n        logger.debug(`Using to token from generated content: ${toToken}`);\n      } else {\n        logger.debug(\"Content contained null/invalid toToken, using undefined\");\n      }\n    }\n    \n    // For ERC20 tokens from BSC to opBNB, toToken is required\n    if (fromChain === \"bsc\" && fromToken && fromToken !== \"BNB\" && !toToken) {\n      logger.error(\"Missing destination token address for ERC20 bridge\");\n      callback?.({\n        text: \"Cannot bridge ERC20 token from BSC to opBNB without destination token address. Please provide the token address on opBNB.\",\n        content: { error: \"Missing destination token address\" },\n      });\n      return false;\n    }\n    \n    // Determine toAddress (optional)\n    if (directToAddress?.startsWith(\"0x\")) {\n      toAddress = directToAddress as `0x${string}`;\n      logger.debug(`Using to address directly extracted from prompt: ${toAddress}`);\n    } else if (content.toAddress) {\n      const addressValue = convertNullStringToUndefined(content.toAddress as string);\n      if (addressValue?.startsWith(\"0x\")) {\n        toAddress = addressValue as `0x${string}`;\n        logger.debug(`Using to address from generated content: ${toAddress}`);\n      } else {\n        logger.debug(\"Content contained null/invalid toAddress, using undefined\");\n      }\n    }\n    \n    // Determine amount\n    if (directAmount) {\n      amount = directAmount;\n      logger.debug(`Using amount directly extracted from prompt: ${amount}`);\n    } else if (content.amount && \n      (typeof content.amount === 'string' || typeof content.amount === 'number')) {\n      amount = String(content.amount);\n      logger.debug(`Using amount from generated content: ${amount}`);\n    } else {\n      amount = \"0.001\"; // Default small amount\n      logger.debug(`No amount detected, defaulting to ${amount}`);\n    }\n\n    const walletProvider = initWalletProvider(runtime);\n    const action = new BridgeAction(walletProvider);\n    \n    // Convert token strings to Address type if they start with 0x\n    let fromTokenAddress: `0x${string}` | undefined = undefined;\n    if (fromToken?.startsWith(\"0x\")) {\n      fromTokenAddress = fromToken as `0x${string}`;\n    }\n    \n    let toTokenAddress: `0x${string}` | undefined = undefined;\n    if (toToken?.startsWith(\"0x\")) {\n      toTokenAddress = toToken as `0x${string}`;\n    }\n    \n    const bridgeParams: BridgeParams = {\n      fromChain,\n      toChain,\n      fromToken: fromTokenAddress,\n      toToken: toTokenAddress,\n      amount,\n      toAddress,\n    };\n    \n    logger.debug(\"Final bridge params:\", JSON.stringify(bridgeParams, null, 2));\n    \n    try {\n      logger.debug(\"Calling bridge with params:\", JSON.stringify(bridgeParams, null, 2));\n      const bridgeResp = await action.bridge(bridgeParams);\n      \n      // Get explorer URLs for the source chain\n      const explorer = EXPLORERS[bridgeResp.fromChain.toUpperCase() as keyof typeof EXPLORERS];\n      const txExplorerUrl = explorer && bridgeResp.txHash \n        ? `${explorer.url}/tx/${bridgeResp.txHash}` \n        : null;\n      const walletExplorerUrl = explorer && bridgeResp.recipient\n        ? `${explorer.url}/address/${bridgeResp.recipient}`\n        : null;\n      \n      // Create enhanced response with additional information\n      const textResponse = `Successfully bridged ${bridgeResp.amount} ${bridgeResp.fromToken} from ${bridgeResp.fromChain} to ${bridgeResp.toChain}\\nTransaction Hash: ${bridgeResp.txHash}${\n        txExplorerUrl ? `\\n\\nView transaction: ${txExplorerUrl}` : \"\"\n      }${walletExplorerUrl ? `\\nView wallet: ${walletExplorerUrl}` : \"\"}\\n\\nNote: Bridge transactions may take 10-20 minutes to complete.`;\n      \n      callback?.({\n        text: textResponse,\n        content: { \n          ...bridgeResp,\n          txExplorerUrl,\n          walletExplorerUrl\n        },\n      });\n      return true;\n    } catch (error: unknown) {\n      const errorObj = error as Error;\n      logger.error(\"Error during bridge:\", errorObj.message || String(error));\n      \n      // Log the entire error object for diagnosis\n      try {\n        logger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n      } catch (e) {\n        logger.error(\"Error object not serializable, logging properties individually:\");\n        if (errorObj && typeof errorObj === 'object') {\n          // Convert to unknown first, then to a safer type for indexing\n          const errorAsRecord = Object.entries(errorObj as unknown as Record<string, unknown>)\n            .reduce((acc, [key, value]) => {\n              acc[key] = value;\n              return acc;\n            }, {} as Record<string, unknown>);\n            \n          for (const [key, value] of Object.entries(errorAsRecord)) {\n            try {\n              logger.error(`${key}:`, value);\n            } catch (e) {\n              logger.error(`${key}: [Error serializing property]`);\n            }\n          }\n        }\n      }\n      \n      // Provide more user-friendly error messages\n      let errorMessage = errorObj.message || String(error);\n      \n      if (typeof errorMessage === 'string') {\n        if (errorMessage.includes(\"insufficient funds\")) {\n          errorMessage = \"Insufficient funds for the bridge operation. Please check your balance and try with a smaller amount.\";\n        } else if (errorMessage.includes(\"user rejected\")) {\n          errorMessage = \"Transaction was rejected. Please try again if you want to proceed with the bridge operation.\";\n        } else if (errorMessage.includes(\"token address on opBNB is required\")) {\n          errorMessage = \"When bridging ERC20 tokens from BSC to opBNB, you must specify the token address on opBNB.\";\n        } else if (errorMessage.includes(\"Unsupported bridge direction\")) {\n          errorMessage = \"Only bridges between BSC and opBNB are supported. Valid directions are BSC→opBNB and opBNB→BSC.\";\n        }\n      }\n      \n      callback?.({\n        text: `Bridge failed: ${errorMessage}`,\n        content: { error: errorMessage },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Bridge 0.001 BNB from BSC to opBNB\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you bridge 0.001 BNB from BSC to opBNB\",\n          actions: [\"BRIDGE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Send 0.001 BNB from opBNB back to BSC\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you bridge 0.001 BNB from opBNB to BSC\",\n          actions: [\"BRIDGE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Bridge ERC20 token 0x1234... from BSC to opBNB. The destination token address is 0x5678...\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you bridge your ERC20 token from BSC to opBNB\",\n          actions: [\"BRIDGE_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}; ","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport { type Address, formatEther, parseEther, erc20Abi } from \"viem\";\n\nimport {\n  bnbWalletProvider,\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { stakeTemplate } from \"../templates\";\nimport { ListaDaoAbi, type StakeParams, type StakeResponse, type SupportedChain } from \"../types\";\nimport { EXPLORERS } from \"../constants\";\n\nexport { stakeTemplate };\n\n/**\n * StakeAction class - Handles staking operations on BNB Smart Chain\n * \n * This class implements the core functionality for staking BNB, \n * withdrawing staked tokens, and claiming rewards through Lista DAO.\n */\nexport class StakeAction {\n  private readonly LISTA_DAO =\n    \"0x1adB950d8bB3dA4bE104211D5AB038628e477fE6\" as const;\n  private readonly SLIS_BNB =\n    \"0xB0b84D294e0C75A6abe60171b70edEb2EFd14A1B\" as const;\n\n  /**\n   * Creates a new StakeAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   */\n  constructor(private walletProvider: WalletProvider) {}\n\n  /**\n   * Execute a staking operation with the provided parameters\n   * \n   * @param params - Stake parameters including chain, action, and optional amount\n   * @returns Stake response with operation result\n   * @throws Error if stake operation fails\n   */\n  async stake(params: StakeParams): Promise<StakeResponse> {\n    logger.debug(\"Starting stake action with params:\", JSON.stringify(params, null, 2));\n    \n    // Validate parameters\n    this.validateStakeParams(params);\n    logger.debug(\"After validation, stake params:\", JSON.stringify(params, null, 2));\n\n    // Switch to BSC chain (only supported chain for staking)\n    logger.debug(\"Switching to BSC chain for staking\");\n    this.walletProvider.switchChain(\"bsc\");\n\n    // Log contracts being used\n    logger.debug(`Using Lista DAO contract: ${this.LISTA_DAO}`);\n    logger.debug(`Using slisBNB token contract: ${this.SLIS_BNB}`);\n    \n    // Get wallet address\n    const walletAddress = this.walletProvider.getAddress();\n    logger.debug(`Wallet address: ${walletAddress}`);\n\n    // Execute the requested action\n    logger.debug(`Executing stake action: ${params.action}`);\n    const actions = {\n      deposit: async () => {\n        if (!params.amount) {\n          throw new Error(\"Amount is required for deposit\");\n        }\n        logger.debug(`Depositing ${params.amount} BNB to Lista DAO`);\n        return await this.doDeposit(params.amount);\n      },\n      withdraw: async () => {\n        logger.debug(`Withdrawing ${params.amount || 'all'} slisBNB from Lista DAO`);\n        return await this.doWithdraw(params.amount);\n      },\n      claim: async () => {\n        logger.debug(\"Claiming unlocked BNB from Lista DAO\");\n        return await this.doClaim();\n      },\n    };\n    \n    try {\n      const resp = await actions[params.action]();\n      logger.debug(`Stake action completed successfully: ${resp}`);\n      \n      // Extract txHash from the response if present\n      const txHash = resp.includes(\"Transaction Hash:\") \n        ? resp.match(/Transaction Hash: (0x[a-fA-F0-9]{64})/)?.[1] \n        : undefined;\n      \n      return { \n        response: resp,\n        txHash: txHash as `0x${string}` | undefined,\n        action: params.action,\n        amount: params.amount\n      };\n    } catch (error) {\n      logger.error(`Error executing stake action ${params.action}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validates and normalizes stake parameters\n   * \n   * @param params - The parameters to validate and normalize\n   * @throws Error if parameters are invalid\n   */\n  validateStakeParams(params: StakeParams) {\n    logger.debug(`Validating stake params: chain=${params.chain}, action=${params.action}, amount=${params.amount}`);\n    \n    // Validate chain\n    if (!params.chain) {\n      logger.debug(\"No chain specified, defaulting to bsc\");\n      params.chain = \"bsc\";\n    } else if (params.chain !== \"bsc\") {\n      logger.error(`Unsupported chain for staking: ${params.chain}`);\n      throw new Error(\"Only BSC mainnet is supported for staking\");\n    }\n\n    // Validate action\n    if (!params.action) {\n      logger.error(\"No action specified for staking\");\n      throw new Error(\"Action is required for staking. Use 'deposit', 'withdraw', or 'claim'\");\n    }\n    \n    const validActions = [\"deposit\", \"withdraw\", \"claim\"];\n    if (!validActions.includes(params.action)) {\n      logger.error(`Invalid staking action: ${params.action}`);\n      throw new Error(`Invalid staking action: ${params.action}. Valid actions are: ${validActions.join(\", \")}`);\n    }\n\n    // Validate amount for deposit and withdraw\n    if (params.action === \"deposit\" && !params.amount) {\n      logger.error(\"Amount is required for deposit\");\n      throw new Error(\"Amount is required for deposit\");\n    }\n\n    if (params.action === \"withdraw\" && !params.amount) {\n      logger.debug(\"No amount specified for withdraw, will withdraw all slisBNB\");\n    }\n    \n    // Validate amount format if provided\n    if (params.amount) {\n      try {\n        const amountValue = Number.parseFloat(params.amount);\n        if (Number.isNaN(amountValue) || amountValue <= 0) {\n          logger.error(`Invalid amount: ${params.amount} (must be a positive number)`);\n          throw new Error(`Invalid amount: ${params.amount}. Please provide a positive number.`);\n        }\n        logger.debug(`Amount validation passed: ${params.amount}`);\n      } catch (error) {\n        logger.error(`Failed to parse amount: ${params.amount}`, error);\n        throw new Error(`Invalid amount format: ${params.amount}. Please provide a valid number.`);\n      }\n    }\n  }\n\n  /**\n   * Deposits BNB into Lista DAO\n   * \n   * @param amount - Amount of BNB to deposit\n   * @returns Success message with transaction details\n   * @throws Error if deposit fails\n   */\n  async doDeposit(amount: string): Promise<string> {\n    logger.debug(`Starting deposit of ${amount} BNB to Lista DAO`);\n    \n    const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n    const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n    const account = walletClient.account;\n    \n    if (!account) {\n      logger.error(\"Wallet account not found\");\n      throw new Error(\"Wallet account not found\");\n    }\n    \n    logger.debug(`Using account address: ${account.address}`);\n    logger.debug(`Preparing to deposit ${amount} BNB with parseEther value: ${parseEther(amount)}`);\n\n    try {\n      // Simulate contract call before execution to catch any potential errors\n      logger.debug(\"Simulating deposit transaction\");\n      const { request } = await publicClient.simulateContract({\n        account: this.walletProvider.getAccount(),\n        address: this.LISTA_DAO,\n        abi: ListaDaoAbi,\n        functionName: \"deposit\",\n        value: parseEther(amount),\n      });\n      \n      // Execute the deposit transaction\n      logger.debug(\"Executing deposit transaction\");\n      const txHash = await walletClient.writeContract(request);\n      logger.debug(`Deposit transaction submitted with hash: ${txHash}`);\n      \n      // Wait for transaction confirmation\n      logger.debug(\"Waiting for transaction confirmation\");\n      await publicClient.waitForTransactionReceipt({\n        hash: txHash,\n      });\n      logger.debug(`Transaction confirmed: ${txHash}`);\n\n      // Check the updated slisBNB balance\n      logger.debug(\"Checking updated slisBNB balance\");\n      const slisBNBBalance = await publicClient.readContract({\n        address: this.SLIS_BNB,\n        abi: erc20Abi,\n        functionName: \"balanceOf\",\n        args: [account.address],\n      });\n      \n      const formattedBalance = formatEther(slisBNBBalance);\n      logger.debug(`Updated slisBNB balance: ${formattedBalance}`);\n\n      return `Successfully deposited ${amount} BNB. You now hold ${formattedBalance} slisBNB. \\nTransaction Hash: ${txHash}`;\n    } catch (error: unknown) {\n      logger.error(\"Error during deposit operation:\", error);\n      \n      // Provide more specific error messages\n      const errorObj = error as Error;\n      const errorMessage = errorObj.message || String(error);\n      \n      if (errorMessage.includes(\"insufficient funds\")) {\n        throw new Error(`Insufficient funds to deposit ${amount} BNB. Please check your balance.`);\n      }\n      \n      if (errorMessage.includes(\"user rejected\")) {\n        throw new Error(\"Transaction rejected by user.\");\n      }\n      \n      // Re-throw the original error if no specific handling\n      throw error;\n    }\n  }\n\n  /**\n   * Withdraws slisBNB from Lista DAO\n   * \n   * @param amount - Optional amount of slisBNB to withdraw (if undefined, withdraws all)\n   * @returns Success message with transaction details\n   * @throws Error if withdrawal fails\n   */\n  async doWithdraw(amount?: string): Promise<string> {\n    logger.debug(`Starting withdraw of ${amount || 'all'} slisBNB from Lista DAO`);\n    \n    const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n    const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n    const account = walletClient.account;\n    \n    if (!account) {\n      logger.error(\"Wallet account not found\");\n      throw new Error(\"Wallet account not found\");\n    }\n    \n    logger.debug(`Using account address: ${account.address}`);\n\n    try {\n      // If amount is not provided, withdraw all slisBNB\n      let amountToWithdraw: bigint;\n      if (!amount) {\n        logger.debug(\"No amount specified, checking total slisBNB balance\");\n        amountToWithdraw = await publicClient.readContract({\n          address: this.SLIS_BNB,\n          abi: erc20Abi,\n          functionName: \"balanceOf\",\n          args: [account.address],\n        });\n        logger.debug(`Total slisBNB balance to withdraw: ${formatEther(amountToWithdraw)}`);\n      } else {\n        amountToWithdraw = parseEther(amount);\n        logger.debug(`Withdrawing specific amount: ${amount} slisBNB (${amountToWithdraw} wei)`);\n      }\n      \n      // Check if there's anything to withdraw\n      if (amountToWithdraw <= 0n) {\n        logger.error(`No slisBNB to withdraw (amount: ${formatEther(amountToWithdraw)})`);\n        throw new Error(\"No slisBNB tokens available to withdraw\");\n      }\n\n      // Check slisBNB allowance\n      logger.debug(\"Checking slisBNB allowance for Lista DAO contract\");\n      const allowance = await this.walletProvider.checkERC20Allowance(\n        \"bsc\",\n        this.SLIS_BNB,\n        account.address,\n        this.LISTA_DAO\n      );\n      logger.debug(`Current allowance: ${formatEther(allowance)}`);\n      \n      if (allowance < amountToWithdraw) {\n        const neededAllowance = amountToWithdraw - allowance;\n        logger.debug(`Increasing slisBNB allowance by ${formatEther(neededAllowance)}`);\n        \n        const txHash = await this.walletProvider.approveERC20(\n          \"bsc\",\n          this.SLIS_BNB,\n          this.LISTA_DAO,\n          amountToWithdraw\n        );\n        logger.debug(`Allowance approval transaction submitted with hash: ${txHash}`);\n        \n        await publicClient.waitForTransactionReceipt({\n          hash: txHash,\n        });\n        logger.debug(\"Allowance approval transaction confirmed\");\n      } else {\n        logger.debug(\"Sufficient allowance already granted\");\n      }\n\n      // Simulate the withdraw request\n      logger.debug(\"Simulating withdraw request transaction\");\n      const { request } = await publicClient.simulateContract({\n        account: this.walletProvider.getAccount(),\n        address: this.LISTA_DAO,\n        abi: ListaDaoAbi,\n        functionName: \"requestWithdraw\",\n        args: [amountToWithdraw],\n      });\n      \n      // Execute the withdraw request\n      logger.debug(\"Executing withdraw request transaction\");\n      const txHash = await walletClient.writeContract(request);\n      logger.debug(`Withdraw request transaction submitted with hash: ${txHash}`);\n      \n      // Wait for transaction confirmation\n      logger.debug(\"Waiting for transaction confirmation\");\n      await publicClient.waitForTransactionReceipt({\n        hash: txHash,\n      });\n      logger.debug(`Transaction confirmed: ${txHash}`);\n\n      // Check remaining slisBNB balance\n      logger.debug(\"Checking remaining slisBNB balance\");\n      const slisBNBBalance = await publicClient.readContract({\n        address: this.SLIS_BNB,\n        abi: erc20Abi,\n        functionName: \"balanceOf\",\n        args: [account.address],\n      });\n      \n      const formattedBalance = formatEther(slisBNBBalance);\n      logger.debug(`Remaining slisBNB balance: ${formattedBalance}`);\n\n      return `Successfully requested withdrawal of ${amount || formatEther(amountToWithdraw)} slisBNB. You have ${formattedBalance} slisBNB left. \nYou can claim your BNB in 7-14 days using the 'claim' action.\nTransaction Hash: ${txHash}`;\n    } catch (error: unknown) {\n      logger.error(\"Error during withdraw operation:\", error);\n      \n      // Provide more specific error messages\n      const errorObj = error as Error;\n      const errorMessage = errorObj.message || String(error);\n      \n      if (errorMessage.includes(\"insufficient funds\") || errorMessage.includes(\"insufficient balance\")) {\n        throw new Error(\"Insufficient slisBNB balance to withdraw. Please check your balance.\");\n      }\n      \n      if (errorMessage.includes(\"user rejected\")) {\n        throw new Error(\"Transaction rejected by user.\");\n      }\n      \n      // Re-throw the original error if no specific handling\n      throw error;\n    }\n  }\n\n  /**\n   * Claims unlocked BNB from previous withdrawals\n   * \n   * @returns Success message with amount claimed\n   * @throws Error if claim fails\n   */\n  async doClaim(): Promise<string> {\n    logger.debug(\"Starting claim operation for unlocked BNB from Lista DAO\");\n    \n    const publicClient = this.walletProvider.getPublicClient(\"bsc\");\n    const walletClient = this.walletProvider.getWalletClient(\"bsc\");\n    const account = walletClient.account;\n    \n    if (!account) {\n      logger.error(\"Wallet account not found\");\n      throw new Error(\"Wallet account not found\");\n    }\n    \n    logger.debug(`Using account address: ${account.address}`);\n\n    try {\n      // Get user's withdrawal requests\n      logger.debug(\"Fetching user withdrawal requests\");\n      const requests = await publicClient.readContract({\n        address: this.LISTA_DAO,\n        abi: ListaDaoAbi,\n        functionName: \"getUserWithdrawalRequests\",\n        args: [account.address],\n      });\n      \n      logger.debug(`Found ${requests.length} withdrawal requests`);\n      \n      if (requests.length === 0) {\n        logger.warn(\"No withdrawal requests found for claiming\");\n        return `No withdrawal requests found to claim. You need to request a withdrawal first using the 'withdraw' action.`;\n      }\n\n      let totalClaimed = 0n;\n      let claimedCount = 0;\n      let lastTxHash = \"\";\n      \n      // Process each withdrawal request\n      for (let idx = 0; idx < requests.length; idx++) {\n        logger.debug(`Checking request #${idx} status`);\n        const [isClaimable, amount] = await publicClient.readContract({\n          address: this.LISTA_DAO,\n          abi: ListaDaoAbi,\n          functionName: \"getUserRequestStatus\",\n          args: [account.address, BigInt(idx)],\n        });\n\n        if (isClaimable) {\n          logger.debug(`Request #${idx} is claimable, amount: ${formatEther(amount)} BNB`);\n          \n          // Simulate the claim transaction\n          logger.debug(`Simulating claim transaction for request #${idx}`);\n          const { request } = await publicClient.simulateContract({\n            account: this.walletProvider.getAccount(),\n            address: this.LISTA_DAO,\n            abi: ListaDaoAbi,\n            functionName: \"claimWithdraw\",\n            args: [BigInt(idx)],\n          });\n\n          // Execute the claim transaction\n          logger.debug(`Executing claim transaction for request #${idx}`);\n          const txHash = await walletClient.writeContract(request);\n          logger.debug(`Claim transaction submitted with hash: ${txHash}`);\n          \n          // Wait for transaction confirmation\n          logger.debug(\"Waiting for transaction confirmation\");\n          await publicClient.waitForTransactionReceipt({\n            hash: txHash,\n          });\n          logger.debug(`Transaction confirmed: ${txHash}`);\n\n          totalClaimed += amount;\n          claimedCount++;\n          lastTxHash = txHash;\n        } else {\n          logger.debug(`Request #${idx} is not claimable yet, skipping`);\n          break; // Requests are ordered, so once we hit a non-claimable one, we can stop\n        }\n      }\n\n      const formattedTotal = formatEther(totalClaimed);\n      logger.debug(`Total claimed: ${formattedTotal} BNB from ${claimedCount} requests`);\n      \n      if (claimedCount === 0) {\n        return \"No claimable withdrawals found. Withdrawal requests typically need 7-14 days to become claimable.\";\n      }\n\n      return `Successfully claimed ${formattedTotal} BNB from ${claimedCount} withdrawal request(s).\nTransaction Hash: ${lastTxHash}`;\n    } catch (error: unknown) {\n      logger.error(\"Error during claim operation:\", error);\n      \n      // Provide more specific error messages\n      const errorObj = error as Error;\n      const errorMessage = errorObj.message || String(error);\n      \n      if (errorMessage.includes(\"user rejected\")) {\n        throw new Error(\"Transaction rejected by user.\");\n      }\n      \n      // Re-throw the original error if no specific handling\n      throw error;\n    }\n  }\n}\n\n/**\n * Action for staking BNB on Lista DAO\n * \n * This action handles deposit, withdraw, and claim operations for staking\n * BNB tokens on the Lista DAO platform on BNB Smart Chain.\n */\nexport const stakeAction: Action = {\n  name: \"STAKE_BNB\",\n  similes: [\n    \"DELEGATE_BNB\", \n    \"DEPOSIT_BNB\", \n    \"UNDELEGATE_BNB\", \n    \"UNSTAKE_BNB\", \n    \"WITHDRAW_BNB\", \n    \"CLAIM_BNB\"\n  ],\n  description: \"Stake BNB, withdraw staked tokens, or claim rewards from Lista DAO on BNB Smart Chain\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing STAKE_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n    // Extract prompt text for stake action analysis\n    const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n    logger.debug(`Raw prompt text: \"${promptText}\"`);\n    \n    // Analyze prompt to detect stake actions directly\n    const promptLower = promptText.toLowerCase();\n    \n    // Look for stake patterns in the prompt\n    const stakeRegex = /(?:stake|deposit)\\s+([0-9.]+)\\s+(?:bnb|slisBNB)\\s+(?:on|in|to|at)?(?:\\s+lista\\s+dao)?(?:\\s+on)?\\s+(?:bsc|binance)/i;\n    const withdrawRegex = /(?:withdraw|unstake|undelegate)\\s+([0-9.]+)\\s+(?:bnb|slisBNB)\\s+(?:from|on)?\\s+(?:lista\\s+dao)?(?:\\s+on)?\\s+(?:bsc|binance)/i;\n    const claimRegex = /claim\\s+(?:bnb|unlocked\\s+bnb|rewards?)(?:\\s+from)?\\s+(?:lista\\s+dao)?(?:\\s+on)?\\s+(?:bsc|binance)/i;\n    \n    let directAction: string | null = null;\n    let directAmount: string | null = null;\n    \n    // Try to match stake pattern\n    let match = promptText.match(stakeRegex);\n    if (match && match.length >= 2) {\n      directAction = \"deposit\";\n      directAmount = match[1] || null;\n      logger.debug(`Directly extracted deposit action - Amount: ${directAmount}`);\n    } else {\n      // Try to match withdraw pattern\n      match = promptText.match(withdrawRegex);\n      if (match && match.length >= 2) {\n        directAction = \"withdraw\";\n        directAmount = match[1] || null;\n        logger.debug(`Directly extracted withdraw action - Amount: ${directAmount}`);\n      } else {\n        // Try to match claim pattern\n        match = promptText.match(claimRegex);\n        if (match) {\n          directAction = \"claim\";\n          logger.debug(\"Directly extracted claim action\");\n        }\n      }\n    }\n    \n    // Check for action keywords\n    if (!directAction) {\n      if (promptLower.includes(\"stake\") || promptLower.includes(\"deposit\")) {\n        directAction = \"deposit\";\n        logger.debug(\"Detected stake/deposit action from keywords\");\n      } else if (promptLower.includes(\"withdraw\") || promptLower.includes(\"unstake\") || promptLower.includes(\"undelegate\")) {\n        directAction = \"withdraw\";\n        logger.debug(\"Detected withdraw/unstake action from keywords\");\n      } else if (promptLower.includes(\"claim\")) {\n        directAction = \"claim\";\n        logger.debug(\"Detected claim action from keywords\");\n      }\n    }\n    \n    // Extract numeric values if not already found\n    if (!directAmount && directAction !== \"claim\") {\n      const amountRegex = /([0-9]+(?:\\.[0-9]+)?)/;\n      const amountMatch = promptText.match(amountRegex);\n      if (amountMatch && amountMatch.length >= 2) {\n        directAmount = amountMatch[1] || null;\n        logger.debug(`Extracted amount from prompt: ${directAmount}`);\n      }\n    }\n    \n    // Store prompt analysis results\n    const promptAnalysis = {\n      directAction,\n      directAmount,\n      containsBNB: promptLower.includes(\"bnb\"),\n      containsListaDAO: promptLower.includes(\"lista\") || promptLower.includes(\"dao\"),\n      containsBSC: promptLower.includes(\"bsc\") || promptLower.includes(\"binance\")\n    };\n    \n    logger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n    // Validate stake\n    if (!(message.content.source === \"direct\" || message.content.source === \"client_chat:user\")) {\n      logger.warn(\"Stake rejected: invalid source:\", message.content.source);\n      callback?.({\n        text: \"I can't do that for you.\",\n        content: { error: \"Stake not allowed\" },\n      });\n      return false;\n    }\n    logger.debug(\"Source validation passed\");\n\n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n    \n    try {\n      // Only create walletInfo if state exists\n      if (state) {\n        state.walletInfo = await bnbWalletProvider.get(\n          runtime,\n          message,\n          currentState\n        );\n        logger.debug(\"Wallet info:\", state.walletInfo);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Error getting wallet info:\", errorMessage);\n      callback?.({\n        text: `Unable to access wallet: ${errorMessage}`,\n        content: { error: errorMessage },\n      });\n      return false;\n    }\n\n    // Use runtime model to get stake parameters\n    const stakePrompt = {\n      template: stakeTemplate,\n      state: currentState\n    };\n\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(stakePrompt),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Parse the JSON output\n    let content: Record<string, unknown> = {};\n    try {\n      content = typeof mlOutput === 'string' ? JSON.parse(mlOutput) : mlOutput as Record<string, unknown>;\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", mlOutput);\n    }\n    \n    logger.debug(\"Generated stake content:\", JSON.stringify(content, null, 2));\n    \n    // PRIORITY ORDER FOR ACTION DETERMINATION:\n    // 1. Direct match from prompt text (most reliable)\n    // 2. Action specified in model-generated content\n    // 3. Default to deposit\n    \n    let stakeAction: string;\n    let amount: string | undefined;\n    \n    // 1. First priority: Use directly extracted action from prompt if available\n    if (directAction) {\n      stakeAction = directAction;\n      logger.debug(`Using action directly extracted from prompt: ${stakeAction}`);\n    }\n    // 2. Second priority: Use action from content if available\n    else if (content.action && typeof content.action === 'string') {\n      stakeAction = content.action;\n      logger.debug(`Using action from generated content: ${stakeAction}`);\n    }\n    // 3. Default fallback\n    else {\n      stakeAction = \"deposit\"; // Default action\n      logger.debug(\"No action detected, defaulting to deposit\");\n    }\n    \n    // Determine amount (if needed)\n    if (stakeAction !== \"claim\") {\n      // For deposit and withdraw, amount is needed\n      if (directAmount) {\n        amount = directAmount;\n        logger.debug(`Using amount directly extracted from prompt: ${amount}`);\n      } else if (content.amount && \n        (typeof content.amount === 'string' || typeof content.amount === 'number')) {\n        amount = String(content.amount);\n        logger.debug(`Using amount from generated content: ${amount}`);\n      } else if (stakeAction === \"deposit\") {\n        amount = \"0.001\"; // Default small amount for deposit\n        logger.debug(`No amount detected for deposit, defaulting to ${amount}`);\n      }\n      // For withdraw, undefined amount is valid (withdraws all)\n    }\n\n    const walletProvider = initWalletProvider(runtime);\n    const action = new StakeAction(walletProvider);\n    const paramOptions: StakeParams = {\n      chain: \"bsc\" as SupportedChain, // Only BSC is supported for staking\n      action: stakeAction as \"deposit\" | \"withdraw\" | \"claim\",\n      amount: amount,\n    };\n    \n    logger.debug(\"Final stake options:\", JSON.stringify(paramOptions, null, 2));\n    \n    try {\n      logger.debug(\"Calling stake with params:\", JSON.stringify(paramOptions, null, 2));\n      const stakeResp = await action.stake(paramOptions);\n      \n      // Get block explorer URL for the transaction if available\n      let txExplorerUrl: string | undefined = undefined;\n      let walletExplorerUrl: string | undefined = undefined;\n      \n      if (stakeResp.txHash) {\n        // BSC is the only supported chain for staking\n        const explorerInfo = EXPLORERS.BSC;\n        txExplorerUrl = `${explorerInfo.url}/tx/${stakeResp.txHash}`;\n        walletExplorerUrl = `${explorerInfo.url}/address/${walletProvider.getAddress()}`;\n        \n        logger.debug(`Transaction explorer URL: ${txExplorerUrl}`);\n        logger.debug(`Wallet explorer URL: ${walletExplorerUrl}`);\n      }\n      \n      // Create response with additional information\n      const textResponse = `${stakeResp.response}${\n        txExplorerUrl ? `\\n\\nView transaction: ${txExplorerUrl}` : \"\"\n      }${walletExplorerUrl ? `\\nView wallet: ${walletExplorerUrl}` : \"\"}`;\n      \n      callback?.({\n        text: textResponse,\n        content: { \n          ...stakeResp,\n          txExplorerUrl,\n          walletExplorerUrl\n        },\n      });\n\n      return true;\n    } catch (error: unknown) {\n      const errorObj = error as Error;\n      logger.error(\"Error during stake:\", errorObj.message || String(error));\n      \n      // Log the entire error object for diagnosis\n      try {\n        logger.error(\"Full error details:\", JSON.stringify(error, null, 2));\n      } catch (e) {\n        logger.error(\"Error object not serializable, logging properties individually:\");\n        if (errorObj && typeof errorObj === 'object') {\n          // Convert to unknown first, then to a safer type for indexing\n          const errorAsRecord = Object.entries(errorObj as unknown as Record<string, unknown>)\n            .reduce((acc, [key, value]) => {\n              acc[key] = value;\n              return acc;\n            }, {} as Record<string, unknown>);\n            \n          for (const [key, value] of Object.entries(errorAsRecord)) {\n            try {\n              logger.error(`${key}:`, value);\n            } catch (e) {\n              logger.error(`${key}: [Error serializing property]`);\n            }\n          }\n        }\n      }\n      \n      // Provide more user-friendly error messages\n      let errorMessage = errorObj.message || String(error);\n      \n      if (typeof errorMessage === 'string') {\n        if (errorMessage.includes(\"insufficient funds\")) {\n          errorMessage = \"Insufficient funds for the stake operation. Please check your balance and try with a smaller amount.\";\n        } else if (errorMessage.includes(\"user rejected\")) {\n          errorMessage = \"Transaction was rejected. Please try again if you want to proceed with the stake operation.\";\n        } else if (errorMessage.includes(\"No withdrawal requests\")) {\n          errorMessage = \"No withdrawal requests found to claim. You need to request a withdrawal first using the 'withdraw' action.\";\n        }\n      }\n      \n      callback?.({\n        text: `Stake failed: ${errorMessage}`,\n        content: { \n          error: errorMessage,\n          action: paramOptions.action,\n          amount: paramOptions.amount \n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Stake 0.001 BNB on BSC\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you stake 0.001 BNB to Lista DAO on BSC\",\n          actions: [\"STAKE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Deposit 0.001 BNB to Lista DAO\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you deposit 0.001 BNB to Lista DAO on BSC\",\n          actions: [\"STAKE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Undelegate 0.001 slisBNB on BSC\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you undelegate 0.001 slisBNB from Lista DAO on BSC\",\n          actions: [\"STAKE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Withdraw 0.001 slisBNB from Lista DAO\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you withdraw 0.001 slisBNB from Lista DAO on BSC\",\n          actions: [\"STAKE_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Claim unlocked BNB from Lista DAO\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you claim unlocked BNB from Lista DAO on BSC\",\n          actions: [\"STAKE_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}; ","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport type { Hex, Address } from \"viem\";\nimport WebSocket, { type ClientOptions } from \"ws\";\n\nimport {\n  bnbWalletProvider,\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { faucetTemplate } from \"../templates\";\nimport type { FaucetResponse, FaucetParams } from \"../types\";\nimport { EXPLORERS } from \"../constants\";\n\nexport { faucetTemplate };\n\n/**\n * FaucetAction class - Handles retrieving test tokens from the BSC Testnet faucet\n * \n * This class implements the core functionality for requesting test tokens through\n * the BSC Testnet faucet WebSocket API.\n */\nexport class FaucetAction {\n  /**\n   * List of supported test tokens available from the faucet\n   */\n  private readonly SUPPORTED_TOKENS: string[] = [\n    \"BNB\",\n    \"BTC\",\n    \"BUSD\",\n    \"DAI\",\n    \"ETH\",\n    \"USDC\",\n  ] as const;\n\n  /**\n   * WebSocket URL for the BSC Testnet faucet API\n   */\n  private readonly FAUCET_URL = \"wss://testnet.bnbchain.org/faucet-smart/api\";\n\n  /**\n   * Creates a new FaucetAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   */\n  constructor(private walletProvider: WalletProvider) {}\n\n  /**\n   * Request test tokens from the BSC Testnet faucet\n   * \n   * @param params - Parameters for the faucet request including token and recipient address\n   * @returns Promise resolving to faucet response with transaction details\n   * @throws Error if faucet request fails\n   */\n  async faucet(params: FaucetParams): Promise<FaucetResponse> {\n    logger.debug(\"Faucet params:\", JSON.stringify(params, null, 2));\n    \n    try {\n      await this.validateAndNormalizeParams(params);\n      logger.debug(\"Normalized faucet params:\", JSON.stringify(params, null, 2));\n      \n      // After validation, we know these values exist\n      if (!params.token) {\n        params.token = \"BNB\";\n        logger.debug(\"No token specified, defaulting to BNB\");\n      }\n      \n      if (!params.toAddress) {\n        params.toAddress = this.walletProvider.getAddress();\n        logger.debug(`No address specified, using wallet address: ${params.toAddress}`);\n      }\n\n      const resp: FaucetResponse = {\n        token: params.token,\n        recipient: params.toAddress,\n        txHash: \"0x\" as Hex,\n      };\n\n      const options: ClientOptions = {\n        headers: {\n          Connection: \"Upgrade\",\n          Upgrade: \"websocket\",\n        },\n      };\n\n      const ws = new WebSocket(this.FAUCET_URL, options);\n\n      try {\n        // Wait for connection\n        await new Promise<void>((resolve, reject) => {\n          ws.once(\"open\", () => resolve());\n          ws.once(\"error\", reject);\n        });\n\n        // Send the message\n        const message = {\n          tier: 0,\n          url: params.toAddress,\n          symbol: params.token,\n          captcha: \"noCaptchaToken\",\n        };\n        logger.debug(`Sending faucet request: ${JSON.stringify(message, null, 2)}`);\n        ws.send(JSON.stringify(message));\n\n        // Wait for response with transaction hash\n        const txHash = await new Promise<Hex>((resolve, reject) => {\n          const timeout = setTimeout(() => {\n            ws.close();\n            reject(new Error(\"Faucet request timeout\"));\n          }, 15000);\n\n          ws.on(\"message\", (data) => {\n            const response = JSON.parse(data.toString());\n            logger.debug(`Faucet response: ${JSON.stringify(response, null, 2)}`);\n\n            // First response: funding request accepted\n            if (response.success) {\n              logger.debug(\"Faucet request accepted\");\n              return;\n            }\n\n            // Second response: transaction details\n            if (response.requests?.length > 0) {\n              const hash = response.requests[0].tx.hash;\n              if (hash) {\n                clearTimeout(timeout);\n                logger.debug(`Faucet transaction hash received: ${hash}`);\n                \n                // Ensure the hash is properly formatted with 0x prefix for Hex type\n                const formattedHash = (hash.startsWith('0x') ? hash : `0x${hash}`) as Hex;\n                resolve(formattedHash);\n              }\n            }\n\n            // Handle error case\n            if (response.error) {\n              clearTimeout(timeout);\n              logger.error(`Faucet error: ${response.error}`);\n              reject(new Error(response.error));\n            }\n          });\n\n          ws.on(\"error\", (error) => {\n            clearTimeout(timeout);\n            logger.error(`WebSocket error: ${error.message}`);\n            reject(\n              new Error(`WebSocket error occurred: ${error.message}`)\n            );\n          });\n        });\n\n        resp.txHash = txHash;\n        logger.debug(`Faucet success: ${params.token} to ${params.toAddress}, tx: ${txHash}`);\n        return resp;\n      } finally {\n        ws.close();\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(`Faucet error: ${errorMessage}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Validates and normalizes faucet parameters\n   * \n   * @param params - Parameters to validate and normalize\n   * @throws Error if validation fails\n   */\n  async validateAndNormalizeParams(params: FaucetParams): Promise<void> {\n    logger.debug(\"Validating faucet params:\", JSON.stringify(params, null, 2));\n    \n    try {\n      // Token validation\n      if (!params.token) {\n        params.token = \"BNB\";\n        logger.debug(\"No token specified, defaulting to BNB\");\n      }\n      \n      if (!this.SUPPORTED_TOKENS.includes(params.token)) {\n        throw new Error(`Unsupported token: ${params.token}. Supported tokens are: ${this.SUPPORTED_TOKENS.join(', ')}`);\n      }\n      \n      // Address validation\n      if (!params.toAddress) {\n        // Use wallet's own address if none provided\n        params.toAddress = this.walletProvider.getAddress();\n        logger.debug(`No address provided, using wallet address: ${params.toAddress}`);\n        return;\n      }\n      \n      // If the address is already in the correct format, use it directly\n      if (typeof params.toAddress === 'string' && params.toAddress.startsWith(\"0x\") && params.toAddress.length === 42) {\n        logger.debug(`Using provided hex address: ${params.toAddress}`);\n        return;\n      }\n      \n      // Otherwise try to format it\n      try {\n        params.toAddress = await this.walletProvider.formatAddress(params.toAddress);\n        logger.debug(`Successfully formatted address to: ${params.toAddress}`);\n      } catch (error) {\n        logger.error(`Error formatting address: ${error instanceof Error ? error.message : String(error)}`);\n        // Fall back to wallet's own address if formatting fails\n        params.toAddress = this.walletProvider.getAddress();\n        logger.debug(`Falling back to wallet address: ${params.toAddress}`);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(`Error in validateAndNormalizeParams: ${errorMessage}`);\n      throw error;\n    }\n    \n    logger.debug(\"Normalized faucet params:\", JSON.stringify(params, null, 2));\n  }\n}\n\n/**\n * Action for requesting test tokens from the BSC Testnet faucet\n * \n * This action handles requests for test tokens (BNB, BUSD, DAI, USDC, etc.) \n * from the BSC Testnet faucet to facilitate testing on the testnet.\n */\nexport const faucetAction: Action = {\n  name: \"FAUCET_BNB\",\n  similes: [\"GET_TEST_TOKENS_BNB\", \"TEST_TOKENS_BNB\", \"TESTNET_TOKENS_BNB\"],\n  description: \"Get test tokens from the BSC Testnet faucet (BNB, BUSD, DAI, USDC, etc.)\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing FAUCET_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n\n    try {\n      // Only create walletInfo if state exists\n      if (state) {\n        state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\n        logger.debug(\"Wallet info:\", JSON.stringify(state.walletInfo, null, 2));\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Error getting wallet info:\", errorMessage);\n      callback?.({\n        text: `Unable to access wallet: ${errorMessage}`,\n        content: { error: errorMessage },\n      });\n      return false;\n    }\n\n    // Extract faucet parameters using the model\n    const templateData = {\n      template: faucetTemplate,\n      state: currentState\n    };\n\n    // Log what we're sending to the model\n    logger.debug(\"Template data sent to model:\", JSON.stringify(templateData, null, 2));\n\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(templateData),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Log the raw model output\n    logger.debug(\"Raw model output:\", mlOutput);\n\n    // Parse the JSON output, handling possible markdown formatting\n    let content: Record<string, unknown> = {};\n    try {\n      // Extract JSON if the model returned markdown-formatted JSON\n      let jsonStr = mlOutput;\n      if (typeof mlOutput === 'string') {\n        // Check if the output is wrapped in markdown code blocks\n        const jsonRegex = /```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/;\n        const match = mlOutput.match(jsonRegex);\n        \n        if (match?.[1]) {\n          // Extract the JSON string from markdown code block\n          jsonStr = match[1];\n          logger.debug(\"Extracted JSON from markdown:\", jsonStr);\n        }\n        \n        // Now parse the JSON\n        content = JSON.parse(jsonStr);\n      } else {\n        // If it's already an object, use it directly\n        content = mlOutput as Record<string, unknown>;\n      }\n      \n      logger.debug(\"Parsed faucet content:\", JSON.stringify(content, null, 2));\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", error instanceof Error ? error.message : String(error));\n      logger.error(\"Raw output that failed parsing:\", mlOutput);\n      callback?.({\n        text: \"Failed to process faucet request parameters. Please try again with a clearer request.\",\n        content: { error: \"Invalid model output format\" },\n      });\n      return false;\n    }\n\n    // Initialize wallet provider and action handler\n    const walletProvider = initWalletProvider(runtime);\n    const action = new FaucetAction(walletProvider);\n    \n    // Prepare faucet parameters with default values\n    const faucetParams: FaucetParams = {\n      token: typeof content.token === 'string' ? content.token : \"BNB\",\n      toAddress: typeof content.toAddress === 'string' && content.toAddress ? \n                content.toAddress as Address : \n                walletProvider.getAddress(),\n    };\n\n    logger.debug(\"Final faucet parameters:\", JSON.stringify(faucetParams, null, 2));\n\n    try {\n      // Execute faucet request\n      logger.debug(`Requesting ${faucetParams.token} tokens for address ${faucetParams.toAddress}`);\n      const faucetResponse = await action.faucet(faucetParams);\n      \n      // Get the block explorer URL for the transaction\n      const blockExplorerUrl = `${EXPLORERS.BSC_TESTNET.url}/tx/${faucetResponse.txHash}`;\n      logger.debug(`Block explorer URL: ${blockExplorerUrl}`);\n      \n      // Format success response with block explorer link\n      callback?.({\n        text: `Successfully requested ${faucetResponse.token} tokens from the BSC Testnet faucet.\nTransaction hash: ${faucetResponse.txHash}\nTokens will be sent to: ${faucetResponse.recipient}\nCheck on block explorer: ${blockExplorerUrl}`,\n        content: {\n          success: true,\n          token: faucetResponse.token,\n          recipient: faucetResponse.recipient,\n          txHash: faucetResponse.txHash,\n          chain: \"bscTestnet\", \n          blockExplorerUrl: blockExplorerUrl\n        },\n      });\n      \n      return true;\n    } catch (error: unknown) {\n      // Handle errors gracefully\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      logger.error(\"Error during faucet request:\", errorObj.message);\n      \n      // Provide more user-friendly error messages\n      let errorMessage = errorObj.message;\n      \n      if (errorMessage.includes(\"Invalid address\")) {\n        errorMessage = \"Failed to validate address. Please provide a valid BSC address.\";\n      } else if (errorMessage.includes(\"Unsupported token\")) {\n        // Keep the original message as it's already user-friendly\n      } else if (errorMessage.includes(\"WebSocket\")) {\n        errorMessage = \"Connection to the faucet service failed. The service may be down or experiencing issues. Please try again later.\";\n      } else if (errorMessage.includes(\"timeout\")) {\n        errorMessage = \"The faucet request timed out. Please try again later.\";\n      }\n      \n      callback?.({\n        text: `Failed to get test tokens: ${errorMessage}`,\n        content: { \n          success: false,\n          error: errorMessage,\n          requestedToken: faucetParams.token,\n          requestedAddress: faucetParams.toAddress \n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Get some USDC from the testnet faucet\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll request some test USDC tokens from the BSC Testnet faucet for you\",\n          actions: [\"FAUCET_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"I need some test BNB for development\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you get some test BNB tokens from the BSC Testnet faucet\",\n          actions: [\"FAUCET_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Can you send some testnet tokens to 0x1234567890AbCdEf1234567890AbCdEf12345678?\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll request test BNB tokens from the faucet to be sent to that address\",\n          actions: [\"FAUCET_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}; ","/**\n * Solidity Contract Compilation Utilities\n * \n * This module provides utilities for compiling Solidity smart contracts\n * using the solc compiler. It handles imports from OpenZeppelin and local files.\n */\nimport { logger } from \"@elizaos/core\";\nimport fs from \"node:fs\";\nimport { createRequire } from \"node:module\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport solc from \"solc\";\n\nconst require = createRequire(import.meta.url);\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-bnb/src/contracts\");\n\n/**\n * Interface for compilation output\n */\ninterface CompilationOutput {\n  abi: Record<string, unknown>[];\n  bytecode: string;\n}\n\n/**\n * Interface for solc compiler error\n */\ninterface SolcError {\n  type: string;\n  message: string;\n  component?: string;\n  severity?: string;\n}\n\n/**\n * Interface for compiler output\n */\ninterface SolcOutput {\n  errors?: SolcError[];\n  contracts: {\n    [file: string]: {\n      [contract: string]: {\n        abi: Record<string, unknown>[];\n        evm: {\n          bytecode: {\n            object: string;\n          };\n        };\n      };\n    };\n  };\n}\n\n/**\n * Reads contract source code from file\n * \n * @param contractPath - Path to the contract file\n * @returns Contract source code as string\n */\nfunction getContractSource(contractPath: string): string {\n  logger.debug(`Reading contract source from ${contractPath}`);\n  return fs.readFileSync(contractPath, \"utf8\");\n}\n\n/**\n * Import callback for solc compiler\n * Handles imports from OpenZeppelin and local files\n * \n * @param importPath - Path to the imported file\n * @returns Object containing file contents or error\n */\nfunction findImports(importPath: string): { contents: string } | { error: string } {\n  try {\n    logger.debug(`Resolving import: ${importPath}`);\n    \n    if (importPath.startsWith(\"@openzeppelin/\")) {\n      const modPath = require.resolve(importPath);\n      return { contents: fs.readFileSync(modPath, \"utf8\") };\n    }\n\n    const localPath = path.resolve(\"./contracts\", importPath);\n    if (fs.existsSync(localPath)) {\n      return { contents: fs.readFileSync(localPath, \"utf8\") };\n    }\n    return { error: \"File not found\" };\n  } catch {\n    return { error: `File not found: ${importPath}` };\n  }\n}\n\n/**\n * Compiles a Solidity contract\n * \n * @param contractFileName - Name of the contract file without the .sol extension\n * @returns Promise that resolves to the compilation output containing ABI and bytecode\n * @throws Error if compilation fails\n */\nexport async function compileSolidity(contractFileName: string): Promise<CompilationOutput> {\n  const contractPath = path.join(baseDir, `${contractFileName}.sol`);\n  logger.debug(`Compiling contract from path: ${contractPath}`);\n  \n  const source = getContractSource(contractPath);\n\n  const input = {\n    language: \"Solidity\",\n    sources: {\n      [contractFileName]: {\n        content: source,\n      },\n    },\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 200,\n      },\n      outputSelection: {\n        \"*\": {\n          \"*\": [\"*\"],\n        },\n      },\n    },\n  };\n\n  logger.debug(\"Compiling contract...\");\n\n  try {\n    // Fix: Use solc as an object with compile method, not as a function\n    // @ts-expect-error solc.compile exists at runtime though TypeScript doesn't see it\n    const outputString = solc.compile(JSON.stringify(input), { import: findImports });\n    const output = JSON.parse(outputString) as SolcOutput;\n\n    if (output.errors) {\n      const hasError = output.errors.some(\n        (error: SolcError) => error.type === \"Error\"\n      );\n      if (hasError) {\n        throw new Error(\n          `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\n        );\n      }\n      logger.warn(\"Compilation warnings:\", output.errors);\n    }\n\n    const contractName = path.basename(contractFileName, \".sol\");\n    const contract = output.contracts?.[contractFileName]?.[contractName];\n\n    if (!contract) {\n      throw new Error(\"Contract compilation result is empty\");\n    }\n\n    logger.debug(\"Contract compiled successfully\");\n    return {\n      abi: contract.abi,\n      bytecode: contract.evm.bytecode.object,\n    };\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      logger.error(\"Compilation failed:\", error.message);\n    } else {\n      logger.error(\"Compilation failed with unknown error\");\n    }\n    throw error;\n  }\n}\n","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport solc from \"solc\";\nimport { type Abi, type Address, parseUnits } from \"viem\";\n\nimport {\n  bnbWalletProvider,\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { ercContractTemplate } from \"../templates\";\nimport type {\n  IDeployERC1155Params,\n  IDeployERC721Params,\n  IDeployERC20Params,\n  SupportedChain,\n} from \"../types\";\nimport { compileSolidity } from \"../utils/contracts\";\nimport { EXPLORERS } from \"../constants\";\n\nexport { ercContractTemplate };\n\n/**\n * DeployAction class - Handles token contract deployments on BNB Smart Chain networks\n * \n * This class implements the core functionality for deploying ERC20, ERC721, and ERC1155\n * smart contracts to BNB Smart Chain (BSC) and opBNB networks.\n */\nexport class DeployAction {\n  /**\n   * Creates a new DeployAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   */\n  constructor(private walletProvider: WalletProvider) {}\n\n  /**\n   * Compiles a Solidity contract\n   * \n   * @param contractName - Name of the contract to compile\n   * @param source - Solidity source code\n   * @returns The compiled contract ABI and bytecode\n   * @throws Error if compilation fails\n   */\n  async compileSolidity(contractName: string, source: string) {\n    logger.debug(`Compiling Solidity contract: ${contractName}`);\n    logger.debug(`Source code length: ${source.length} characters`);\n    \n    const solName = `${contractName}.sol`;\n    const input = {\n      language: \"Solidity\",\n      sources: {\n        [solName]: {\n          content: source,\n        },\n      },\n      settings: {\n        outputSelection: {\n          \"*\": {\n            \"*\": [\"*\"],\n          },\n        },\n      },\n    };\n    logger.debug(\"Preparing to compile contract...\");\n    logger.debug(`Solc version: ${typeof solc === 'function' ? 'function' : typeof solc === 'object' ? 'object' : 'unknown'}`);\n    logger.debug(`Solc properties: ${Object.keys(solc).join(', ')}`);\n    \n    try {\n      // Use solc properly as an object with compile method\n      logger.debug(\"Calling solc.compile method...\");\n      // @ts-expect-error solc.compile exists at runtime though TypeScript doesn't see it\n      const outputString = solc.compile(JSON.stringify(input));\n      logger.debug(`Compilation output string length: ${outputString ? outputString.length : 'null or undefined'}`);\n      \n      logger.debug(\"Parsing compilation output as JSON...\");\n      const output = JSON.parse(outputString);\n      logger.debug(\"Compilation completed, checking for errors...\");\n\n      // Check compile error\n      if (output.errors) {\n        logger.debug(`Found ${output.errors.length} compilation messages`);\n        const errors = output.errors;\n        const hasError = errors.some((error: { type: string }) => error.type === \"Error\");\n        \n        if (hasError) {\n          logger.error(\"Compilation errors:\", JSON.stringify(errors, null, 2));\n          const errorMessages = errors.map((e: { formattedMessage?: string; message?: string }) => \n            e.formattedMessage || e.message\n          ).join(\"\\n\");\n          throw new Error(`Contract compilation failed: ${errorMessages}`);\n        }\n        \n        // Just warnings\n        logger.warn(\"Compilation warnings:\", JSON.stringify(errors, null, 2));\n      } else {\n        logger.debug(\"No compilation errors or warnings found\");\n      }\n\n      logger.debug(`Checking for contract in output at ${solName}.${contractName}`);\n      const contract = output.contracts[solName][contractName];\n\n      if (!contract) {\n        logger.error(`Compilation result is empty for ${contractName}`);\n        logger.error(`Available contracts: ${Object.keys(output.contracts).join(', ')}`);\n        logger.error(`Available items in ${solName}: ${output.contracts[solName] ? Object.keys(output.contracts[solName]).join(', ') : 'none'}`);\n        throw new Error(`Compilation result is empty for ${contractName}`);\n      }\n\n      logger.debug(`Contract ${contractName} compiled successfully`);\n      logger.debug(`ABI items count: ${contract.abi ? contract.abi.length : 'null'}`);\n      logger.debug(`Bytecode length: ${contract.evm.bytecode.object ? contract.evm.bytecode.object.length : 'null'}`);\n      \n      return {\n        abi: contract.abi as Abi,\n        bytecode: contract.evm.bytecode.object,\n      };\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(`Error compiling contract ${contractName}:`, errorMessage);\n      if (error instanceof Error && error.stack) {\n        logger.error(`Error stack trace: ${error.stack}`);\n      }\n      logger.error(`Error type: ${error instanceof Error ? 'Error object' : typeof error}`);\n      throw new Error(`Failed to compile contract: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Deploys an ERC20 token contract\n   * \n   * @param deployTokenParams - Parameters for the ERC20 token deployment\n   * @returns Object containing the deployed contract address\n   * @throws Error if deployment fails\n   */\n  async deployERC20(deployTokenParams: IDeployERC20Params) {\n    logger.debug(\"Deploying ERC20 token with params:\", JSON.stringify(deployTokenParams, null, 2));\n\n    // Validate parameters\n    const { name, symbol, decimals, totalSupply, chain } = deployTokenParams;\n    \n    if (!name || name === \"\") {\n      logger.error(\"Token name is required\");\n      throw new Error(\"Token name is required\");\n    }\n    if (!symbol || symbol === \"\") {\n      logger.error(\"Token symbol is required\");\n      throw new Error(\"Token symbol is required\");\n    }\n    if (!decimals || decimals === 0) {\n      logger.error(\"Token decimals is required\");\n      throw new Error(\"Token decimals is required\");\n    }\n    if (!totalSupply || totalSupply === \"\") {\n      logger.error(\"Token total supply is required\");\n      throw new Error(\"Token total supply is required\");\n    }\n    \n    logger.debug(`Deploying ERC20 token: ${name} (${symbol}) with ${decimals} decimals and total supply ${totalSupply}`);\n\n    try {\n      logger.debug(`Converting total supply ${totalSupply} to wei with ${decimals} decimals`);\n      const totalSupplyWithDecimals = parseUnits(totalSupply, decimals);\n      logger.debug(`Total supply in wei: ${totalSupplyWithDecimals.toString()}`);\n      \n      const args = [name, symbol, decimals, totalSupplyWithDecimals];\n      // Safe logging with BigInt values\n      logger.debug(\"Contract constructor arguments:\", \n        args.map(arg => typeof arg === 'bigint' ? arg.toString() : arg)\n      );\n      \n      logger.debug(`Deploying ERC20 contract on chain ${chain}...`);\n      const contractAddress = await this.deployContract(\n        chain,\n        \"ERC20Contract\",\n        args\n      );\n\n      if (!contractAddress) {\n        logger.error(\"Failed to deploy ERC20 contract - no address returned\");\n        throw new Error(\"Failed to deploy ERC20 contract\");\n      }\n      \n      logger.debug(`ERC20 contract deployed successfully at address: ${contractAddress}`);\n      return {\n        address: contractAddress,\n      };\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Deploy ERC20 failed:\", errorMessage);\n      throw error;\n    }\n  }\n\n  /**\n   * Deploys an ERC721 NFT contract\n   * \n   * @param deployNftParams - Parameters for the ERC721 NFT deployment\n   * @returns Object containing the deployed contract address\n   * @throws Error if deployment fails\n   */\n  async deployERC721(deployNftParams: IDeployERC721Params) {\n    logger.debug(\"Deploying ERC721 NFT with params:\", JSON.stringify(deployNftParams, null, 2));\n\n    // Validate parameters\n    const { baseURI, name, symbol, chain } = deployNftParams;\n    \n    if (!name || name === \"\") {\n      logger.error(\"NFT name is required\");\n      throw new Error(\"NFT name is required\");\n    }\n    if (!symbol || symbol === \"\") {\n      logger.error(\"NFT symbol is required\");\n      throw new Error(\"NFT symbol is required\");\n    }\n    if (!baseURI || baseURI === \"\") {\n      logger.error(\"NFT baseURI is required\");\n      throw new Error(\"NFT baseURI is required\");\n    }\n    \n    logger.debug(`Deploying ERC721 NFT: ${name} (${symbol}) with baseURI ${baseURI}`);\n    \n    try {\n      const args = [name, symbol, baseURI];\n      logger.debug(\"Contract constructor arguments:\", args);\n      \n      logger.debug(`Deploying ERC721 contract on chain ${chain}...`);\n      const contractAddress = await this.deployContract(\n        chain,\n        \"ERC721Contract\",\n        args\n      );\n\n      if (!contractAddress) {\n        logger.error(\"Failed to deploy ERC721 contract - no address returned\");\n        throw new Error(\"Failed to deploy ERC721 contract\");\n      }\n      \n      logger.debug(`ERC721 contract deployed successfully at address: ${contractAddress}`);\n      return {\n        address: contractAddress,\n      };\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Deploy ERC721 failed:\", errorMessage);\n      throw error;\n    }\n  }\n\n  /**\n   * Deploys an ERC1155 multi-token contract\n   * \n   * @param deploy1155Params - Parameters for the ERC1155 token deployment\n   * @returns Object containing the deployed contract address\n   * @throws Error if deployment fails\n   */\n  async deployERC1155(deploy1155Params: IDeployERC1155Params) {\n    logger.debug(\"Deploying ERC1155 token with params:\", JSON.stringify(deploy1155Params, null, 2));\n\n    // Validate parameters\n    const { baseURI, name, chain } = deploy1155Params;\n    \n    if (!name || name === \"\") {\n      logger.error(\"Token name is required\");\n      throw new Error(\"Token name is required\");\n    }\n    if (!baseURI || baseURI === \"\") {\n      logger.error(\"Token baseURI is required\");\n      throw new Error(\"Token baseURI is required\");\n    }\n    \n    logger.debug(`Deploying ERC1155 token: ${name} with baseURI ${baseURI}`);\n    \n    try {\n      const args = [name, baseURI];\n      logger.debug(\"Contract constructor arguments:\", args);\n      \n      logger.debug(`Deploying ERC1155 contract on chain ${chain}...`);\n      const contractAddress = await this.deployContract(\n        chain,\n        \"ERC1155Contract\",\n        args\n      );\n\n      if (!contractAddress) {\n        logger.error(\"Failed to deploy ERC1155 contract - no address returned\");\n        throw new Error(\"Failed to deploy ERC1155 contract\");\n      }\n      \n      logger.debug(`ERC1155 contract deployed successfully at address: ${contractAddress}`);\n      return {\n        address: contractAddress,\n      };\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Deploy ERC1155 failed:\", errorMessage);\n      throw error;\n    }\n  }\n\n  /**\n   * Core contract deployment method used by all token types\n   * \n   * @param chain - The blockchain network to deploy to\n   * @param contractName - The name of the contract template to use\n   * @param args - Constructor arguments for the contract\n   * @returns The deployed contract address or null/undefined if deployment fails\n   * @throws Error if deployment fails\n   */\n  async deployContract(\n    chain: SupportedChain,\n    contractName: string,\n    args: unknown[]\n  ): Promise<Address | null | undefined> {\n    logger.debug(`Starting contract deployment process for ${contractName} on chain ${chain}`);\n    // Handle BigInt values for logging by converting to string\n    const safeArgs = args.map(arg => \n      typeof arg === 'bigint' ? arg.toString() : arg\n    );\n    logger.debug(\"Constructor arguments:\", safeArgs);\n    \n    try {\n      logger.debug(`Compiling ${contractName}...`);\n      logger.debug(\"Current working directory:\", process.cwd());\n      \n      // Get the compiled contract\n      const { abi, bytecode } = await compileSolidity(contractName);\n      \n      if (!abi) {\n        logger.error(`No ABI found for ${contractName}`);\n        throw new Error(`Compilation failed: No ABI found for ${contractName}`);\n      }\n      \n      if (!bytecode) {\n        logger.error(\"No bytecode found for ${contractName}\");\n        throw new Error(\"Bytecode is empty after compilation\");\n      }\n      \n      logger.debug(`Compilation successful, bytecode length: ${bytecode.length}`);\n      logger.debug(`Switching to chain ${chain} for deployment`);\n      this.walletProvider.switchChain(chain);\n\n      const chainConfig = this.walletProvider.getChainConfigs(chain);\n      logger.debug(`Using chain config: ${chainConfig.name} (ID: ${chainConfig.id})`);\n      \n      const walletClient = this.walletProvider.getWalletClient(chain);\n      const account = this.walletProvider.getAccount();\n      logger.debug(`Deploying from account: ${account.address}`);\n      \n      // Calculate approximate gas before deployment\n      const publicClient = this.walletProvider.getPublicClient(chain);\n      \n      logger.debug(\"Submitting deployment transaction...\");\n      logger.debug(\"Bytecode type:\", typeof bytecode);\n      logger.debug(`Bytecode starts with: ${bytecode.substring(0, 20)}...`);\n      \n      // Submit the deployment transaction\n      const hash = await walletClient.deployContract({\n        account,\n        abi,\n        bytecode: bytecode as `0x${string}`,\n        args,\n        chain: chainConfig,\n      });\n\n      logger.debug(`Deployment transaction submitted with hash: ${hash}`);\n      logger.debug(\"Waiting for deployment transaction confirmation...\");\n      \n      // Wait for the transaction to be confirmed\n      const receipt = await publicClient.waitForTransactionReceipt({\n        hash,\n      });\n      \n      if (receipt.status === \"success\") {\n        logger.debug(`Contract deployed successfully at address: ${receipt.contractAddress}`);\n        // Convert BigInt values to strings for logging\n        const safeReceipt = {\n          ...receipt,\n          gasUsed: receipt.gasUsed ? receipt.gasUsed.toString() : undefined,\n          effectiveGasPrice: receipt.effectiveGasPrice ? receipt.effectiveGasPrice.toString() : undefined\n        };\n        logger.debug(\"Transaction details: gas used\", safeReceipt.gasUsed, \"effective gas price\", safeReceipt.effectiveGasPrice);\n        \n        // Return the contract address\n        return receipt.contractAddress;\n      }\n      \n      // If we get here, the status was not \"success\"\n      logger.error(`Deployment transaction failed with status: ${receipt.status}`);\n      // Use a safe version of the receipt for logging\n      const safeReceipt = JSON.stringify(receipt, (key, value) => \n        typeof value === 'bigint' ? value.toString() : value\n      );\n      logger.error(\"Transaction receipt:\", safeReceipt);\n      throw new Error(\"Contract deployment transaction failed\");\n    } catch (error: unknown) {\n      logger.error(`Error deploying contract ${contractName}:`, error);\n      \n      // Handle BigInt values when logging error details\n      let errorDetails: string | undefined;\n      try {\n        // Use a typed replacer function to handle BigInt values\n        errorDetails = JSON.stringify(error, (key: string, value: unknown) => \n          typeof value === 'bigint' ? value.toString() : value\n        );\n        logger.error(\"Error details:\", errorDetails);\n      } catch (e) {\n        logger.error(\"Error could not be stringified, logging properties individually\");\n        if (error && typeof error === 'object') {\n          for (const key in error) {\n            try {\n              const value: unknown = (error as Record<string, unknown>)[key];\n              logger.error(`${key}:`, typeof value === 'bigint' ? value.toString() : value);\n            } catch (innerError) {\n              logger.error(`${key}: [Error accessing property]`);\n            }\n          }\n        }\n      }\n      \n      // Provide more informative error messages\n      if (error instanceof Error) {\n        logger.error(\"Error stack:\", error.stack || 'No stack trace available');\n        \n        if (error.message.includes(\"insufficient funds\")) {\n          throw new Error(\"Insufficient funds to deploy the contract. Please check your balance.\");\n        }\n        if (error.message.includes(\"user rejected\")) {\n          throw new Error(\"Transaction rejected by user.\");\n        }\n        if (error.message.includes(\"cannot serialize BigInt\")) {\n          // Specific handling for BigInt serialization errors\n          throw new Error(\"Error processing large numbers in deployment. This is a technical issue being addressed.\");\n        }\n      }\n      \n      // Rethrow the error to be caught by the calling function\n      throw error;\n    }\n  }\n}\n\n/**\n * Action for deploying token contracts on BNB Smart Chain networks\n * \n * This action handles the deployment of ERC20, ERC721, and ERC1155 token contracts\n * on BNB Smart Chain (BSC) and opBNB networks.\n */\nexport const deployAction: Action = {\n  name: \"DEPLOY_BNB\",\n  similes: [\n    \"DEPLOY_TOKEN_BNB\", \n    \"CREATE_TOKEN_BNB\", \n    \"DEPLOY_NFT_BNB\",\n    \"DEPLOY_ERC20_BNB\",\n    \"DEPLOY_ERC721_BNB\",\n    \"DEPLOY_ERC1155_BNB\"\n  ],\n  description: \"Deploys ERC20, ERC721, or ERC1155 contracts on BNB Smart Chain or opBNB\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing DEPLOY_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n    // Extract prompt text for contract deployment analysis\n    const promptText = typeof message.content.text === 'string' ? message.content.text.trim() : '';\n    logger.debug(`Raw prompt text: \"${promptText}\"`);\n    \n    // Analyze prompt to detect contract type and parameters\n    const promptLower = promptText.toLowerCase();\n    \n    // Regular expressions for contract parameter detection\n    const erc20Regex = /(?:deploy|create)\\s+(?:an?\\s+)?(?:erc20|token)(?:\\s+token)?\\s+(?:with|having|named)?\\s+(?:name\\s+['\"]?([^'\"]+)['\"]?|['\"]?([^'\"]+)['\"]?\\s+token)/i;\n    const erc721Regex = /(?:deploy|create)\\s+(?:an?\\s+)?(?:erc721|nft)(?:\\s+token)?\\s+(?:with|having|named)?\\s+(?:name\\s+['\"]?([^'\"]+)['\"]?|['\"]?([^'\"]+)['\"]?\\s+nft)/i;\n    const erc1155Regex = /(?:deploy|create)\\s+(?:an?\\s+)?(?:erc1155|multi-token)(?:\\s+token)?\\s+(?:with|having|named)?\\s+(?:name\\s+['\"]?([^'\"]+)['\"]?|['\"]?([^'\"]+)['\"]?\\s+token)/i;\n    \n    const symbolRegex = /symbol\\s+['\"]?([^'\"]+)['\"]?/i;\n    const decimalsRegex = /decimals\\s+([0-9]+)/i;\n    const totalSupplyRegex = /(?:total\\s+supply|supply)\\s+([0-9]+(?:\\.[0-9]+)?(?:\\s*[kmbt])?)/i;\n    const baseURIRegex = /(?:base\\s*uri|baseuri|uri)\\s+['\"]?(https?:\\/\\/[^'\"]+)['\"]?/i;\n    \n    // Detect contract type\n    let directContractType: string | null = null;\n    let directName: string | null = null;\n    let directSymbol: string | null = null;\n    let directDecimals: number | null = null;\n    let directTotalSupply: string | null = null;\n    let directBaseURI: string | null = null;\n    let directChain: SupportedChain | null = null;\n    \n    // Check for ERC20 pattern\n    let match = promptText.match(erc20Regex);\n    if (match) {\n      directContractType = \"erc20\";\n      directName = match[1] || match[2] || null;\n      logger.debug(`Detected ERC20 token deployment with name: ${directName}`);\n    }\n    \n    // Check for ERC721 pattern\n    if (!directContractType) {\n      match = promptText.match(erc721Regex);\n      if (match) {\n        directContractType = \"erc721\";\n        directName = match[1] || match[2] || null;\n        logger.debug(`Detected ERC721 NFT deployment with name: ${directName}`);\n      }\n    }\n    \n    // Check for ERC1155 pattern\n    if (!directContractType) {\n      match = promptText.match(erc1155Regex);\n      if (match) {\n        directContractType = \"erc1155\";\n        directName = match[1] || match[2] || null;\n        logger.debug(`Detected ERC1155 token deployment with name: ${directName}`);\n      }\n    }\n    \n    // Check for common keywords if no type detected yet\n    if (!directContractType) {\n      if (promptLower.includes(\"erc20\") || promptLower.includes(\"fungible token\")) {\n        directContractType = \"erc20\";\n        logger.debug(\"Detected ERC20 token deployment from keywords\");\n      } else if (promptLower.includes(\"erc721\") || promptLower.includes(\"nft\") || promptLower.includes(\"non-fungible\")) {\n        directContractType = \"erc721\";\n        logger.debug(\"Detected ERC721 token deployment from keywords\");\n      } else if (promptLower.includes(\"erc1155\") || promptLower.includes(\"multi\") || promptLower.includes(\"1155\")) {\n        directContractType = \"erc1155\";\n        logger.debug(\"Detected ERC1155 token deployment from keywords\");\n      }\n    }\n    \n    // Extract symbol\n    match = promptText.match(symbolRegex);\n    if (match && match.length >= 2) {\n      directSymbol = match[1]?.trim() || \"\";\n      logger.debug(`Extracted token symbol: ${directSymbol}`);\n    }\n    \n    // Extract decimals\n    match = promptText.match(decimalsRegex);\n    if (match && match.length >= 2) {\n      directDecimals = Number.parseInt(match[1] ?? \"0\", 10);\n      logger.debug(`Extracted token decimals: ${directDecimals}`);\n    }\n    \n    // Extract total supply\n    match = promptText.match(totalSupplyRegex);\n    if (match && match.length >= 2) {\n      directTotalSupply = match[1]?.trim() || \"\";\n      // Convert shorthand notations (K, M, B, T) to full numbers\n      if (directTotalSupply.endsWith('k') || directTotalSupply.endsWith('K')) {\n        directTotalSupply = (Number.parseFloat(directTotalSupply) * 1000).toString();\n      } else if (directTotalSupply.endsWith('m') || directTotalSupply.endsWith('M')) {\n        directTotalSupply = (Number.parseFloat(directTotalSupply) * 1000000).toString();\n      } else if (directTotalSupply.endsWith('b') || directTotalSupply.endsWith('B')) {\n        directTotalSupply = (Number.parseFloat(directTotalSupply) * 1000000000).toString();\n      } else if (directTotalSupply.endsWith('t') || directTotalSupply.endsWith('T')) {\n        directTotalSupply = (Number.parseFloat(directTotalSupply) * 1000000000000).toString();\n      }\n      logger.debug(`Extracted token total supply: ${directTotalSupply}`);\n    }\n    \n    // Extract baseURI\n    match = promptText.match(baseURIRegex);\n    if (match && match.length >= 2) {\n      directBaseURI = match[1]?.trim() || \"\";\n      logger.debug(`Extracted token baseURI: ${directBaseURI}`);\n    }\n    \n    // Detect chain\n    if (promptLower.includes(\"bsc\") || promptLower.includes(\"binance\")) {\n      directChain = \"bsc\";\n      logger.debug(\"Detected BSC chain from prompt\");\n    } else if (promptLower.includes(\"opbnb\") || promptLower.includes(\"op bnb\")) {\n      directChain = \"opBNB\";\n      logger.debug(\"Detected opBNB chain from prompt\");\n    }\n    \n    // Store prompt analysis results\n    const promptAnalysis = {\n      directContractType,\n      directName,\n      directSymbol,\n      directDecimals,\n      directTotalSupply,\n      directBaseURI,\n      directChain\n    };\n    \n    logger.debug(\"Prompt analysis result:\", promptAnalysis);\n\n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n\n    try {\n      // Only create walletInfo if state exists\n      if (state) {\n        state.walletInfo = await bnbWalletProvider.get(runtime, message, currentState);\n        logger.debug(\"Wallet info:\", state.walletInfo);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error(\"Error getting wallet info:\", errorMessage);\n      callback?.({\n        text: `Unable to access wallet: ${errorMessage}`,\n        content: { error: errorMessage },\n      });\n      return false;\n    }\n\n    // Use runtime model to extract contract parameters\n    const templateData = {\n      template: ercContractTemplate,\n      state: currentState\n    };\n\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(templateData),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Parse the JSON output\n    let content: Record<string, unknown> = {};\n    try {\n      content = typeof mlOutput === 'string' ? JSON.parse(mlOutput) : mlOutput as Record<string, unknown>;\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", mlOutput);\n    }\n    \n    logger.debug(\"Generated contract content:\", JSON.stringify(content, null, 2));\n\n    // PRIORITY ORDER FOR CONTRACT PARAMETERS:\n    // 1. Direct match from prompt text (most reliable)\n    // 2. Parameters specified in model-generated content\n    // 3. Default values where appropriate\n    \n    // Determine contract type\n    let contractType: string;\n    if (directContractType) {\n      contractType = directContractType;\n      logger.debug(`Using contract type directly extracted from prompt: ${contractType}`);\n    } else if (content.contractType && typeof content.contractType === 'string') {\n      contractType = content.contractType.toLowerCase();\n      logger.debug(`Using contract type from generated content: ${contractType}`);\n    } else {\n      contractType = \"erc20\"; // Default\n      logger.debug(`No contract type detected, defaulting to ${contractType}`);\n    }\n    \n    // Determine chain\n    let chain: SupportedChain = \"bsc\"; // Default\n    if (directChain) {\n      chain = directChain;\n      logger.debug(`Using chain directly extracted from prompt: ${chain}`);\n    } else if (content.chain && typeof content.chain === 'string') {\n      chain = content.chain as SupportedChain;\n      logger.debug(`Using chain from generated content: ${chain}`);\n    } else {\n      logger.debug(`No chain detected, defaulting to ${chain}`);\n    }\n    \n    // Initialize wallet provider and action handler\n    logger.debug(\"Initializing wallet provider...\");\n    const walletProvider = initWalletProvider(runtime);\n    const action = new DeployAction(walletProvider);\n    \n    try {\n      logger.debug(`Starting deployment process for ${contractType.toUpperCase()} contract on ${chain}...`);\n      let result: { address: Address } | undefined;\n      \n      switch (contractType.toLowerCase()) {\n        case \"erc20\": {\n          // Determine ERC20 specific parameters with null coalescing to ensure non-undefined values\n          const name = directName || (content?.name as string) || \"DefaultToken\";\n          const symbol = directSymbol || (content?.symbol as string) || \"DTK\";\n          const decimals = directDecimals || (content?.decimals as number) || 18;\n          const totalSupply = directTotalSupply || (content?.totalSupply as string) || \"1000000\";\n          \n          logger.debug(`Deploying ERC20 with params: name=${name}, symbol=${symbol}, decimals=${decimals}, totalSupply=${totalSupply}`);\n          \n          result = await action.deployERC20({\n            chain,\n            decimals,\n            symbol,\n            name,\n            totalSupply,\n          });\n          break;\n        }\n        case \"erc721\": {\n          // Determine ERC721 specific parameters with null coalescing to ensure non-undefined values\n          const nftName = directName || (content?.name as string) || \"DefaultNFT\";\n          const nftSymbol = directSymbol || (content?.symbol as string) || \"DNFT\";\n          const nftBaseURI = directBaseURI || (content?.baseURI as string) || \"https://example.com/token/\";\n          \n          logger.debug(`Deploying ERC721 with params: name=${nftName}, symbol=${nftSymbol}, baseURI=${nftBaseURI}`);\n          \n          result = await action.deployERC721({\n            chain,\n            name: nftName,\n            symbol: nftSymbol,\n            baseURI: nftBaseURI,\n          });\n          break;\n        }\n        case \"erc1155\": {\n          // Determine ERC1155 specific parameters with null coalescing to ensure non-undefined values\n          const multiName = directName || (content?.name as string) || \"DefaultMultiToken\";\n          const multiBaseURI = directBaseURI || (content?.baseURI as string) || \"https://example.com/multi-token/\";\n          \n          logger.debug(`Deploying ERC1155 with params: name=${multiName}, baseURI=${multiBaseURI}`);\n          \n          result = await action.deployERC1155({\n            chain,\n            name: multiName,\n            baseURI: multiBaseURI,\n          });\n          break;\n        }\n        default:\n          logger.error(`Unsupported contract type: ${contractType}`);\n          throw new Error(`Unsupported contract type: ${contractType}. Supported types are: erc20, erc721, erc1155`);\n      }\n\n      if (result?.address) {\n        logger.debug(`Contract deployed successfully at address: ${result.address}`);\n        \n        // Get explorer URL for the deployed contract\n        const explorer = EXPLORERS[chain.toUpperCase() as keyof typeof EXPLORERS];\n        const contractExplorerUrl = explorer ? `${explorer.url}/address/${result.address}` : null;\n        \n        // Prepare user-friendly response with contract type and chain info\n        const contractTypeName = contractType.toUpperCase();\n        const chainName = chain === \"bsc\" ? \"Binance Smart Chain\" : \"opBNB\";\n        \n        // Create enhanced response with additional information\n        const textResponse = `Successfully deployed ${contractTypeName} contract on ${chainName} at address: ${result.address}${\n          contractExplorerUrl ? `\\n\\nView contract: ${contractExplorerUrl}` : \"\"\n        }\\n\\nYou can now interact with this contract using other BNB actions!`;\n        \n        callback?.({\n          text: textResponse,\n          content: { \n            ...result,\n            contractType,\n            chain,\n            contractExplorerUrl\n          },\n        });\n        \n        return true;\n      } \n      \n      logger.error(\"Contract deployment failed - no address returned\");\n      callback?.({\n        text: \"Contract deployment failed\",\n        content: { error: \"No contract address returned\" },\n      });\n      return false;\n      \n    } catch (error: unknown) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      logger.error(\"Error during contract deployment:\", errorObj.message);\n      \n      // Provide more user-friendly error messages\n      let errorMessage = errorObj.message;\n      \n      if (errorMessage.includes(\"insufficient funds\")) {\n        errorMessage = \"Insufficient funds for contract deployment. Please check your wallet balance.\";\n      } else if (errorMessage.includes(\"user rejected\")) {\n        errorMessage = \"Transaction was rejected. Please try again if you want to proceed with the deployment.\";\n      } else if (errorMessage.includes(\"compilation failed\")) {\n        errorMessage = \"Contract compilation failed. This might be due to syntax errors in the contract code.\";\n      }\n      \n      callback?.({\n        text: `Deployment failed: ${errorMessage}`,\n        content: { \n          error: errorMessage,\n          contractType \n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Deploy an ERC20 token with name 'autofun10', symbol 'AFUND', decimals 18, total supply 10000\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you deploy an ERC20 token on BNB Smart Chain\",\n          actions: [\"DEPLOY_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Deploy an ERC721 NFT contract with name 'MyNFT', symbol 'MNFT', baseURI 'https://my-nft-base-uri.com'\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you deploy an ERC721 NFT on BNB Smart Chain\",\n          actions: [\"DEPLOY_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Deploy an ERC1155 contract with name 'My1155', baseURI 'https://my-1155-base-uri.com'\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll help you deploy an ERC1155 token on BNB Smart Chain\",\n          actions: [\"DEPLOY_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}; ","/**\n * Cross Chain ABI Definition\n * \n * This file contains the Application Binary Interface (ABI) for the BNB Smart Chain \n * Cross Chain Bridge contract. The ABI describes all the functions, events, and state \n * variables of the contract to allow interaction from JavaScript applications.\n * \n * The Cross Chain contract is a fundamental component of BNB Chain's cross-chain \n * infrastructure, enabling communication between different blockchains in the BNB \n * ecosystem (BNB Smart Chain, BNB Beacon Chain, Greenfield, opBNB, etc).\n * \n * Key functionality includes:\n * - Sending cross-chain packages to other chains\n * - Receiving and processing cross-chain packages\n * - Managing communication channels between chains\n * - Handling acknowledgments for cross-chain messages\n * - Supporting governance operations for protocol upgrades\n * \n * This contract works in conjunction with the TokenHub contract to enable the\n * complete cross-chain communication and token transfer functionality across\n * the BNB Chain ecosystem.\n * \n * The ABI is defined as a constant to ensure type safety and immutability.\n */\nexport const CROSS_CHAIN_ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n        ],\n        name: \"AddChannel\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"srcChainId\",\n                type: \"uint32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"dstChainId\",\n                type: \"uint32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"oracleSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"payload\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"CrossChainPackage\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isEnable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"EnableOrDisableChannel\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"ParamChange\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalTypeHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"proposer\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint128\",\n                name: \"quorum\",\n                type: \"uint128\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint128\",\n                name: \"expiredAt\",\n                type: \"uint128\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"contentHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ProposalSubmitted\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"packageType\",\n                type: \"uint8\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"ReceivedPackage\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"executor\",\n                type: \"address\",\n            },\n        ],\n        name: \"Reopened\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"executor\",\n                type: \"address\",\n            },\n        ],\n        name: \"Suspended\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"lowLevelData\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnexpectedFailureAssertionInPackageHandler\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"contractAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"reason\",\n                type: \"string\",\n            },\n        ],\n        name: \"UnexpectedRevertInPackageHandler\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"packageSequence\",\n                type: \"uint64\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"payload\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnsupportedPackage\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"ACK_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CANCEL_TRANSFER_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CODE_OK\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CROSS_CHAIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"EMERGENCY_PROPOSAL_EXPIRE_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"EMPTY_CONTENT_HASH\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ERROR_FAIL_DECODE\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"FAIL_ACK_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"IN_TURN_RELAYER_VALIDITY_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"LIGHT_CLIENT\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"OUT_TURN_RELAYER_BACKOFF_PERIOD\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PROXY_ADMIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"RELAYER_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"REOPEN_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SUSPEND_PROPOSAL\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SYN_PACKAGE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOKEN_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_CHANNEL_ID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_OUT_CHANNEL_ID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"batchSizeForOracle\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"callbackGasPrice\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"attacker\",\n                type: \"address\",\n            },\n        ],\n        name: \"cancelTransfer\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"chainId\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelHandlerMap\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelReceiveSequenceMap\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"channelSendSequenceMap\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"emergencyProposals\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"quorum\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"uint128\",\n                name: \"expiredAt\",\n                type: \"uint128\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"contentHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"packageType\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_ackRelayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"encodePayload\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRelayFees\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_minAckRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"gnfdChainId\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"_payload\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_blsSignature\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_validatorsBitSet\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"handlePackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint16\",\n                name: \"_gnfdChainId\",\n                type: \"uint16\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isSuspended\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"minAckRelayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"oracleSequence\",\n        outputs: [\n            {\n                internalType: \"int64\",\n                name: \"\",\n                type: \"int64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"previousTxHeight\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"quorumMap\",\n        outputs: [\n            {\n                internalType: \"uint16\",\n                name: \"\",\n                type: \"uint16\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"registeredContractChannelMap\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"relayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"reopen\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_relayFee\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_ackRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"sendSynPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"suspend\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"txCounter\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"updateParam\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"upgradeInfo\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"version\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"description\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n] as const;\n\n","/**\n * TokenHub ABI Definition\n * \n * This file contains the Application Binary Interface (ABI) for the BNB Smart Chain \n * TokenHub contract. The ABI describes all the functions, events, and state \n * variables of the contract to allow interaction from JavaScript applications.\n * \n * The TokenHub contract is a core component of the BNB Chain cross-chain architecture,\n * responsible for handling token transfers between BNB Smart Chain (BSC) and other \n * chains in the BNB ecosystem. It works closely with the Cross Chain contract to \n * facilitate cross-chain token movements.\n * \n * Key functionality includes:\n * - Native BNB token transfers between chains (transferOut)\n * - Handling of incoming token transfers (transferIn)\n * - Managing relay fees for cross-chain operations\n * - Processing acknowledgments for cross-chain transfers\n * - Handling refunds for failed transfers\n * \n * Used primarily in bridging operations to move tokens between BSC, BNB Beacon Chain,\n * Greenfield, and opBNB.\n * \n * The ABI is defined as a constant to ensure type safety and immutability.\n */\nexport const TOKENHUB_ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"version\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"Initialized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"key\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"value\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"ParamChange\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ReceiveTransferIn\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"status\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"RefundFailure\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint32\",\n                name: \"status\",\n                type: \"uint32\",\n            },\n        ],\n        name: \"RefundSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"RewardTo\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"refundAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferInSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"senderAddr\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"relayFee\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"ackRelayFee\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferOutSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"UnexpectedPackage\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"APP_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CODE_OK\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"CROSS_CHAIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"ERROR_FAIL_DECODE\",\n        outputs: [\n            {\n                internalType: \"uint32\",\n                name: \"\",\n                type: \"uint32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"GOV_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"LIGHT_CLIENT\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"MAX_GAS_FOR_TRANSFER_BNB\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PROXY_ADMIN\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"RELAYER_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"REWARD_UPPER_LIMIT\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TOKEN_HUB\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_INSUFFICIENT_BALANCE\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_NON_PAYABLE_RECIPIENT\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_FAILURE_UNKNOWN\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_IN_SUCCESS\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"TRANSFER_OUT_CHANNELID\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"claimRelayFee\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"govHub\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleAckPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleFailAckPackage\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"channelId\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"msgBytes\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"handleSynPackage\",\n        outputs: [\n            {\n                internalType: \"bytes\",\n                name: \"\",\n                type: \"bytes\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferOut\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n] as const;\n","import { createRequire } from \"module\";\nimport type { IAgentRuntime } from \"@elizaos/core\";\n\nconst require = createRequire(import.meta.url);\nconst { Client } = require(\"@bnb-chain/greenfield-js-sdk\");\n\nexport const getGnfdConfig = async (runtime: IAgentRuntime) => {\n    const network = runtime.getSetting(\"GREENFIELD_NETWORK\");\n    const config =\n    network === \"TESTNET\" ? CONFIG[\"TESTNET\"] : CONFIG[\"MAINNET\"];\n\n    return config\n}\n\nexport const InitGnfdClient = async (runtime: IAgentRuntime) => {\n    const config = await getGnfdConfig(runtime)\n    if (!config.GREENFIELD_CHAIN_ID || !config.GREENFIELD_RPC_URL) {\n        throw new Error(\"Creating greenfield client params is error\");\n    }\n\n    const client = Client.create(\n        config.GREENFIELD_RPC_URL,\n        config.GREENFIELD_CHAIN_ID\n    );\n\n    return client;\n};\n\nexport const CONFIG = {\n    MAINNET: {\n        NETWORK: \"MAINNET\",\n        TOKENHUB_ADDRESS: \"0xeA97dF87E6c7F68C9f95A69dA79E19B834823F25\",\n        CROSSCHAIN_ADDRESS: \"0x77e719b714be09F70D484AB81F70D02B0E182f7d\",\n        GREENFIELD_RPC_URL: \"https://greenfield-chain.bnbchain.org\",\n        GREENFIELD_CHAIN_ID: \"1017\",\n        GREENFIELD_SCAN: 'https://greenfieldscan.com'\n    },\n    TESTNET: {\n        NETWORK: \"TESTNET\",\n        TOKENHUB_ADDRESS: \"0xED8e5C546F84442219A5a987EE1D820698528E04\",\n        CROSSCHAIN_ADDRESS: \"0xa5B2c9194131A4E0BFaCbF9E5D6722c873159cb7\",\n        GREENFIELD_RPC_URL:\n            \"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org\",\n        GREENFIELD_CHAIN_ID: \"5600\",\n        GREENFIELD_SCAN: 'https://testnet.greenfieldscan.com'\n    },\n};\n","import { createRequire } from \"node:module\";\nimport { readFileSync, statSync } from \"node:fs\";\nimport { extname } from \"node:path\";\nimport { lookup } from \"mime-types\";\nimport {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport { parseEther } from \"viem\";\n\nimport { CROSS_CHAIN_ABI } from \"../abi/CrossChainAbi\";\nimport { TOKENHUB_ABI } from \"../abi/TokenHubAbi\";\nimport { getGnfdConfig, InitGnfdClient } from \"../providers/gnfd\";\nimport {\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { greenfieldTemplate } from \"../templates\";\nimport type { SupportedChain } from \"../types\";\n\nexport { greenfieldTemplate };\n\nconst require = createRequire(import.meta.url);\nconst {\n  Client,\n  Long,\n  VisibilityType,\n} = require(\"@bnb-chain/greenfield-js-sdk\");\n\n/**\n * GreenfieldAction class - Handles Greenfield blockchain operations\n * \n * This class implements core functionality for interacting with the BNB Greenfield\n * decentralized storage network, including bucket creation, object uploading,\n * and cross-chain transfers.\n */\nexport class GreenfieldAction {\n  /**\n   * Creates a new GreenfieldAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   * @param gnfdClient - Greenfield client for blockchain interactions\n   */\n  constructor(\n    private walletProvider: WalletProvider,\n    private gnfdClient: typeof Client\n  ) {}\n\n  /**\n   * Get available storage providers from the Greenfield network\n   * \n   * @returns List of storage providers\n   */\n  async getSps() {\n    const sps = await this.gnfdClient.sp.getStorageProviders();\n    return sps;\n  }\n\n  /**\n   * Select an appropriate storage provider for operations\n   * \n   * @param runtime - ElizaOS runtime for configuration access\n   * @returns Selected storage provider info\n   * @throws Error if no suitable storage providers are available\n   */\n  async selectSp(runtime: IAgentRuntime) {\n    let finalSps = await this.getSps();\n    const config = await getGnfdConfig(runtime);\n\n    if (config.NETWORK === \"TESTNET\") {\n      // Filter SPs to only those containing \"nodereal\" or \"bnbchain\" in endpoint\n      const filteredSps = finalSps.filter(\n        (sp: { endpoint: string }) =>\n          sp.endpoint.includes(\"nodereal\") || sp.endpoint.includes(\"bnbchain\")\n      );\n\n      // If no matching SPs found, handle this case\n      if (filteredSps.length === 0) {\n        throw new Error(\n          \"No storage providers available with the required endpoints\"\n        );\n      }\n      finalSps = filteredSps;\n    }\n\n    const selectIndex = Math.floor(Math.random() * finalSps.length);\n\n    const secondarySpAddresses = [\n      ...finalSps.slice(0, selectIndex),\n      ...finalSps.slice(selectIndex + 1),\n    ].map((item) => item.operatorAddress);\n    \n    const selectSpInfo = {\n      id: finalSps[selectIndex].id,\n      endpoint: finalSps[selectIndex].endpoint,\n      primarySpAddress: finalSps[selectIndex]?.operatorAddress,\n      sealAddress: finalSps[selectIndex].sealAddress,\n      secondarySpAddresses,\n    };\n\n    return selectSpInfo;\n  }\n\n  /**\n   * Transfer BNB from BNB Smart Chain to Greenfield\n   * \n   * @param amount - Amount of BNB to transfer\n   * @param runtime - ElizaOS runtime for configuration access\n   * @returns Transaction hash of the transfer\n   */\n  async bnbTransferToGnfd(amount: bigint, runtime: IAgentRuntime) {\n    const config = await getGnfdConfig(runtime);\n    logger.debug(`Starting cross-chain transfer of ${amount.toString()} wei to Greenfield`);\n\n    const chain: SupportedChain =\n      config.NETWORK === \"TESTNET\" ? \"bscTestnet\" : \"bsc\";\n    logger.debug(`Using chain: ${chain}`);\n    \n    this.walletProvider.switchChain(chain);\n    const publicClient = this.walletProvider.getPublicClient(chain);\n    const walletClient = this.walletProvider.getWalletClient(chain);\n\n    try {\n      // This is how it's done in the original code\n      // Define a more specific type to avoid the 'any' linter error\n      type CrossChainReadParams = {\n        address: `0x${string}`;\n        abi: typeof CROSS_CHAIN_ABI;\n        functionName: string; // Allow any function name as string\n      };\n      \n      // Cast to our specific type that allows any function name\n      const contractParams: CrossChainReadParams = {\n        address: config.CROSSCHAIN_ADDRESS as `0x${string}`,\n        abi: CROSS_CHAIN_ABI,\n        functionName: \"getRelayFees\",\n      };\n      \n      // Use type assertions to handle the return value correctly\n      const result = await publicClient.readContract(contractParams as any);\n      const relayFee = (result as any[])[0] as bigint;\n      const ackRelayFee = (result as any[])[1] as bigint;\n      \n      logger.debug(`Received relay fees from contract - base: ${relayFee.toString()}, ack: ${ackRelayFee.toString()}`);\n      \n      const relayerFee = relayFee + ackRelayFee;\n      const totalAmount = relayerFee + amount;\n      \n      logger.debug(`Total amount for transaction (including fees): ${totalAmount.toString()}`);\n\n      logger.debug(\"Simulating transferOut contract call...\");\n      const { request } = await publicClient.simulateContract({\n        account: this.walletProvider.getAccount(),\n        address: config.TOKENHUB_ADDRESS as `0x${string}`,\n        abi: TOKENHUB_ABI,\n        functionName: \"transferOut\",\n        args: [this.walletProvider.getAddress(), amount],\n        value: totalAmount,\n      });\n\n      logger.debug(\"Submitting transaction...\");\n      const hash = await walletClient.writeContract(request);\n      logger.debug(`Transaction submitted with hash: ${hash}`);\n      \n      logger.debug(\"Waiting for transaction confirmation...\");\n      const tx = await publicClient.waitForTransactionReceipt({\n        hash,\n      });\n      logger.debug(`Transaction confirmed with status: ${tx.status}`);\n\n      return tx.transactionHash;\n    } catch (error) {\n      logger.error(\"Error during transferToGnfd:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new bucket on Greenfield\n   * \n   * @param msg - Create bucket message parameters\n   * @returns Transaction hash of the bucket creation\n   */\n  async createBucket(msg: {\n    bucketName: string;\n    creator: string;\n    visibility: number;\n    chargedReadQuota: { fromString: (value: string) => unknown }; // Long type from greenfield-js-sdk\n    paymentAddress: string;\n    primarySpAddress: string;\n  }) {\n    logger.debug(\"Creating bucket...\");\n    const createBucketTx = await this.gnfdClient.bucket.createBucket(msg);\n\n    const createBucketTxSimulateInfo = await createBucketTx.simulate({\n      denom: \"BNB\",\n    });\n\n    const createBucketTxRes = await createBucketTx.broadcast({\n      denom: \"BNB\",\n      gasLimit: Number(createBucketTxSimulateInfo?.gasLimit),\n      gasPrice: createBucketTxSimulateInfo?.gasPrice || \"5000000000\",\n      payer: msg.paymentAddress,\n      granter: \"\",\n      privateKey: this.walletProvider.getPk(),\n    });\n\n    logger.debug(\"createBucketTxRes\", createBucketTxRes);\n\n    if (createBucketTxRes.code === 0) {\n      logger.info(\"Create bucket success\");\n    }\n    return createBucketTxRes.transactionHash;\n  }\n\n  /**\n   * Get bucket information by name\n   * \n   * @param bucketName - Name of the bucket to query\n   * @returns Bucket ID\n   */\n  async headBucket(bucketName: string) {\n    const { bucketInfo } = await this.gnfdClient.bucket.headBucket(bucketName);\n    return bucketInfo.id;\n  }\n\n  /**\n   * Upload an object to a Greenfield bucket\n   * \n   * @param msg - Upload object message parameters\n   * @returns Result message from the upload operation\n   */\n  async uploadObject(msg: {\n    bucketName: string;\n    objectName: string;\n    body: {\n      name: string;\n      type: string;\n      size: number;\n      content: Buffer;\n    };\n    delegatedOpts: {\n      visibility: number;\n    };\n  }) {\n    logger.debug(\"Starting uploadObject action\");\n    const uploadRes = await this.gnfdClient.object.delegateUploadObject(\n      msg,\n      {\n        type: \"ECDSA\",\n        privateKey: this.walletProvider.getPk(),\n      }\n    );\n    if (uploadRes.code === 0) {\n      logger.info(\"Upload object success\");\n    }\n    return uploadRes.message;\n  }\n\n  /**\n   * Get object information by bucket and object name\n   * \n   * @param bucketName - Name of the bucket containing the object\n   * @param objectName - Name of the object to query\n   * @returns Object ID\n   */\n  async headObject(bucketName: string, objectName: string) {\n    const { objectInfo } = await this.gnfdClient.object.headObject(\n      bucketName,\n      objectName\n    );\n    return objectInfo.id;\n  }\n\n  /**\n   * Delete an object from a Greenfield bucket\n   * \n   * @param msg - Delete object message parameters\n   * @returns Transaction hash of the delete operation\n   */\n  async deleteObject(msg: {\n    bucketName: string;\n    objectName: string;\n    operator: string;\n  }) {\n    const deleteObjectTx = await this.gnfdClient.object.deleteObject(msg);\n\n    const simulateInfo = await deleteObjectTx.simulate({\n      denom: \"BNB\",\n    });\n\n    const res = await deleteObjectTx.broadcast({\n      denom: \"BNB\",\n      gasLimit: Number(simulateInfo?.gasLimit),\n      gasPrice: simulateInfo?.gasPrice || \"5000000000\",\n      payer: msg.operator,\n      granter: \"\",\n      privateKey: this.walletProvider.getPk(),\n    });\n\n    if (res.code === 0) {\n      logger.info(\"Delete object success\");\n    }\n\n    return res.transactionHash;\n  }\n}\n\n/**\n * Extended Media type that includes name property\n */\ninterface GnfdAttachment {\n  url?: string;\n  type?: string;\n  name?: string;\n  content?: Buffer | string;\n  base64?: string;\n  data?: Buffer | string;\n  path?: string;\n}\n\n/**\n * Generate a file object from a media attachment\n * \n * @param attachment - Media attachment metadata\n * @returns File object compatible with Greenfield SDK\n * @throws Error if the file type is unsupported\n */\nfunction generateFile(attachment: GnfdAttachment) {\n  try {\n    // Check if we have a direct URL to a file\n    if (attachment.url) {\n      const filePath = fixPath(attachment.url);\n      logger.debug(`Processing attachment with URL: ${filePath}`);\n      \n      try {\n        const stats = statSync(filePath);\n        const fileSize = stats.size;\n        const nameExt = extname(filePath) || '.dat';\n        const type = lookup(nameExt) || 'application/octet-stream';\n        \n        logger.debug(`File stats: size=${fileSize}, type=${type}, ext=${nameExt}`);\n        \n        return {\n          name: filePath,\n          type,\n          size: fileSize,\n          content: readFileSync(filePath),\n        };\n      } catch (fileError) {\n        const errorMsg = fileError instanceof Error ? fileError.message : String(fileError);\n        logger.debug(`Error reading file from URL: ${errorMsg}, trying alternative methods`);\n      }\n    }\n    \n    // Check if we have direct content (binary data)\n    if (attachment.content) {\n      logger.debug(\"Processing attachment with direct content\");\n      const content = Buffer.isBuffer(attachment.content) \n        ? attachment.content \n        : Buffer.from(String(attachment.content));\n      \n      const fileName = attachment.name || 'file.dat';\n      const nameExt = extname(fileName) || '.dat';\n      const type = lookup(nameExt) || 'application/octet-stream';\n      \n      return {\n        name: fileName,\n        type,\n        size: content.length,\n        content,\n      };\n    }\n    \n    // Check if we have base64 data\n    if (attachment.base64) {\n      logger.debug(\"Processing attachment with base64 data\");\n      const content = Buffer.from(attachment.base64, 'base64');\n      const fileName = attachment.name || 'file.dat';\n      const nameExt = extname(fileName) || '.dat';\n      const type = lookup(nameExt) || 'application/octet-stream';\n      \n      return {\n        name: fileName,\n        type,\n        size: content.length,\n        content,\n      };\n    }\n    \n    // Check if we have a path property\n    if (attachment.path) {\n      logger.debug(`Processing attachment with path: ${attachment.path}`);\n      const filePath = attachment.path;\n      const stats = statSync(filePath);\n      const fileSize = stats.size;\n      const nameExt = extname(filePath) || '.dat';\n      const type = lookup(nameExt) || 'application/octet-stream';\n      \n      return {\n        name: filePath,\n        type,\n        size: fileSize,\n        content: readFileSync(filePath),\n      };\n    }\n    \n    // If we get here, we don't have a usable file source\n    throw new Error(`No valid file content in attachment: ${JSON.stringify(attachment)}`);\n  } catch (error) {\n    const errorMsg = error instanceof Error ? error.message : String(error);\n    logger.error(`Error generating file from attachment: ${errorMsg}`);\n    throw new Error(`Failed to process attachment: ${errorMsg}`);\n  }\n}\n\n/**\n * Fix path issues in file URLs\n * \n * @param url - File URL to fix\n * @returns Corrected file path\n */\nfunction fixPath(url: string) {\n  return url.replace(\"/agent/agent/\", \"/agent/\");\n}\n\n/**\n * Convert a number to hexadecimal format\n * \n * @param n - Number to convert as string\n * @returns Hexadecimal representation with 0x prefix\n */\nfunction toHex(n: string) {\n  return `0x${Number(n).toString(16).padStart(64, \"0\")}`;\n}\n\n/**\n * Action for Greenfield blockchain operations\n * \n * This action handles storage operations on Greenfield decentralized storage network,\n * including bucket creation, object management, and cross-chain transfers.\n */\nexport const greenfieldAction: Action = {\n  name: \"GREENFIELD_BNB\",\n  similes: [\n    \"CREATE_BUCKET_BNB\",\n    \"UPLOAD_OBJECT_BNB\",\n    \"DELETE_BUCKET_BNB\",\n    \"DELETE_OBJECT_BNB\",\n    \"TRANSFER_BNB_TO_GREENFIELD\",\n    \"BNB_GREENFIELD_STORAGE\",\n    \"GREENFIELD_STORAGE_BNB\",\n    \"GREENFIELD_BNB\",\n    \"UPLOAD_TO_GREENFIELD\",\n    \"UPLOAD_FILE_GREENFIELD\",\n    \"UPLOAD_IMAGE_GREENFIELD\",\n    \"UPLOAD_DOCUMENT_GREENFIELD\",\n    \"STORE_ON_GREENFIELD\",\n    \"SAVE_TO_GREENFIELD\",\n    \"UPLOAD\",\n    \"SAVE_FILE\",\n    \"STORE_FILE\",\n    \"PUT_FILE\",\n    \"UPLOAD_PATH\",\n    \"SAVE_PATH\"\n  ],\n  description:\n    \"Manage storage on BNB Greenfield blockchain - create buckets, upload files/images/documents, list buckets, delete objects, and perform cross-chain transfers\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Starting GREENFIELD_BNB action\");\n    \n    // Detailed message structure logging\n    logger.debug(\"=== MESSAGE STRUCTURE DEBUGGING ===\");\n    logger.debug(`Message type: ${typeof message}`);\n    logger.debug(`Message keys: ${Object.keys(message).join(', ')}`);\n    logger.debug(`Content type: ${typeof message.content}`);\n    if (message.content) {\n      logger.debug(`Content keys: ${Object.keys(message.content).join(', ')}`);\n    }\n    \n    // Log raw message content for diagnosis\n    try {\n      logger.debug(\"Raw message content:\");\n      logger.debug(JSON.stringify(message, null, 2));\n    } catch (error) {\n      logger.debug(\"Could not stringify full message:\", error);\n    }\n    \n    // Focused attachment debugging\n    if (message.content && 'attachments' in message.content) {\n      logger.debug(\"=== ATTACHMENTS DEBUGGING ===\");\n      const attachments = message.content.attachments;\n      logger.debug(`Attachments exists: ${!!attachments}`);\n      logger.debug(`Attachments type: ${typeof attachments}`);\n      \n      if (Array.isArray(attachments)) {\n        logger.debug(`Attachments count: ${attachments.length}`);\n        \n        // Log each attachment\n        attachments.forEach((attachment, i) => {\n          logger.debug(`--- Attachment #${i + 1} ---`);\n          logger.debug(`Type: ${typeof attachment}`);\n          \n          // Safe way to access keys without type errors\n          const attachmentObj = attachment as Record<string, unknown>;\n          const keys = Object.keys(attachmentObj);\n          logger.debug(`Keys: ${keys.join(', ')}`);\n          \n          // Log important properties\n          logger.debug(`attachment.type: ${attachmentObj.type || 'undefined'}`);\n          logger.debug(`attachment.url: ${attachmentObj.url || 'undefined'}`);\n          logger.debug(`attachment.name: ${attachmentObj.name || 'undefined'}`);\n          logger.debug(`attachment.path: ${attachmentObj.path || 'undefined'}`);\n          logger.debug(`attachment.content exists: ${!!attachmentObj.content}`);\n          logger.debug(`attachment.base64 exists: ${!!attachmentObj.base64}`);\n          logger.debug(`attachment.data exists: ${!!attachmentObj.data}`);\n          logger.debug(`attachment.contentType: ${attachmentObj.contentType || 'undefined'}`);\n          \n          // Detect potential nested structure\n          keys.forEach(key => {\n            const value = attachmentObj[key];\n            if (typeof value === 'object' && value !== null) {\n              logger.debug(`Nested object found in attachment.${key}`);\n              logger.debug(`Keys: ${Object.keys(value as Record<string, unknown>).join(', ')}`);\n            }\n          });\n          \n          // Log the full attachment for complete analysis (with some safety checks)\n          try {\n            const safeAttachment = {...attachmentObj};\n            \n            // Remove any potentially large binary/base64 data for safer logging\n            if ('content' in safeAttachment) safeAttachment.content = '[CONTENT REMOVED FOR LOGGING]';\n            if ('base64' in safeAttachment) safeAttachment.base64 = '[BASE64 REMOVED FOR LOGGING]';\n            if ('data' in safeAttachment) safeAttachment.data = '[DATA REMOVED FOR LOGGING]';\n            \n            logger.debug(`Full attachment #${i + 1}:`, JSON.stringify(safeAttachment, null, 2));\n          } catch (error) {\n            logger.debug(`Could not stringify attachment #${i + 1}:`, error instanceof Error ? error.message : String(error));\n          }\n        });\n      } else {\n        logger.debug(`Attachments is not an array. Value:`, attachments);\n      }\n    } else {\n      logger.debug(\"No attachments property found in message.content\");\n    }\n    logger.debug(\"=== END DEBUGGING ===\");\n    \n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n\n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n\n    // Extract Greenfield parameters using the model\n    const templateData = {\n      template: greenfieldTemplate,\n      state: currentState\n    };\n\n    logger.debug(\"Generating Greenfield parameters using model\");\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(templateData),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Parse the JSON output - handle markdown code blocks if present\n    let content: Record<string, unknown>;\n    try {\n      let jsonString = typeof mlOutput === 'string' ? mlOutput : JSON.stringify(mlOutput);\n      \n      // Check if the output is wrapped in markdown code blocks\n      if (typeof jsonString === 'string') {\n        // Clean up markdown code blocks if present\n        const jsonRegex = /```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/;\n        const match = jsonString.match(jsonRegex);\n        \n        if (match?.[1]) {\n          jsonString = match[1];\n          logger.debug(\"Extracted JSON from markdown code block\");\n        }\n        \n        // Remove any trailing/leading whitespace\n        jsonString = jsonString.trim();\n      }\n      \n      // Parse the cleaned JSON string\n      content = JSON.parse(jsonString);\n      logger.debug(\"Generated Greenfield parameters:\", JSON.stringify(content, null, 2));\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", mlOutput);\n      \n      // Attempt to extract basic parameters with regex as fallback\n      logger.debug(\"Attempting to extract parameters with regex as fallback\");\n      const promptText = typeof message.content.text === 'string' ? message.content.text : '';\n      \n      // Check if initialization is requested\n      const initializeRequested = promptText.toLowerCase().includes(\"initialize\") || \n                                 promptText.toLowerCase().includes(\"init\") ||\n                                 promptText.toLowerCase().includes(\"setup account\");\n      \n      // Extract bucket name with regex\n      const bucketNameRegex = /bucket(?:\\s+called|\\s+named)?\\s+['\"]([^'\"]+)['\"]/i;\n      const bucketMatch = promptText.match(bucketNameRegex);\n      \n      // Extract object name with regex (if present)\n      const objectNameRegex = /(?:upload|file|object|document|image)(?:\\s+called|\\s+named)?\\s+['\"]([^'\"]+)['\"]/i;\n      const objectMatch = promptText.match(objectNameRegex);\n      // Safely get the object name\n      const extractedObjectName = objectMatch && objectMatch.length > 1 ? objectMatch[1] : null;\n      \n      // Detect action type from text\n      let actionType = \"createBucket\"; // Default\n      if (promptText.toLowerCase().includes(\"upload\") || \n          promptText.toLowerCase().includes(\"save file\") || \n          promptText.toLowerCase().includes(\"store file\") ||\n          promptText.toLowerCase().includes(\"put file\")) {\n        actionType = \"uploadObject\";\n      } else if (promptText.toLowerCase().includes(\"delete\")) {\n        actionType = \"deleteObject\";\n      } else if (promptText.toLowerCase().includes(\"transfer\") || \n                promptText.toLowerCase().includes(\"send bnb\")) {\n        actionType = \"crossChainTransfer\";\n      }\n      \n      // Look for file paths in the message (for upload actions)\n      let filePath = null;\n      if (actionType === \"uploadObject\") {\n        // More aggressive file path regex that can catch both quoted and unquoted paths\n        const filePathRegex = /(?:upload|save|store|put|file|path|image|photo|document)\\s+(?:file|path|image|photo|document)?\\s*['\"\"]?([\\/\\\\][^'\"\\s]+\\.[a-zA-Z0-9]+)['\"\"]?/i;\n        const filePathMatch = promptText.match(filePathRegex);\n        \n        if (filePathMatch && filePathMatch[1]) {\n          filePath = filePathMatch[1];\n          logger.debug(`Found file path in prompt: ${filePath}`);\n        }\n      }\n      \n      if (bucketMatch || initializeRequested || filePath) {\n        content = {\n          actionType: initializeRequested ? \"crossChainTransfer\" : actionType,\n          bucketName: bucketMatch ? bucketMatch[1] : null,\n          objectName: extractedObjectName,\n          filePath: filePath,\n          // Add initialization flag\n          initializeAccount: initializeRequested\n        };\n        logger.debug(\"Extracted parameters with regex:\", JSON.stringify(content, null, 2));\n      } else {\n        callback?.({\n          text: \"Failed to process Greenfield parameters. Please try again with a more specific request.\",\n          content: { error: \"Invalid model output format and unable to extract parameters\" },\n        });\n        return false;\n      }\n    }\n\n    // Check if initialization is explicitly requested in the extracted content\n    const initializeAccount = content.initializeAccount === true || \n                             (typeof content.initializeAccount === 'string' && \n                              content.initializeAccount.toLowerCase() === 'true');\n\n    try {\n      const config = await getGnfdConfig(runtime);\n      const gnfdClient = await InitGnfdClient(runtime);\n      const walletProvider = initWalletProvider(runtime);\n      const action = new GreenfieldAction(walletProvider, gnfdClient);\n\n      // Get action type, supporting the case when we need to initialize first\n      let actionType = content.actionType as string;\n      logger.debug(`Original action type: ${actionType}`);\n      \n      // Try to get the wallet address\n      const address = walletProvider.getAddress();\n      logger.debug(`Using wallet address: ${address}`);\n      \n      // Check if account is initialized or needs initialization\n      let accountInitialized = true;\n      let accountCheckError = null;\n      \n      try {\n        // Attempt to get account info - this will throw an error if account is not initialized\n        await gnfdClient.account.getAccount(address);\n        logger.debug(\"Account is already initialized on Greenfield\");\n      } catch (error) {\n        accountInitialized = false;\n        accountCheckError = error;\n        logger.debug(\"Account not initialized on Greenfield:\", error);\n      }\n      \n      // Handle initialization if needed\n      if (!accountInitialized && (initializeAccount || actionType !== \"crossChainTransfer\")) {\n        logger.info(\"Account needs initialization, performing cross-chain transfer\");\n        \n        // Store the original action to resume after initialization\n        const originalActionType = actionType;\n        // Set action type to cross-chain transfer\n        actionType = \"crossChainTransfer\";\n        \n        try {\n          // Default small amount to initialize account\n          const initAmount = parseEther(\"0.001\");\n          logger.debug(`Initializing account with ${initAmount.toString()} wei`);\n          \n          // Perform the cross-chain transfer to initialize the account\n          const txHash = await action.bnbTransferToGnfd(initAmount, runtime);\n          logger.debug(`Initialization transaction hash: ${txHash}`);\n          \n          // Create explorer URL\n          const explorerUrl = `${config.NETWORK === \"TESTNET\" ? \n            \"https://testnet.bscscan.com\" : \n            \"https://bscscan.com\"}/tx/${txHash}`;\n          \n          // After sending the cross-chain transfer for initialization, add better waiting and verification\n          logger.debug(\"Waiting for account to be initialized on Greenfield...\");\n          callback?.({\n            text: \"Your account initialization is in progress. This process may take 30-60 seconds to complete. I'll proceed once your account is ready.\",\n            content: {\n              status: \"initializing\",\n              message: \"Waiting for account initialization to complete\",\n              txHash\n            }\n          });\n          \n          // Create a function to check if account is properly initialized\n          const checkAccountInitialized = async (address: string, maxRetries = 10): Promise<boolean> => {\n            logger.debug(`Checking if account ${address} is initialized on Greenfield...`);\n            \n            for (let attempt = 1; attempt <= maxRetries; attempt++) {\n              try {\n                logger.debug(`Initialization check attempt ${attempt}/${maxRetries}`);\n                await gnfdClient.account.getAccount(address);\n                logger.debug(\"Account successfully initialized on Greenfield!\");\n                return true;\n              } catch (error) {\n                const errorMsg = error instanceof Error ? error.message : String(error);\n                logger.debug(`Account not yet initialized (attempt ${attempt}/${maxRetries}): ${errorMsg}`);\n                \n                if (attempt < maxRetries) {\n                  // Wait longer between each attempt - start with 5s, increase gradually\n                  const waitTime = 5000 + (attempt * 2000);\n                  logger.debug(`Waiting ${waitTime/1000} seconds before next check...`);\n                  await new Promise(resolve => setTimeout(resolve, waitTime));\n                } else {\n                  logger.warn(\"Maximum initialization check attempts reached. Account might not be properly initialized.\");\n                  return false;\n                }\n              }\n            }\n            \n            return false;\n          };\n          \n          // Wait for transfer to be processed and account to be properly initialized\n          const isInitialized = await checkAccountInitialized(address);\n          \n          if (!isInitialized) {\n            logger.warn(\"Account initialization may not have completed successfully\");\n            callback?.({\n              text: `⚠️ ACCOUNT INITIALIZATION PENDING\n\nYour account initialization transaction was sent, but your account is not yet ready on Greenfield.\n\nThis could be because:\n1. The cross-chain transfer is still being processed (can take up to 5 minutes)\n2. There was an issue with the initialization process\n\nYou can:\n- Wait a bit longer and try again\n- Check the transaction status: ${explorerUrl}\n- Try initializing with a larger amount (0.01 BNB)\n\nTransaction hash: ${txHash}`,\n              content: {\n                success: false,\n                error: \"Account initialization not completed within expected time\",\n                txHash,\n                explorerUrl,\n                action: \"waitingForInitialization\"\n              }\n            });\n            return false;\n          }\n          \n          // Account is initialized, reset the action type to the original request\n          actionType = originalActionType;\n          logger.debug(`Account successfully initialized, resuming original action: ${actionType}`);\n          \n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          logger.error(\"Failed to initialize account:\", errorMessage);\n          \n          // Provide clear feedback about initialization failure\n          callback?.({\n            text: `❌ ACCOUNT INITIALIZATION FAILED\n\nI was unable to initialize your Greenfield account due to an error:\n${errorMessage}\n\nPlease try again later or manually transfer BNB from BSC to your Greenfield account.`,\n            content: {\n              success: false,\n              error: errorMessage,\n              action: \"crossChainTransfer\",\n              walletAddress: address\n            }\n          });\n          return false;\n        }\n      }\n      \n      // Try to select a storage provider - this step may identify account issues early\n      try {\n        const spInfo = await action.selectSp(runtime);\n        logger.debug(\"Selected storage provider:\", spInfo);\n  \n        const bucketName = content.bucketName as string;\n        const objectName = content.objectName as string;\n        const attachments = message.content.attachments;\n        \n        // Skip if just initializing the account\n        if (actionType === \"crossChainTransfer\" && !bucketName) {\n          const amount = content.amount ? String(content.amount) : \"0.001\";\n          const txAmount = content.amount ? parseEther(String(content.amount)) : parseEther(\"0.001\");\n          logger.debug(`Performing standalone cross-chain transfer of ${amount} BNB`);\n          \n          const transactionHash = await action.bnbTransferToGnfd(txAmount, runtime);\n          logger.debug(`Transfer transaction hash: ${transactionHash}`);\n          \n          const resourceUrl = `${config.NETWORK === \"TESTNET\" ? \n            \"https://testnet.bscscan.com\" : \n            \"https://bscscan.com\"}/tx/${transactionHash}`;\n          \n          // Create a well-formatted, detailed response text\n          const textResponse = `✅ BNB TRANSFERRED TO GREENFIELD\n\nAmount: ${amount} BNB\nTransaction Hash: ${transactionHash}\n\nLinks:\n• View Transaction: ${resourceUrl}\n• Your Greenfield Account: ${config.GREENFIELD_SCAN}/account/${address}\n\nNote: Cross-chain transfers typically take 30-60 seconds to complete.`;\n          \n          callback?.({\n            text: textResponse,\n            content: {\n              success: true,\n              actionType: \"crossChainTransfer\",\n              amount,\n              transactionHash,\n              resourceUrl,\n              walletAddress: address\n            },\n          });\n          \n          return true;\n        }\n        \n        logger.debug(`Bucket name: ${bucketName}, Object name: ${objectName}`);\n        if (attachments?.length) {\n          logger.debug(`Found ${attachments.length} attachment(s)`);\n        }\n\n        let result = \"\";\n        let transactionHash = \"\";\n        let resourceId = \"\";\n        let resourceUrl = \"\";\n        \n        // Now execute the original action\n        logger.debug(`Executing action type: ${actionType}`);\n        \n        switch (actionType) {\n          case \"createBucket\": {\n            logger.debug(`Creating bucket: ${bucketName}`);\n            const msg = {\n              bucketName: bucketName,\n              creator: walletProvider.account.address,\n              visibility: VisibilityType.VISIBILITY_TYPE_PUBLIC_READ,\n              chargedReadQuota: Long.fromString(\"0\"),\n              paymentAddress: walletProvider.account.address,\n              primarySpAddress: spInfo.primarySpAddress,\n            };\n            transactionHash = await action.createBucket(msg);\n            logger.debug(`Bucket creation transaction hash: ${transactionHash}`);\n            \n            resourceId = await action.headBucket(msg.bucketName);\n            logger.debug(`Bucket ID: ${resourceId}`);\n            \n            resourceUrl = `${config.GREENFIELD_SCAN}/bucket/${toHex(resourceId)}`;\n            result = `Bucket \"${bucketName}\" created successfully. View details at: ${resourceUrl}`;\n            break;\n          }\n\n          case \"uploadObject\": {\n            let fileToUpload: { name: string; type: string; size: number; content: Buffer } | undefined;\n            let uploadObjName = \"unnamed-file\"; // Default value to ensure it's always a string\n            \n            logger.debug(`Processing upload request for bucket: ${bucketName}`);\n            \n            // First check if a file path was directly specified in the message text\n            const filePath = content.filePath as string;\n            \n            if (filePath) {\n              logger.debug(`Using file path from message: ${filePath}`);\n              \n              try {\n                // Check if file exists\n                const stats = statSync(filePath);\n                \n                if (stats.isFile()) {\n                  const fileName = filePath.split('/').pop() || 'unnamed-file';\n                  const fileExtension = extname(filePath);\n                  const fileType = lookup(fileExtension) || 'application/octet-stream';\n                  \n                  fileToUpload = {\n                    name: fileName,\n                    type: fileType, \n                    size: stats.size,\n                    content: readFileSync(filePath)\n                  };\n                  \n                  uploadObjName = objectName || fileName;\n                  logger.debug(`Successfully loaded file from path: ${filePath}, size: ${stats.size} bytes, type: ${fileType}`);\n                } else {\n                  logger.debug(`Path exists but is not a file: ${filePath}`);\n                }\n              } catch (error) {\n                logger.debug(`Error accessing file path: ${error instanceof Error ? error.message : String(error)}`);\n              }\n            }\n            \n            // If no file path was directly specified, check for attachments\n            if (!fileToUpload) {\n              // Enhanced attachment logging for debugging\n              logger.debug(\"Checking for attachments in message content\");\n              \n              // Check if we have attachments in various formats\n              if (message.content.attachments && message.content.attachments.length > 0) {\n                logger.debug(`Found ${message.content.attachments.length} attachments`);\n                \n                // Loop through all attachments to find any valid one\n                for (const rawAttachment of message.content.attachments) {\n                  try {\n                    // Cast to Record for safer property access\n                    const attachment = rawAttachment as Record<string, unknown>;\n                    logger.debug(`Processing attachment with keys: ${Object.keys(attachment).join(', ')}`);\n                    \n                    // 1. Check for direct URL property (standard format)\n                    if (attachment.url && typeof attachment.url === 'string') {\n                      logger.debug(`Found attachment with URL: ${attachment.url}`);\n                      \n                      try {\n                        // Try to create a file object from the URL\n                        const filePath = attachment.url.replace(\"/agent/agent/\", \"/agent/\");\n                        const stats = statSync(filePath);\n                        \n                        if (stats.isFile()) {\n                          const fileContent = readFileSync(filePath);\n                          const fileName = (attachment.name as string) || filePath.split('/').pop() || 'unnamed-file';\n                          const fileExtension = extname(fileName);\n                          const fileType = lookup(fileExtension) || 'application/octet-stream';\n                          \n                          fileToUpload = {\n                            name: fileName,\n                            type: fileType,\n                            size: fileContent.length,\n                            content: fileContent\n                          };\n                          \n                          uploadObjName = objectName || fileName;\n                          logger.debug(`Created file object from URL: ${fileName}, type: ${fileType}, size: ${fileContent.length}`);\n                          break;\n                        }\n                      } catch (urlError) {\n                        logger.debug(`Error processing URL attachment: ${urlError instanceof Error ? urlError.message : String(urlError)}`);\n                      }\n                    }\n                    \n                    // 2. Check for data/binary content (UI format)\n                    if ((attachment.data || attachment.content) && !fileToUpload) {\n                      logger.debug(\"Found attachment with data/content property\");\n                      \n                      // Extract the binary data\n                      let binaryData: Buffer;\n                      if (attachment.data) {\n                        if (Buffer.isBuffer(attachment.data)) {\n                          binaryData = attachment.data;\n                        } else if (typeof attachment.data === 'string') {\n                          binaryData = Buffer.from(attachment.data);\n                        } else {\n                          logger.debug(`Attachment data is not in a usable format: ${typeof attachment.data}`);\n                          continue;\n                        }\n                      } else if (attachment.content) {\n                        if (Buffer.isBuffer(attachment.content)) {\n                          binaryData = attachment.content;\n                        } else if (typeof attachment.content === 'string') {\n                          binaryData = Buffer.from(attachment.content);\n                        } else {\n                          logger.debug(`Attachment content is not in a usable format: ${typeof attachment.content}`);\n                          continue;\n                        }\n                      } else {\n                        continue;\n                      }\n                      \n                      // Create file object\n                      const fileName = (attachment.name as string) || (attachment.filename as string) || 'file.dat';\n                      const fileType = (attachment.type as string) || \n                                     (attachment.contentType as string) || \n                                     lookup(extname(fileName)) || \n                                     'application/octet-stream';\n                      \n                      fileToUpload = {\n                        name: fileName,\n                        type: fileType,\n                        size: binaryData.length,\n                        content: binaryData\n                      };\n                      \n                      uploadObjName = objectName || fileName;\n                      logger.debug(`Created file object from binary data: ${fileName}, type: ${fileType}, size: ${binaryData.length}`);\n                      break;\n                    }\n                    \n                    // 3. Check for base64 content\n                    if (attachment.base64 && typeof attachment.base64 === 'string' && !fileToUpload) {\n                      logger.debug(\"Found attachment with base64 property\");\n                      \n                      const binaryData = Buffer.from(attachment.base64, 'base64');\n                      const fileName = (attachment.name as string) || 'file.dat';\n                      const fileType = (attachment.type as string) || \n                                     lookup(extname(fileName)) || \n                                     'application/octet-stream';\n                      \n                      fileToUpload = {\n                        name: fileName,\n                        type: fileType,\n                        size: binaryData.length,\n                        content: binaryData\n                      };\n                      \n                      uploadObjName = objectName || fileName;\n                      logger.debug(`Created file object from base64 data: ${fileName}, type: ${fileType}`);\n                      break;\n                    }\n                  } catch (error) {\n                    logger.debug(`Error processing attachment: ${error instanceof Error ? error.message : String(error)}`);\n                  }\n                }\n              } else {\n                logger.debug(\"No attachments found in message content\");\n              }\n            }\n            \n            // If we still don't have a file, check if a sample file exists in the package directory\n            if (!fileToUpload) {\n              logger.debug(\"Checking for sample file as fallback\");\n              \n              // List of potential sample file locations\n              const sampleFiles = [\n                './README.md',\n                './package.json',\n                '../README.md'\n              ];\n              \n              for (const sample of sampleFiles) {\n                try {\n                  const stats = statSync(sample);\n                  \n                  if (stats.isFile()) {\n                    const fileName = sample.split('/').pop() || 'sample-file';\n                    const fileExtension = extname(sample);\n                    const fileType = lookup(fileExtension) || 'application/octet-stream';\n                    \n                    fileToUpload = {\n                      name: sample,\n                      type: fileType,\n                      size: stats.size,\n                      content: readFileSync(sample)\n                    };\n                    \n                    uploadObjName = objectName || fileName;\n                    logger.debug(`Using sample file: ${sample}, type: ${fileType}, size: ${stats.size} bytes`);\n                    break;\n                  }\n                } catch (error) {\n                  // Continue to next sample\n                }\n              }\n            }\n            \n            // Final check to ensure we have a file to upload\n            if (!fileToUpload) {\n              throw new Error(\"No file found to upload. Please attach a file or specify a file path.\");\n            }\n            \n            logger.debug(`Uploading object: ${uploadObjName} to bucket: ${bucketName}`);\n            logger.debug(`File details - Type: ${fileToUpload.type}, Size: ${fileToUpload.size} bytes`);\n\n            const uploadResponse = await action.uploadObject({\n              bucketName,\n              objectName: uploadObjName,\n              body: fileToUpload,\n              delegatedOpts: {\n                visibility: VisibilityType.VISIBILITY_TYPE_PUBLIC_READ,\n              },\n            });\n            logger.debug(`Upload response: ${uploadResponse}`);\n            \n            resourceId = await action.headObject(bucketName, uploadObjName);\n            logger.debug(`Object ID: ${resourceId}`);\n            \n            resourceUrl = `${config.GREENFIELD_SCAN}/object/${toHex(resourceId)}`;\n            \n            if (attachments && attachments.length > 1) {\n              result = \"Note: Only the first file was uploaded. \";\n            }\n            result += `File \"${uploadObjName}\" uploaded successfully to bucket \"${bucketName}\". View details at: ${resourceUrl}`;\n            break;\n          }\n\n          case \"deleteObject\": {\n            logger.debug(`Deleting object: ${objectName} from bucket: ${bucketName}`);\n            transactionHash = await action.deleteObject({\n              bucketName,\n              objectName,\n              operator: walletProvider.account.address,\n            });\n            logger.debug(`Delete transaction hash: ${transactionHash}`);\n            \n            resourceUrl = `${config.GREENFIELD_SCAN}/tx/${transactionHash}`;\n            result = `Object \"${objectName}\" deleted successfully from bucket \"${bucketName}\". View transaction: ${resourceUrl}`;\n            break;\n          }\n\n          case \"crossChainTransfer\": {\n            const amountStr = content.amount || \"0.00001\";\n            const amount = content.amount ? parseEther(String(content.amount)) : parseEther(\"0.00001\");\n            logger.debug(`Cross-chain transfer amount: ${amountStr} BNB (${amount.toString()} wei)`);\n            \n            transactionHash = await action.bnbTransferToGnfd(amount, runtime);\n            logger.debug(`Transfer transaction hash: ${transactionHash}`);\n            \n            resourceUrl = `${config.NETWORK === \"TESTNET\" ? \n              \"https://testnet.bscscan.com\" : \n              \"https://bscscan.com\"}/tx/${transactionHash}`;\n            \n            result = `Successfully transferred ${amountStr} BNB from BNB Smart Chain to Greenfield. View transaction: ${resourceUrl}`;\n            break;\n          }\n\n          default:\n            throw new Error(`Unknown action type: ${actionType}. Please specify a valid Greenfield operation.`);\n        }\n        \n        logger.debug(`Operation completed successfully: ${result}`);\n        \n        // Create a well-formatted, detailed response text\n        let textResponse = \"\";\n        \n        // Build response header based on action type\n        switch (actionType) {\n          case \"createBucket\":\n            textResponse = \"✅ BUCKET CREATED SUCCESSFULLY\\n\\n\";\n            break;\n          case \"uploadObject\":\n            textResponse = \"✅ FILE UPLOADED SUCCESSFULLY\\n\\n\";\n            break;\n          case \"deleteObject\":\n            textResponse = \"✅ OBJECT DELETED SUCCESSFULLY\\n\\n\";\n            break;\n          case \"crossChainTransfer\":\n            textResponse = \"✅ BNB TRANSFERRED TO GREENFIELD\\n\\n\";\n            break;\n        }\n        \n        // Add operation details\n        if (bucketName) {\n          textResponse += `Bucket: ${bucketName}\\n`;\n        }\n        \n        if (objectName && (actionType === \"uploadObject\" || actionType === \"deleteObject\")) {\n          textResponse += `Object: ${objectName}\\n`;\n        }\n        \n        if (actionType === \"crossChainTransfer\") {\n          const amountStr = content.amount || \"0.00001\";\n          textResponse += `Amount: ${amountStr} BNB\\n`;\n        }\n        \n        // Add transaction details\n        if (transactionHash) {\n          textResponse += `Transaction Hash: ${transactionHash}\\n`;\n        }\n        \n        if (resourceId) {\n          textResponse += `Resource ID: ${resourceId}\\n`;\n        }\n        \n        // Add storage provider info for creation operations\n        if (actionType === \"createBucket\") {\n          textResponse += \"\\nStorage Provider:\\n\";\n          textResponse += `• ID: ${spInfo.id}\\n`;\n          textResponse += `• Endpoint: ${spInfo.endpoint}\\n`;\n          textResponse += `• Address: ${spInfo.primarySpAddress}\\n`;\n        }\n        \n        // Add links section\n        textResponse += \"\\nLinks:\\n\";\n        \n        if (resourceUrl) {\n          if (actionType === \"createBucket\") {\n            textResponse += `• View Bucket: ${resourceUrl}\\n`;\n          } else if (actionType === \"uploadObject\") {\n            textResponse += `• View Object: ${resourceUrl}\\n`;\n          } else if (actionType === \"deleteObject\") {\n            textResponse += `• View Transaction: ${resourceUrl}\\n`;\n          } else if (actionType === \"crossChainTransfer\") {\n            textResponse += `• View Transaction: ${resourceUrl}\\n`;\n          }\n        }\n        \n        if (actionType === \"createBucket\" || actionType === \"uploadObject\") {\n          textResponse += `• Greenfield Explorer: ${config.GREENFIELD_SCAN}\\n`;\n        }\n        \n        // Add wallet info if relevant\n        if (actionType === \"createBucket\" || actionType === \"uploadObject\" || actionType === \"deleteObject\") {\n          const walletUrl = `${config.GREENFIELD_SCAN}/account/${walletProvider.account.address}`;\n          textResponse += `• Your Greenfield Account: ${walletUrl}\\n`;\n        }\n        \n        // Add footer notes\n        textResponse += \"\\nNote: \";\n        if (actionType === \"createBucket\") {\n          textResponse += \"You can now upload files to this bucket using the GREENFIELD_BNB action.\";\n        } else if (actionType === \"uploadObject\") {\n          textResponse += \"Files stored on Greenfield are permanently stored on the decentralized network unless explicitly deleted.\";\n        } else if (actionType === \"crossChainTransfer\") {\n          textResponse += \"Cross-chain transfers typically take 30-60 seconds to complete.\";\n        } else if (actionType === \"deleteObject\") {\n          textResponse += \"Deleted objects cannot be recovered. This operation is permanent.\";\n        }\n        \n        // Enhanced structured response\n        callback?.({\n          text: textResponse,\n          content: {\n            success: true,\n            actionType,\n            result,\n            bucketName,\n            objectName,\n            transactionHash,\n            resourceId,\n            resourceUrl,\n            spInfo: {\n              id: spInfo.id,\n              endpoint: spInfo.endpoint,\n              primarySpAddress: spInfo.primarySpAddress\n            }\n          },\n        });\n\n        return true;\n      } catch (error) {\n        // Check for account not found error which is common for first-time users\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        \n        if (errorMessage.includes(\"account not found\") || \n            errorMessage.includes(\"key not found\") ||\n            errorMessage.includes(\"not initialized\")) {\n          \n          logger.warn(\"Account not initialized on Greenfield:\", errorMessage);\n          \n          // Create a helpful response guiding the user to initialize their account first\n          const textResponse = `⚠️ ACCOUNT INITIALIZATION REQUIRED\n\nYour wallet account (${address}) has not been initialized on the Greenfield network yet.\n\nBefore you can create buckets or upload files, you need to initialize your account by transferring a small amount of BNB from BSC to Greenfield.\n\nYou can do this by:\n1. Use the \"GREENFIELD_BNB\" action with a cross-chain transfer\n2. Send a message like: \"Transfer 0.01 BNB from BSC to my Greenfield account\"\n\nOnce your account is initialized, you can try creating your bucket again.`;\n          \n          callback?.({\n            text: textResponse,\n            content: { \n              success: false,\n              error: \"Account not initialized on Greenfield\",\n              action: \"crossChainTransfer\",\n              walletAddress: address,\n              suggestedAction: \"Please perform a cross-chain transfer to initialize your account.\"\n            },\n          });\n          return false;\n        }\n        \n        // Re-throw other errors to be caught by the main error handler\n        throw error;\n      }\n    } catch (error: unknown) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      logger.error(\"Error executing Greenfield action:\", errorObj.message);\n      logger.debug(\"Error details:\", errorObj.stack || \"No stack trace available\");\n      \n      // Provide user-friendly error messages\n      let errorMessage = errorObj.message;\n      \n      if (errorMessage.includes(\"no file to upload\")) {\n        errorMessage = \"Please attach a file to upload.\";\n      } else if (errorMessage.includes(\"only those containing\")) {\n        errorMessage = \"No suitable storage providers found. Please try again later.\";\n      } else if (errorMessage.includes(\"already exists\")) {\n        errorMessage = \"A bucket or object with that name already exists. Please choose a different name.\";\n      } else if (errorMessage.includes(\"insufficient funds\")) {\n        errorMessage = \"Insufficient funds to complete this operation. Please ensure you have enough BNB.\";\n      } else if (errorMessage.includes(\"account not found\") || errorMessage.includes(\"key not found\")) {\n        errorMessage = \"Your account hasn't been initialized on Greenfield. Please transfer BNB from BSC to Greenfield first.\";\n      }\n      \n      logger.debug(`Returning error response: ${errorMessage}`);\n      \n      // Extract bucket and object names from content if they exist\n      const bucketName = (content as Record<string, unknown>)?.bucketName as string | undefined;\n      const objectName = (content as Record<string, unknown>)?.objectName as string | undefined;\n      \n      // Create a detailed error response\n      const textResponse = `❌ GREENFIELD OPERATION FAILED\n\nError: ${errorMessage}\n\nAction: ${content?.actionType || \"Unknown\"}\n${bucketName ? `Bucket: ${bucketName}\\n` : \"\"}${objectName ? `Object: ${objectName}\\n` : \"\"}\nTroubleshooting:\n• Check your BNB balance\n• Ensure bucket/object names follow naming rules\n• Try again later if network issues persist`;\n      \n      callback?.({\n        text: textResponse,\n        content: { \n          success: false,\n          error: errorMessage,\n          actionType: content?.actionType,\n          errorDetails: errorObj.stack\n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Create a bucket called 'autofunfun' on Greenfield bnb and initialize my account if need\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll create a 'my-docs' bucket on BNB Greenfield for you\",\n          actions: [\"GREENFIELD_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Upload this document to my 'my-docs' bucket on Greenfield\",\n          attachments: [{ type: \"document\", url: \"file://document.pdf\" }]\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll upload your document to the 'my-docs' bucket on BNB Greenfield\",\n          actions: [\"GREENFIELD_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Upload this image to my 'autofunfun' bucket on Greenfield\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll upload your image to the 'autofunfun' bucket on BNB Greenfield\",\n          actions: [\"GREENFIELD_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Upload file /path/to/myfile.pdf to my 'autofunfun' bucket on Greenfield\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll upload the file from the path to your 'autofunfun' bucket on BNB Greenfield\",\n          actions: [\"GREENFIELD_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Upload file packages/plugin-bnb-v2/files/README.pdf to my 'autofunfun' bucket on Greenfield\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll upload the file from the path to your 'autofunfun' bucket on BNB Greenfield\",\n          actions: [\"GREENFIELD_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Delete the file 'report.pdf' from my 'my-docs' bucket on Greenfield\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll delete 'report.pdf' from your 'my-docs' bucket on BNB Greenfield\",\n          actions: [\"GREENFIELD_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Transfer 0.001 BNB to my Greenfield account\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll transfer 0.001 BNB from your BNB Smart Chain wallet to your Greenfield account\",\n          actions: [\"GREENFIELD_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}; ","import {\n  type Action,\n  type ActionExample,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  logger,\n  ModelType,\n} from \"@elizaos/core\";\nimport { createRequire } from \"node:module\";\n\nimport { getGnfdConfig, InitGnfdClient } from \"../providers/gnfd\";\nimport {\n  initWalletProvider,\n  type WalletProvider,\n} from \"../providers/wallet\";\nimport { getBucketTemplate } from \"../templates\";\n\n// Import the Client from greenfield-js-sdk\nconst require = createRequire(import.meta.url);\nconst {\n  Client,\n} = require(\"@bnb-chain/greenfield-js-sdk\");\n\nexport { getBucketTemplate };\n\n/**\n * Interface for bucket info response\n */\ninterface BucketInfo {\n  id: string;\n  bucketName: string;\n  visibility: string;\n  owner: string;\n  createAt: string;\n  paymentAddress: string;\n  spInfo?: {\n    address: string;\n    endpoint: string;\n  };\n}\n\n/**\n * Interface for Greenfield bucket response item\n */\ninterface GnfdBucketInfo {\n  id?: string;\n  bucketName?: string;\n  name?: string;\n  visibility?: number;\n  owner?: string;\n  createAt?: string | number;\n  paymentAddress?: string;\n  primarySpAddress?: string;\n  spInfo?: {\n    primarySp?: {\n      address?: string;\n      endpoint?: string;\n    };\n  };\n}\n\n/**\n * Interface for direct chain query bucket response\n */\ninterface ChainQueryBucket {\n  id?: string;\n  bucketName?: string;\n  name?: string;\n  visibility?: number;\n  owner?: string;\n  createAt?: string | number;\n  paymentAddress?: string;\n  primarySpAddress?: string;\n}\n\n/**\n * Interface for Greenfield Bucket List response\n */\ninterface GetBucketsResponse {\n  address: string;\n  isInitialized: boolean;\n  buckets: BucketInfo[];\n  explorerUrl?: string;\n}\n\n/**\n * GetBucketAction class - Handles listing buckets on BNB Greenfield\n * \n * This class implements the core functionality to list all buckets\n * associated with an account on Greenfield.\n */\nexport class GetBucketAction {\n  /**\n   * Creates a new GetBucketAction instance\n   * \n   * @param walletProvider - Provider for wallet operations\n   * @param gnfdClient - Greenfield client for blockchain interactions\n   */\n  constructor(\n    private walletProvider: WalletProvider,\n    private gnfdClient: typeof Client\n  ) {}\n\n  /**\n   * Check if an account is initialized on Greenfield\n   * \n   * @param address - The wallet address to check\n   * @returns True if the account is initialized, false otherwise\n   */\n  async isAccountInitialized(address: string): Promise<boolean> {\n    try {\n      logger.debug(`Checking if account ${address} is initialized on Greenfield`);\n      await this.gnfdClient.account.getAccount(address);\n      logger.debug(`Account ${address} is initialized on Greenfield`);\n      return true;\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      logger.debug(`Account ${address} is not initialized on Greenfield: ${errorMsg}`);\n      return false;\n    }\n  }\n\n  /**\n   * Get all buckets owned by the specified address\n   * \n   * @param address - The owner address to query\n   * @returns List of buckets and their details\n   */\n  async listBuckets(address: string): Promise<BucketInfo[]> {\n    try {\n      logger.debug(`Listing buckets for address: ${address}`);\n      \n      if (!this.gnfdClient) {\n        logger.error(\"gnfdClient is undefined or null\");\n        throw new Error(\"gnfdClient is not initialized\");\n      }\n      \n      // Try SDK methods first (these attempts might not work based on logs)\n      try {\n        logger.debug(\"Trying SDK methods for bucket listing\");\n        \n        // Log available methods on bucket for clarity\n        if (this.gnfdClient.bucket) {\n          const bucketMethods = Object.keys(this.gnfdClient.bucket);\n          logger.debug(`Available methods on bucket: ${bucketMethods.join(', ')}`);\n        }\n      } catch (error) {\n        const msg = error instanceof Error ? error.message : String(error);\n        logger.error(`Error with SDK methods: ${msg}`);\n      }\n      \n      // Define all SP endpoints to try (both mainnet and testnet)\n      const endpoints = [\n        'https://greenfield-sp.bnbchain.org',    // Mainnet suggested by user\n        'https://greenfield-sp.nodereal.io',     // Generic mainnet endpoint\n        'https://greenfield-sp.ninicoin.io',     // Generic mainnet endpoint\n        'https://greenfield-sp.bnbchain.org',    // Alternative mainnet endpoint\n        'https://gnfd-testnet-sp1.bnbchain.org', // Testnet SP1\n        'https://gnfd-testnet-sp2.bnbchain.org'  // Testnet SP2\n      ];\n      \n      // Try each endpoint until we get a successful response\n      for (const endpoint of endpoints) {\n        try {\n          logger.debug(`Trying SP endpoint: ${endpoint}`);\n          \n          // According to get_user_buckets.md, we need to use the root path (/)\n          // with X-Gnfd-User-Address header containing the wallet address\n          // Optional query parameter: include-removed=false\n          const response = await fetch(`${endpoint}/?include-removed=false`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Gnfd-User-Address': address\n            }\n          });\n          \n          if (response.ok) {\n            // According to docs, response should be XML\n            const responseText = await response.text();\n            logger.debug(`API response from ${endpoint}: ${responseText.substring(0, 500)}...`);\n            \n            // Basic XML parsing to extract bucket info\n            // This is a simple approach - for production, use a proper XML parser\n            try {\n              // Extract buckets from XML response\n              const buckets: BucketInfo[] = [];\n              \n              // Try to parse Buckets format (from get_user_buckets.md)\n              const bucketMatches = responseText.match(/<Buckets>[\\s\\S]*?<\\/Buckets>/g) || [];\n              if (bucketMatches.length > 0) {\n                logger.debug(`Found ${bucketMatches.length} buckets in XML response (Buckets format)`);\n                \n                for (const bucketXml of bucketMatches) {\n                  // Extract essential info using regex\n                  const bucketName = this.extractXmlValue(bucketXml, 'BucketName');\n                  const id = this.extractXmlValue(bucketXml, 'Id');\n                  const visibility = this.extractXmlValue(bucketXml, 'Visibility');\n                  const owner = this.extractXmlValue(bucketXml, 'Owner');\n                  const createAt = this.extractXmlValue(bucketXml, 'CreateAt');\n                  const paymentAddress = this.extractXmlValue(bucketXml, 'PaymentAddress');\n                  const spAddress = this.extractXmlValue(bucketXml, 'PrimarySpId');\n                  \n                  if (bucketName && id) {\n                    buckets.push({\n                      id,\n                      bucketName,\n                      visibility: this.getVisibilityString(Number(visibility) || 0),\n                      owner: owner || address,\n                      createAt: createAt ? new Date(Number(createAt) * 1000).toISOString() : \"\",\n                      paymentAddress: paymentAddress || \"\",\n                      spInfo: {\n                        address: spAddress || \"\",\n                        endpoint: \"\"\n                      }\n                    });\n                  }\n                }\n              }\n              \n              // Try to parse BucketEntry format (from list_buckets_by_ids.md)\n              const bucketEntryMatches = responseText.match(/<BucketEntry>[\\s\\S]*?<\\/BucketEntry>/g) || [];\n              if (bucketEntryMatches.length > 0) {\n                logger.debug(`Found ${bucketEntryMatches.length} buckets in XML response (BucketEntry format)`);\n                \n                for (const bucketXml of bucketEntryMatches) {\n                  // First extract Value section if it exists (contains detailed info)\n                  const valueMatch = bucketXml.match(/<Value>([\\s\\S]*?)<\\/Value>/);\n                  const valueSection = valueMatch?.[1] || '';\n                  \n                  // Extract bucket info\n                  const id = this.extractXmlValue(bucketXml, 'Id');\n                  \n                  // If we have a Value section, get detailed info\n                  if (valueSection) {\n                    const bucketInfo = this.extractXmlValue(valueSection, 'BucketInfo');\n                    const bucketName = this.extractXmlValue(bucketInfo, 'BucketName');\n                    const visibility = this.extractXmlValue(bucketInfo, 'Visibility');\n                    const owner = this.extractXmlValue(bucketInfo, 'Owner');\n                    const createAt = this.extractXmlValue(bucketInfo, 'CreateAt');\n                    const paymentAddress = this.extractXmlValue(bucketInfo, 'PaymentAddress');\n                    \n                    if (bucketName && id) {\n                      buckets.push({\n                        id,\n                        bucketName,\n                        visibility: this.getVisibilityString(Number(visibility) || 0),\n                        owner: owner || address,\n                        createAt: createAt ? new Date(Number(createAt) * 1000).toISOString() : \"\",\n                        paymentAddress: paymentAddress || \"\",\n                        spInfo: { address: \"\", endpoint: \"\" }\n                      });\n                    }\n                  }\n                  // Otherwise just add basic info\n                  else if (id) {\n                    buckets.push({\n                      id,\n                      bucketName: `bucket-${id}`,\n                      visibility: 'unknown',\n                      owner: address,\n                      createAt: \"\",\n                      paymentAddress: \"\",\n                      spInfo: { address: \"\", endpoint: \"\" }\n                    });\n                  }\n                }\n              }\n              \n              // Return buckets if we found any\n              if (buckets.length > 0) {\n                logger.debug(`Successfully extracted ${buckets.length} buckets from XML response`);\n                return buckets;\n              }\n              \n              logger.debug(`No buckets found in XML response from ${endpoint}`);\n            } catch (parseError) {\n              const msg = parseError instanceof Error ? parseError.message : String(parseError);\n              logger.error(`Error parsing XML response from ${endpoint}: ${msg}`);\n            }\n          } else {\n            // Check if there's an error response\n            try {\n              const errorText = await response.text();\n              logger.error(`API request to ${endpoint} failed: ${response.status} ${response.statusText}`);\n              logger.debug(`Error response: ${errorText}`);\n            } catch (e) {\n              logger.error(`API request to ${endpoint} failed: ${response.status} ${response.statusText}`);\n            }\n          }\n        } catch (error) {\n          const msg = error instanceof Error ? error.message : String(error);\n          logger.error(`Error with API call to ${endpoint}: ${msg}`);\n        }\n      }\n      \n      logger.debug(\"No buckets found with any method or endpoint\");\n      return [];\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      logger.error(`Error listing buckets: ${errorMsg}`);\n      throw new Error(`Failed to list buckets: ${errorMsg}`);\n    }\n  }\n  \n  /**\n   * Helper method to extract values from XML\n   */\n  private extractXmlValue(xml: string, tagName: string): string {\n    const regex = new RegExp(`<${tagName}>(.*?)<\\/${tagName}>`);\n    const match = xml.match(regex);\n    return match?.[1] || '';\n  }\n\n  /**\n   * Convert visibility numeric value to human-readable string\n   */\n  private getVisibilityString(visibility: number): string {\n    switch (visibility) {\n      case 0:\n        return \"private\";\n      case 1:\n        return \"public-read\";\n      case 2:\n        return \"public-read-write\";\n      default:\n        return \"unknown\";\n    }\n  }\n}\n\n/**\n * Action for listing buckets on BNB Greenfield\n * \n * This action handles retrieving all buckets owned by an address on Greenfield,\n * and checks if the account is properly initialized.\n */\nexport const getBucketAction: Action = {\n  name: \"GET_BUCKETS_BNB\",\n  similes: [\"LIST_BUCKETS_BNB\", \"SHOW_BUCKETS_BNB\", \"VIEW_BUCKETS_BNB\", \"GREENFIELD_BUCKETS_BNB\"],\n  description: \"List all buckets owned by an address on BNB Greenfield\",\n  validate: async (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"BNB_PRIVATE_KEY\");\n    return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n  },\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State | undefined,\n    options: Record<string, unknown> = {},\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    logger.info(\"Executing GET_BUCKETS_BNB action\");\n    logger.debug(\"Message content:\", JSON.stringify(message.content, null, 2));\n    logger.debug(\"Message source:\", message.content.source);\n\n    // Validate message source - Allow both \"direct\" and \"client_chat:user\" sources\n    if (!(message.content.source === \"direct\" || message.content.source === \"client_chat:user\")) {\n      logger.warn(\"Bucket listing rejected: invalid source:\", message.content.source);\n      callback?.({\n        text: \"I can't do that for you.\",\n        content: { error: \"Bucket listing not allowed\" },\n      });\n      return false;\n    }\n    logger.debug(\"Source validation passed\");\n\n    // Initialize or update state\n    const currentState = state ? state : (await runtime.composeState(message)) as State;\n\n    // Extract parameters using the model\n    const templateData = {\n      template: getBucketTemplate,\n      state: currentState\n    };\n\n    logger.debug(\"Generating bucket listing parameters using model\");\n    const mlOutput = await runtime.useModel(ModelType.LARGE, { \n      prompt: JSON.stringify(templateData),\n      responseFormat: { type: \"json_object\" }\n    });\n    \n    // Parse the JSON output\n    let content: Record<string, unknown>;\n    try {\n      let jsonString = typeof mlOutput === 'string' ? mlOutput : JSON.stringify(mlOutput);\n      \n      // Check if the output is wrapped in markdown code blocks\n      if (typeof jsonString === 'string') {\n        // Clean up markdown code blocks if present\n        const jsonRegex = /```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/;\n        const match = jsonString.match(jsonRegex);\n        \n        if (match?.[1]) {\n          jsonString = match[1];\n          logger.debug(\"Extracted JSON from markdown code block\");\n        }\n        \n        // Remove any trailing/leading whitespace\n        jsonString = jsonString.trim();\n      }\n      \n      // Parse the cleaned JSON string\n      content = JSON.parse(jsonString);\n      logger.debug(\"Generated bucket listing parameters:\", JSON.stringify(content, null, 2));\n    } catch (error) {\n      logger.error(\"Failed to parse model output as JSON:\", mlOutput);\n      content = { address: null, includeDetails: true };\n      logger.debug(\"Using default parameters\");\n    }\n\n    try {\n      // Initialize providers and clients\n      const config = await getGnfdConfig(runtime);\n      const gnfdClient = await InitGnfdClient(runtime);\n      const walletProvider = initWalletProvider(runtime);\n      const action = new GetBucketAction(walletProvider, gnfdClient);\n      \n      // Get address to use (default to wallet's address if not specified)\n      const queryAddress = (content.address as string) || walletProvider.getAddress();\n      logger.debug(`Using address for bucket listing: ${queryAddress}`);\n      \n      // Check if account is initialized\n      const isInitialized = await action.isAccountInitialized(queryAddress);\n      \n      // Create explorer URL\n      const explorerUrl = `${config.GREENFIELD_SCAN}/account/${queryAddress}`;\n      \n      // Prepare response\n      const response: GetBucketsResponse = {\n        address: queryAddress,\n        isInitialized: isInitialized,\n        buckets: [],\n        explorerUrl: explorerUrl\n      };\n      \n      // Only attempt to list buckets if account is initialized\n      if (isInitialized) {\n        logger.debug(\"Account is initialized, listing buckets\");\n        response.buckets = await action.listBuckets(queryAddress);\n      } else {\n        logger.debug(\"Account is not initialized, skipping bucket listing\");\n      }\n      \n      // Format and send the response\n      if (callback) {\n        let responseText = \"\";\n        \n        if (!isInitialized) {\n          responseText = `🚫 ACCOUNT NOT INITIALIZED\n\nYour wallet address (${queryAddress}) is not initialized on the Greenfield network.\n\nBefore you can create or view buckets, you need to initialize your account by sending BNB from BSC to Greenfield. \n\nYou can do this by:\n1. Use the \"GREENFIELD_BNB\" action with a cross-chain transfer\n2. Send a message like: \"Transfer 0.01 BNB from BSC to my Greenfield account\"\n\nView your account: ${explorerUrl}`;\n        }\n        else if (response.buckets.length === 0) {\n          responseText = `📂 NO BUCKETS FOUND\n\nYour wallet (${queryAddress}) is initialized on Greenfield, but you don't have any buckets yet.\n\nYou can create a bucket using the \"GREENFIELD_BNB\" action by saying:\n\"Create a bucket called 'my-first-bucket' on Greenfield\"\n\nView your account: ${explorerUrl}`;\n        }\n        else {\n          // Create a nice formatted list of buckets\n          const bucketList = response.buckets.map((bucket, index) => {\n            const bucketUrl = `${config.GREENFIELD_SCAN}/bucket/${bucket.id}`;\n            return `${index + 1}. \"${bucket.bucketName}\" (${bucket.visibility})\n   • ID: ${bucket.id}\n   • Created: ${bucket.createAt ? new Date(bucket.createAt).toLocaleString() : \"Unknown\"}\n   • View: ${bucketUrl}`;\n          }).join(\"\\n\\n\");\n          \n          responseText = `📂 YOUR GREENFIELD BUCKETS (${response.buckets.length})\n\n${bucketList}\n\nAccount: ${queryAddress}\nView on Explorer: ${explorerUrl}`;\n        }\n        \n        callback({\n          text: responseText,\n          content: { \n            success: true,\n            ...response\n          },\n        });\n      }\n      \n      return true;\n    } catch (error: unknown) {\n      // Handle errors gracefully\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      logger.error(\"Error during bucket listing:\", errorObj.message);\n      logger.debug(\"Error details:\", errorObj.stack || \"No stack trace available\");\n      \n      // Provide user-friendly error messages\n      let errorMessage = errorObj.message;\n      \n      if (errorMessage.includes(\"account not found\") || errorMessage.includes(\"key not found\")) {\n        errorMessage = \"Your account hasn't been initialized on Greenfield. Please transfer BNB from BSC to Greenfield first.\";\n      }\n      \n      callback?.({\n        text: `Failed to list buckets: ${errorMessage}`,\n        content: { \n          success: false,\n          error: errorMessage,\n          address: (content?.address as string) || initWalletProvider(runtime).getAddress()\n        },\n      });\n      return false;\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"List all my buckets on Greenfield\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll list all your buckets on BNB Greenfield\",\n          actions: [\"GET_BUCKETS_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"Show me my Greenfield storage buckets\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"I'll show you all your buckets on BNB Greenfield\",\n          actions: [\"GET_BUCKETS_BNB\"],\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{name1}}\",\n        content: {\n          text: \"What buckets do I have on Greenfield?\",\n        },\n      },\n      {\n        name: \"{{name2}}\",\n        content: {\n          text: \"Let me check what buckets you have on BNB Greenfield\",\n          actions: [\"GET_BUCKETS_BNB\"],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n};\n","/**\n * Environment configuration utilities for BNB Plugin\n * \n * This file handles configuration loading and validation for the BNB Plugin.\n */\nimport type { IAgentRuntime } from \"@elizaos/core\";\nimport { logger } from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport { API_CONFIG } from \"./constants\";\n\n/**\n * BNB configuration schema using Zod for validation\n */\nexport const bnbEnvSchema = z.object({\n    BNB_PRIVATE_KEY: z.string().optional(),\n    BNB_PUBLIC_KEY: z.string().optional(),\n    BSC_PROVIDER_URL: z.string().default(API_CONFIG.DEFAULT_BSC_PROVIDER_URL),\n    BSC_TESTNET_PROVIDER_URL: z.string().default(API_CONFIG.DEFAULT_BSC_TESTNET_PROVIDER_URL),\n    OPBNB_PROVIDER_URL: z.string().default(API_CONFIG.DEFAULT_OPBNB_PROVIDER_URL),\n});\n\n/**\n * Type definition for BNB configuration\n */\nexport type BnbConfig = z.infer<typeof bnbEnvSchema>;\n\n/**\n * Get configuration with defaults\n * \n * @returns BNB configuration object with defaults applied\n */\nexport function getConfig(): BnbConfig {\n    return {\n        BNB_PRIVATE_KEY: process.env.BNB_PRIVATE_KEY,\n        BNB_PUBLIC_KEY: process.env.BNB_PUBLIC_KEY,\n        BSC_PROVIDER_URL: process.env.BSC_PROVIDER_URL || API_CONFIG.DEFAULT_BSC_PROVIDER_URL,\n        BSC_TESTNET_PROVIDER_URL: process.env.BSC_TESTNET_PROVIDER_URL || API_CONFIG.DEFAULT_BSC_TESTNET_PROVIDER_URL,\n        OPBNB_PROVIDER_URL: process.env.OPBNB_PROVIDER_URL || API_CONFIG.DEFAULT_OPBNB_PROVIDER_URL,\n    };\n}\n\n/**\n * Validate BNB configuration using runtime settings or environment variables\n * \n * @param runtime - ElizaOS agent runtime\n * @returns Validated BNB configuration\n * @throws Error if validation fails\n */\nexport async function validateBnbConfig(\n    runtime: IAgentRuntime\n): Promise<BnbConfig> {\n    try {\n        logger.debug(\"Validating BNB configuration\");\n        \n        // Get configuration from runtime settings or environment variables\n        const config = {\n            BNB_PRIVATE_KEY: runtime.getSetting(\"BNB_PRIVATE_KEY\") || process.env.BNB_PRIVATE_KEY,\n            BNB_PUBLIC_KEY: runtime.getSetting(\"BNB_PUBLIC_KEY\") || process.env.BNB_PUBLIC_KEY,\n            BSC_PROVIDER_URL: runtime.getSetting(\"BSC_PROVIDER_URL\") || process.env.BSC_PROVIDER_URL || API_CONFIG.DEFAULT_BSC_PROVIDER_URL,\n            BSC_TESTNET_PROVIDER_URL: runtime.getSetting(\"BSC_TESTNET_PROVIDER_URL\") || process.env.BSC_TESTNET_PROVIDER_URL || API_CONFIG.DEFAULT_BSC_TESTNET_PROVIDER_URL,\n            OPBNB_PROVIDER_URL: runtime.getSetting(\"OPBNB_PROVIDER_URL\") || process.env.OPBNB_PROVIDER_URL || API_CONFIG.DEFAULT_OPBNB_PROVIDER_URL,\n        };\n\n        // Validate configuration against schema\n        const validatedConfig = bnbEnvSchema.parse(config);\n        \n        // Log validation success\n        logger.debug(\"BNB configuration validated successfully\");\n        \n        return validatedConfig;\n    } catch (error) {\n        // Handle validation errors\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            \n            logger.error(`BNB configuration validation failed: ${errorMessages}`);\n            \n            throw new Error(\n                `BNB configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        \n        // Handle other errors\n        logger.error(\"Unexpected error during BNB configuration validation:\", error);\n        throw error;\n    }\n}\n\n/**\n * Check if a wallet is configured (either private or public key)\n * \n * @param config - BNB configuration\n * @returns True if a wallet is configured, false otherwise\n */\nexport function hasWalletConfigured(config: BnbConfig): boolean {\n    return !!(config.BNB_PRIVATE_KEY || config.BNB_PUBLIC_KEY);\n}\n\n/**\n * Check if a wallet with private key is configured\n * \n * @param config - BNB configuration\n * @returns True if a wallet with private key is configured, false otherwise\n */\nexport function hasPrivateKeyConfigured(config: BnbConfig): boolean {\n    return !!config.BNB_PRIVATE_KEY;\n}\n","/**\n * BNB Smart Chain (BSC) Plugin for ElizaOS\n * \n * This plugin provides integration with the BNB Smart Chain ecosystem,\n * supporting transfers, swaps, staking, bridging, and token deployments.\n */\nimport type { Plugin, IAgentRuntime } from \"@elizaos/core\";\nimport { logger } from \"@elizaos/core\";\nimport dotenv from \"dotenv\";\n\n// Import actions\nimport { swapAction } from \"./actions/swap\";\nimport { transferAction } from \"./actions/transfer\";\nimport { getBalanceAction } from \"./actions/getBalance\";\nimport { bridgeAction } from \"./actions/bridge\";\nimport { stakeAction } from \"./actions/stake\";\nimport { faucetAction } from \"./actions/faucet\";\nimport { deployAction } from \"./actions/deploy\";\nimport { greenfieldAction } from \"./actions/gnfd\";\nimport { getBucketAction } from \"./actions/getBucket\";\n\n// Import provider\nimport { bnbWalletProvider } from \"./providers/wallet\";\n\n// Import configuration utilities\nimport { validateBnbConfig } from \"./environment\";\n\n// Load environment variables\ndotenv.config();\n\n/**\n * Main plugin definition for BNB Smart Chain integration\n */\nexport const bnbPlugin: Plugin = {\n  /**\n   * Initialize the plugin\n   * \n   * @param config - Plugin configuration\n   * @param runtime - ElizaOS agent runtime\n   */\n  init: async (config: Record<string, string>, runtime: IAgentRuntime) => {\n    logger.info(\"Initializing BNB Smart Chain plugin\");\n    logger.debug(\"BNB plugin config:\", config);\n    \n    try {\n      // Validate BNB configuration\n      const bnbConfig = await validateBnbConfig(runtime);\n      \n      const hasWallet = !!bnbConfig.BNB_PRIVATE_KEY || !!bnbConfig.BNB_PUBLIC_KEY;\n      \n      logger.info(`BNB plugin initialized with wallet: ${hasWallet ? \"Yes\" : \"No\"}`);\n      logger.info(`BSC Provider: ${bnbConfig.BSC_PROVIDER_URL ? \"Configured\" : \"Default\"}`);\n      logger.info(`BSC Testnet Provider: ${bnbConfig.BSC_TESTNET_PROVIDER_URL ? \"Configured\" : \"Default\"}`);\n      logger.info(`OPBNB Provider: ${bnbConfig.OPBNB_PROVIDER_URL ? \"Configured\" : \"Default\"}`);\n      \n    } catch (error) {\n      logger.error(\"Failed to initialize BNB plugin:\", error);\n    }\n  },\n  \n  /**\n   * Plugin metadata\n   */\n  name: \"bnb\",\n  description: \"BNB Smart Chain (BSC) and opBNB integration plugin supporting transfers, swaps, staking, bridging, and token deployments\",\n  \n  /**\n   * Plugin components\n   */\n  actions: [\n    getBalanceAction,\n    transferAction,\n    swapAction,\n    bridgeAction,\n    stakeAction,\n    faucetAction,\n    deployAction,\n    greenfieldAction,\n    getBucketAction\n  ],\n  providers: [bnbWalletProvider],\n  evaluators: [],\n  services: [],\n};\n\n/**\n * Export all actions for external use\n */\nexport * from \"./actions/swap\";\nexport * from \"./actions/transfer\";\nexport * from \"./actions/getBalance\";\nexport * from \"./actions/bridge\";\nexport * from \"./actions/deploy\";\nexport * from \"./actions/stake\";\nexport * from \"./actions/faucet\";\nexport * from \"./actions/gnfd\";\n\n/**\n * Export types and utilities\n */\nexport * from \"./providers/wallet\";\n// export * from \"./types\";\nexport * from \"./environment\";\n\n/**\n * Default export\n */\nexport default bnbPlugin; "]}