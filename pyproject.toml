[project]
name = "cursor-rules"
version = "0.1.0"
description = "Comprehensive Cursor Rules Collection for AI Development"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "Your Name", email = "your.email@example.com" }]
keywords = ["cursor", "rules", "ai-development", "coding-assistant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Documentation",
]

dependencies = [
    "pydantic>=2.5.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pyyaml>=6.0.0",
    "jinja2>=3.1.0",
    "click>=8.1.0",
    "pathlib-mate>=1.3.0",
    "toml>=0.10.2",
    "agno>=1.6.2",
    "dspy",
    "mcp>=1.9.4",
    "openai>=1.86.0",
    "groq>=0.28.0",
    "grok>=6.1",
    "mlflow>=3.1.0",
    "langfuse>=3.0.1",
    "litellm>=1.72.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "httpx>=0.25.0",
    "pytest-mock>=3.11.0",
]
lint = ["ruff>=0.1.0", "black>=23.0.0", "mypy>=1.5.0", "bandit>=1.7.5"]
scripts = ["python-dotenv>=1.0.0", "requests>=2.31.0", "colorama>=0.4.6"]

[project.scripts]
cursor-rules = "cursor_rules.cli:main"
check-rules = "cursor_rules.checker:main"
generate-rules = "cursor_rules.generator:main"

[project.urls]
Homepage = "https://github.com/username/cursor-rules"
Documentation = "https://cursor-rules.readthedocs.io"
Repository = "https://github.com/username/cursor-rules.git"
Issues = "https://github.com/username/cursor-rules/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# UV Configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[tool.uv.sources]
dspy = { git = "https://github.com/stanfordnlp/dspy.git" }

# Ruff Configuration
[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D"]

[tool.ruff.isort]
known-first-party = ["cursor_rules"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy Configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=cursor_rules",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["cursor_rules"]
omit = ["*/tests/*", "*/test_*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
